{
  "stats": {
    "suites": 2,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-11T01:58:11.773Z",
    "end": "2023-05-11T01:58:15.415Z",
    "duration": 3642
  },
  "results": [
    {
      "uuid": "593020b7-c949-4263-bfb0-cd1e5ba933ef",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b33a9dec-c9f5-4314-aa47-c35fc9554262",
          "title": "@tresdoce-nestjs-toolkit/redis",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
              "title": "RedisService",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.service.spec.ts",
              "file": "redis.service.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "RedisService should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 233,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000)",
                  "err": {},
                  "uuid": "47e290a6-0eba-481e-8060-0b0398016075",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return echo",
                  "title": "should be return echo",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  })",
                  "err": {},
                  "uuid": "236e1ac5-2ba1-47b1-8497-1510fee67e5d",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return false if key dont exist in redis",
                  "title": "should be return false if key dont exist in redis",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  })",
                  "err": {},
                  "uuid": "f26ccee7-7158-4325-866d-11443c6b4793",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return OK when set value in redis",
                  "title": "should be return OK when set value in redis",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  })",
                  "err": {},
                  "uuid": "d42b6670-c353-4b78-a376-4185ae633148",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return value of key",
                  "title": "should be return value of key",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  })",
                  "err": {},
                  "uuid": "ca752e90-4f52-417c-8006-eb5b208e6407",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return true if key exist in redis",
                  "title": "should be return true if key exist in redis",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  })",
                  "err": {},
                  "uuid": "ac947d15-81a0-492e-8bc7-889242a9b23a",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be set value in redis with expiration date",
                  "title": "should be set value in redis with expiration date",
                  "timedOut": false,
                  "duration": 3018,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  })",
                  "err": {},
                  "uuid": "a3db214b-6b76-4721-b45e-bd9eba2ec482",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return true when copy key",
                  "title": "should be return true when copy key",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  })",
                  "err": {},
                  "uuid": "51f26890-75f0-43a9-93f0-65bcb39a9a51",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return false when copy key",
                  "title": "should be return false when copy key",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  })",
                  "err": {},
                  "uuid": "0f6f5a30-e24c-42c0-b767-e7208d3ca8fb",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be rename a key",
                  "title": "should be rename a key",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  })",
                  "err": {},
                  "uuid": "4d91f0fa-4a0e-496f-9bb1-e224311b5302",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return false when delete a key",
                  "title": "should be return false when delete a key",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  })",
                  "err": {},
                  "uuid": "2bfc19e4-a2a5-48a3-afee-7fa49ef01518",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return true when delete a key",
                  "title": "should be return true when delete a key",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  })",
                  "err": {},
                  "uuid": "8a605320-adb7-462a-b239-af17786aad03",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be flush all",
                  "title": "should be flush all",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  })",
                  "err": {},
                  "uuid": "995a1db7-9c01-4a5b-b928-7ed75abc7f7e",
                  "parentUUID": "f020b4ef-8600-49be-8ea1-982db1a56cd8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47e290a6-0eba-481e-8060-0b0398016075",
                "236e1ac5-2ba1-47b1-8497-1510fee67e5d",
                "f26ccee7-7158-4325-866d-11443c6b4793",
                "d42b6670-c353-4b78-a376-4185ae633148",
                "ca752e90-4f52-417c-8006-eb5b208e6407",
                "ac947d15-81a0-492e-8bc7-889242a9b23a",
                "a3db214b-6b76-4721-b45e-bd9eba2ec482",
                "51f26890-75f0-43a9-93f0-65bcb39a9a51",
                "0f6f5a30-e24c-42c0-b767-e7208d3ca8fb",
                "4d91f0fa-4a0e-496f-9bb1-e224311b5302",
                "2bfc19e4-a2a5-48a3-afee-7fa49ef01518",
                "8a605320-adb7-462a-b239-af17786aad03",
                "995a1db7-9c01-4a5b-b928-7ed75abc7f7e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3397,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9b9a9f96-01a6-4bb8-9418-21b7d332e8ab",
              "title": "RedisModule",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
              "file": "redis.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "b3e70f2f-7475-4a0e-9838-4eaa4193f02e",
                  "title": "with auth",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
                  "file": "redis.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "04a9b479-f05d-45be-9ed6-457a64c27477",
                      "title": "forRootAsync",
                      "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
                      "file": "redis.module.spec.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "fullTitle": "RedisModule with auth forRootAsync should be defined",
                          "title": "should be defined",
                          "timedOut": false,
                          "duration": 221,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000)",
                          "err": {},
                          "uuid": "a4510356-27c3-4f5d-88c1-9ac41b449fd5",
                          "parentUUID": "04a9b479-f05d-45be-9ed6-457a64c27477",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": ["a4510356-27c3-4f5d-88c1-9ac41b449fd5"],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 221,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 5000
                    },
                    {
                      "uuid": "b9172ace-c085-40c7-a9a0-857ca7d339e2",
                      "title": "register",
                      "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
                      "file": "redis.module.spec.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "fullTitle": "RedisModule with auth register should be defined",
                          "title": "should be defined",
                          "timedOut": false,
                          "duration": 12,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000)",
                          "err": {},
                          "uuid": "8f152b38-40b1-4b30-bc14-2368c0d07545",
                          "parentUUID": "b9172ace-c085-40c7-a9a0-857ca7d339e2",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": ["8f152b38-40b1-4b30-bc14-2368c0d07545"],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 12,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 5000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "3b7a11e4-13d3-400c-8250-b6b24bf45162",
                  "title": "without auth",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
                  "file": "redis.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "RedisModule without auth should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000)",
                      "err": {},
                      "uuid": "ad93e1e4-8ac3-4ff2-af30-858a0ef17748",
                      "parentUUID": "3b7a11e4-13d3-400c-8250-b6b24bf45162",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["ad93e1e4-8ac3-4ff2-af30-858a0ef17748"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

{
  "stats": {
    "suites": 2,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-02T00:48:22.485Z",
    "end": "2023-05-02T00:48:26.027Z",
    "duration": 3542
  },
  "results": [
    {
      "uuid": "fd9f8307-125c-4ecc-8d69-1d6cd4e7bef5",
      "title": "@tresdoce-nestjs-toolkit/redis",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
          "title": "@tresdoce-nestjs-toolkit/redis",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "RedisService > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 294,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "2d9da854-1572-47b1-a809-67febf96e396",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return echo",
              "fullTitle": "should be return echo",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "c1392e81-e458-4159-afd0-1a20a73a1773",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return false if key dont exist in redis",
              "fullTitle": "should be return false if key dont exist in redis",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "786085fd-d99c-441e-9b94-b4f624a56ac0",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return OK when set value in redis",
              "fullTitle": "should be return OK when set value in redis",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "288df911-9dda-47e6-9a82-0874dbf30dee",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return value of key",
              "fullTitle": "should be return value of key",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "f0ce58ad-7643-4772-90b7-f3f30cdffd9d",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return true if key exist in redis",
              "fullTitle": "should be return true if key exist in redis",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "d3ea46dc-8df3-4df2-8fba-7b2c1270c8ad",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be set value in redis with expiration date",
              "fullTitle": "should be set value in redis with expiration date",
              "timedOut": false,
              "duration": 3015,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "726de018-5ff7-475d-9408-9c976e798163",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return true when copy key",
              "fullTitle": "should be return true when copy key",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "062e0228-b309-4066-8177-e8952f460c99",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return false when copy key",
              "fullTitle": "should be return false when copy key",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "6955b9fd-6926-4588-975e-1ae2d445cbdc",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be rename a key",
              "fullTitle": "should be rename a key",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "39840ef3-82ae-498d-a4a3-7479e54e33b3",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return false when delete a key",
              "fullTitle": "should be return false when delete a key",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "f8089bc4-22a1-4f4b-a140-2c6b186040cd",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return true when delete a key",
              "fullTitle": "should be return true when delete a key",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "ce9d6ca1-b52e-47fb-8b3a-23b7075c5b05",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be flush all",
              "fullTitle": "should be flush all",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "4f6b623d-8f8e-4061-ac17-ee4946c32930",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisModule > with auth > forRootAsync > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { RedisModule } from '../redis/redis.module';\nimport { config } from './utils';\n\njest.setTimeout(70000);\ndescribe('RedisModule', () => {\n  describe('with auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        containerName: `${tcName}-redis-module-with-auth`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    describe('forRootAsync', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            ConfigModule.forRoot({\n              isGlobal: true,\n              load: [config],\n            }),\n            RedisModule,\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n\n    describe('register', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            RedisModule.register({\n              name: 'test-redis-module',\n              username: encodeURIComponent('default'),\n              password: encodeURIComponent('123456'),\n              host: global.hostContainer,\n              port: parseInt('6379', 10),\n            }),\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n  });\n\n  describe('without auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        containerName: `${tcName}-redis-module-without-auth`,\n        envs: {},\n        ports: [\n          {\n            container: 6379,\n            host: 6380,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          RedisModule.register({\n            host: global.hostContainer,\n            port: parseInt('6380', 10),\n            database: 1,\n          }),\n        ],\n      }).compile();\n\n      app = module.createNestApplication();\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n  });\n});\n",
              "err": {},
              "uuid": "314df948-68c2-4ad8-8569-3d1768aadeb4",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisModule > with auth > forRootAsync > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { RedisModule } from '../redis/redis.module';\nimport { config } from './utils';\n\njest.setTimeout(70000);\ndescribe('RedisModule', () => {\n  describe('with auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        containerName: `${tcName}-redis-module-with-auth`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    describe('forRootAsync', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            ConfigModule.forRoot({\n              isGlobal: true,\n              load: [config],\n            }),\n            RedisModule,\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n\n    describe('register', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            RedisModule.register({\n              name: 'test-redis-module',\n              username: encodeURIComponent('default'),\n              password: encodeURIComponent('123456'),\n              host: global.hostContainer,\n              port: parseInt('6379', 10),\n            }),\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n  });\n\n  describe('without auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        containerName: `${tcName}-redis-module-without-auth`,\n        envs: {},\n        ports: [\n          {\n            container: 6379,\n            host: 6380,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          RedisModule.register({\n            host: global.hostContainer,\n            port: parseInt('6380', 10),\n            database: 1,\n          }),\n        ],\n      }).compile();\n\n      app = module.createNestApplication();\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n  });\n});\n",
              "err": {},
              "uuid": "0f3ef4b5-398d-4efc-a064-e1d0d587c266",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisModule > with auth > forRootAsync > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { RedisModule } from '../redis/redis.module';\nimport { config } from './utils';\n\njest.setTimeout(70000);\ndescribe('RedisModule', () => {\n  describe('with auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        containerName: `${tcName}-redis-module-with-auth`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    describe('forRootAsync', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            ConfigModule.forRoot({\n              isGlobal: true,\n              load: [config],\n            }),\n            RedisModule,\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n\n    describe('register', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            RedisModule.register({\n              name: 'test-redis-module',\n              username: encodeURIComponent('default'),\n              password: encodeURIComponent('123456'),\n              host: global.hostContainer,\n              port: parseInt('6379', 10),\n            }),\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n  });\n\n  describe('without auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        containerName: `${tcName}-redis-module-without-auth`,\n        envs: {},\n        ports: [\n          {\n            container: 6379,\n            host: 6380,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          RedisModule.register({\n            host: global.hostContainer,\n            port: parseInt('6380', 10),\n            database: 1,\n          }),\n        ],\n      }).compile();\n\n      app = module.createNestApplication();\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n  });\n});\n",
              "err": {},
              "uuid": "55d0ebbc-870b-45c5-8c14-adf30d3fc82a",
              "parentUUID": "08ba4413-c3b1-41aa-8a74-0b866c2632e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d9da854-1572-47b1-a809-67febf96e396",
            "c1392e81-e458-4159-afd0-1a20a73a1773",
            "786085fd-d99c-441e-9b94-b4f624a56ac0",
            "288df911-9dda-47e6-9a82-0874dbf30dee",
            "f0ce58ad-7643-4772-90b7-f3f30cdffd9d",
            "d3ea46dc-8df3-4df2-8fba-7b2c1270c8ad",
            "726de018-5ff7-475d-9408-9c976e798163",
            "062e0228-b309-4066-8177-e8952f460c99",
            "6955b9fd-6926-4588-975e-1ae2d445cbdc",
            "39840ef3-82ae-498d-a4a3-7479e54e33b3",
            "f8089bc4-22a1-4f4b-a140-2c6b186040cd",
            "ce9d6ca1-b52e-47fb-8b3a-23b7075c5b05",
            "4f6b623d-8f8e-4061-ac17-ee4946c32930",
            "314df948-68c2-4ad8-8569-3d1768aadeb4",
            "0f3ef4b5-398d-4efc-a064-e1d0d587c266",
            "55d0ebbc-870b-45c5-8c14-adf30d3fc82a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3542,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

{
  "stats": {
    "suites": 2,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-11T02:09:36.863Z",
    "end": "2023-05-11T02:09:40.418Z",
    "duration": 3555
  },
  "results": [
    {
      "uuid": "875ae198-2105-4d6a-8cc2-dc0eac543c4a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3f267070-d38b-4b94-9db4-062af02f0e0b",
          "title": "@tresdoce-nestjs-toolkit/redis",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cacabf1b-c349-449f-8f12-d04eed58c279",
              "title": "RedisService",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.service.spec.ts",
              "file": "redis.service.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "RedisService should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 291,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000)",
                  "err": {},
                  "uuid": "4f3607ef-1b2b-4823-a65b-511ee7561c79",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return echo",
                  "title": "should be return echo",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  })",
                  "err": {},
                  "uuid": "db850b96-3231-4507-9aa3-c033b4639b4a",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return false if key dont exist in redis",
                  "title": "should be return false if key dont exist in redis",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  })",
                  "err": {},
                  "uuid": "6c81f52a-2271-4f69-9f27-7f6fd3f0d571",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return OK when set value in redis",
                  "title": "should be return OK when set value in redis",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  })",
                  "err": {},
                  "uuid": "95fd2fd5-f834-4ea0-8786-8a205534dae9",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return value of key",
                  "title": "should be return value of key",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  })",
                  "err": {},
                  "uuid": "428b4bf0-4b86-4aaa-87b7-5f232d8874fa",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return true if key exist in redis",
                  "title": "should be return true if key exist in redis",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  })",
                  "err": {},
                  "uuid": "2c45af59-c83c-441b-a6ff-94ef92a4a058",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be set value in redis with expiration date",
                  "title": "should be set value in redis with expiration date",
                  "timedOut": false,
                  "duration": 3016,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  })",
                  "err": {},
                  "uuid": "4ea20836-6bf1-42b7-bdc3-c59946e07917",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return true when copy key",
                  "title": "should be return true when copy key",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  })",
                  "err": {},
                  "uuid": "05727ec4-a87f-480d-bf22-88b25f27a65a",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return false when copy key",
                  "title": "should be return false when copy key",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  })",
                  "err": {},
                  "uuid": "8686dc36-6ff2-4b45-beb7-029b74a16f63",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be rename a key",
                  "title": "should be rename a key",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  })",
                  "err": {},
                  "uuid": "ebc2c558-b519-4807-8e5c-cff437ae6282",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return false when delete a key",
                  "title": "should be return false when delete a key",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  })",
                  "err": {},
                  "uuid": "4749d834-a813-4ede-bdb4-558e88166265",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return true when delete a key",
                  "title": "should be return true when delete a key",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  })",
                  "err": {},
                  "uuid": "32e75a0f-6480-480a-b2a7-1fe23939d21f",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be flush all",
                  "title": "should be flush all",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  })",
                  "err": {},
                  "uuid": "cddf77d2-2077-4f33-8908-f182b00cfccc",
                  "parentUUID": "cacabf1b-c349-449f-8f12-d04eed58c279",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f3607ef-1b2b-4823-a65b-511ee7561c79",
                "db850b96-3231-4507-9aa3-c033b4639b4a",
                "6c81f52a-2271-4f69-9f27-7f6fd3f0d571",
                "95fd2fd5-f834-4ea0-8786-8a205534dae9",
                "428b4bf0-4b86-4aaa-87b7-5f232d8874fa",
                "2c45af59-c83c-441b-a6ff-94ef92a4a058",
                "4ea20836-6bf1-42b7-bdc3-c59946e07917",
                "05727ec4-a87f-480d-bf22-88b25f27a65a",
                "8686dc36-6ff2-4b45-beb7-029b74a16f63",
                "ebc2c558-b519-4807-8e5c-cff437ae6282",
                "4749d834-a813-4ede-bdb4-558e88166265",
                "32e75a0f-6480-480a-b2a7-1fe23939d21f",
                "cddf77d2-2077-4f33-8908-f182b00cfccc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3435,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "bc450179-f8fc-47ed-a0f4-5fd5152b7bd5",
              "title": "RedisModule",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
              "file": "redis.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "f1e285d6-85a2-48a2-951f-51f8ea38180c",
                  "title": "with auth",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
                  "file": "redis.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "0617b94a-cca6-42ab-8622-19d17b4330b0",
                      "title": "forRootAsync",
                      "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
                      "file": "redis.module.spec.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "fullTitle": "RedisModule with auth forRootAsync should be defined",
                          "title": "should be defined",
                          "timedOut": false,
                          "duration": 94,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000)",
                          "err": {},
                          "uuid": "0f8153c3-a2e6-4f4e-9209-88be9617a187",
                          "parentUUID": "0617b94a-cca6-42ab-8622-19d17b4330b0",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "0f8153c3-a2e6-4f4e-9209-88be9617a187"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 94,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 5000
                    },
                    {
                      "uuid": "782540db-c966-428f-9bd7-016c3790dbb2",
                      "title": "register",
                      "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
                      "file": "redis.module.spec.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "fullTitle": "RedisModule with auth register should be defined",
                          "title": "should be defined",
                          "timedOut": false,
                          "duration": 14,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000)",
                          "err": {},
                          "uuid": "f7b8eb15-5961-44e8-9fb1-206d8ceac4ed",
                          "parentUUID": "782540db-c966-428f-9bd7-016c3790dbb2",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f7b8eb15-5961-44e8-9fb1-206d8ceac4ed"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 14,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 5000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "400e8fb5-b986-48bf-b8c8-36d8c2ecb682",
                  "title": "without auth",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
                  "file": "redis.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "RedisModule without auth should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000)",
                      "err": {},
                      "uuid": "966f1b75-328f-44f5-9ca9-939cd9339099",
                      "parentUUID": "400e8fb5-b986-48bf-b8c8-36d8c2ecb682",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "966f1b75-328f-44f5-9ca9-939cd9339099"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}
{
  "stats": {
    "suites": 2,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-11T01:56:21.361Z",
    "end": "2023-05-11T01:56:21.373Z",
    "duration": 12
  },
  "results": [
    {
      "uuid": "406fc1ba-def6-4992-a532-08ca95646cfe",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "88c2d11d-985a-42ea-86ed-ca6ba804a490",
          "title": "@tresdoce-nestjs-toolkit/filters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7a3ddccd-a5a5-4897-b7b0-4fde62eac722",
              "title": "filters",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
              "file": "exceptions.filter.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "efd4160c-0a37-48ca-bdea-f9426946b3c1",
                  "title": "code exception",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                  "file": "exceptions.filter.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "filters code exception should map a regular code exception",
                      "title": "should map a regular code exception",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    })",
                      "err": {},
                      "uuid": "b3bf3848-bdcd-4811-a19c-8699e9c544de",
                      "parentUUID": "efd4160c-0a37-48ca-bdea-f9426946b3c1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["b3bf3848-bdcd-4811-a19c-8699e9c544de"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "76a0a898-e5e6-4728-9f7e-4e4c7b8fe6cc",
                  "title": "HttpExceptions",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                  "file": "exceptions.filter.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "cec45f0c-882e-43e4-8e46-60018cb0903f",
                      "title": "Default HttpExceptions",
                      "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                      "file": "exceptions.filter.spec.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "fullTitle": "filters HttpExceptions Default HttpExceptions should map default exception when thrown with not parameters",
                          "title": "should map default exception when thrown with not parameters",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    })",
                          "err": {},
                          "uuid": "0ef9eba1-f855-4835-91c1-2000ad973a91",
                          "parentUUID": "cec45f0c-882e-43e4-8e46-60018cb0903f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Default HttpExceptions should map default exception when thrown with error details",
                          "title": "should map default exception when thrown with error details",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map default exception when thrown with error details', () => {\n        const status = HttpStatus.FORBIDDEN;\n        const message = 'not pass!';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n          detail: HttpStatus[status],\n        };\n        filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "e8a9a5ff-0667-4b1f-885a-be49ebf1f290",
                          "parentUUID": "cec45f0c-882e-43e4-8e46-60018cb0903f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Default HttpExceptions should map default exception when thrown with error details and description",
                          "title": "should map default exception when thrown with error details and description",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map default exception when thrown with error details and description', () => {\n        const status = HttpStatus.FORBIDDEN;\n        const message = 'passing?';\n        const details = 'not pass!';\n\n        const expectation: IProblemDetail = {\n          message,\n          detail: details,\n          status,\n          code: HttpStatus[status],\n        };\n        filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "0ac1353c-17f9-4cbf-9ddf-44efcc0622db",
                          "parentUUID": "cec45f0c-882e-43e4-8e46-60018cb0903f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Default HttpExceptions should map HttpException response when called with an object",
                          "title": "should map HttpException response when called with an object",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "2cfa268a-4d0c-43fc-a2b5-50f660352834",
                          "parentUUID": "cec45f0c-882e-43e4-8e46-60018cb0903f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "0ef9eba1-f855-4835-91c1-2000ad973a91",
                        "e8a9a5ff-0667-4b1f-885a-be49ebf1f290",
                        "0ac1353c-17f9-4cbf-9ddf-44efcc0622db",
                        "2cfa268a-4d0c-43fc-a2b5-50f660352834"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 3,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 5000
                    },
                    {
                      "uuid": "39a43345-22e1-4a6a-8ad6-7b9a264b7d08",
                      "title": "Generic HttpException",
                      "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                      "file": "exceptions.filter.spec.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "fullTitle": "filters HttpExceptions Generic HttpException should map HttpException response when called with a string",
                          "title": "should map HttpException response when called with a string",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "ba1f0e56-f1e6-4080-81f0-ad1e1a541e27",
                          "parentUUID": "39a43345-22e1-4a6a-8ad6-7b9a264b7d08",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Generic HttpException should map HttpException response when called with an object",
                          "title": "should map HttpException response when called with an object",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "a379b9f8-a5fa-4c9f-8c69-cc91b37ba99e",
                          "parentUUID": "39a43345-22e1-4a6a-8ad6-7b9a264b7d08",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Generic HttpException should map HttpException response when called with an object with empty message",
                          "title": "should map HttpException response when called with an object with empty message",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "aa7e955b-c178-469b-bfaf-8aad0e5789b5",
                          "parentUUID": "39a43345-22e1-4a6a-8ad6-7b9a264b7d08",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Generic HttpException should map HttpException response when called with an array",
                          "title": "should map HttpException response when called with an array",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "bf27cd59-c464-4283-acd1-770d60eef1a3",
                          "parentUUID": "39a43345-22e1-4a6a-8ad6-7b9a264b7d08",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "ba1f0e56-f1e6-4080-81f0-ad1e1a541e27",
                        "a379b9f8-a5fa-4c9f-8c69-cc91b37ba99e",
                        "aa7e955b-c178-469b-bfaf-8aad0e5789b5",
                        "bf27cd59-c464-4283-acd1-770d60eef1a3"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 4,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 5000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f09c66b6-1111-40ac-9f6d-93e1d623dac2",
                  "title": "when used outside a module",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                  "file": "exceptions.filter.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "filters when used outside a module should map default exception when thrown with not parameters",
                      "title": "should map default exception when thrown with not parameters",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    })",
                      "err": {},
                      "uuid": "c40ff31d-979b-41c7-8954-3fc64c1253df",
                      "parentUUID": "f09c66b6-1111-40ac-9f6d-93e1d623dac2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["c40ff31d-979b-41c7-8954-3fc64c1253df"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "ce13d868-5eec-4e21-9f3b-a5446972cdeb",
                  "title": "configuration is defined with values",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                  "file": "exceptions.filter.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "filters configuration is defined with values should be return application info",
                      "title": "should be return application info",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    })",
                      "err": {},
                      "uuid": "0561cc7c-25aa-4578-b4bd-49d60be315ad",
                      "parentUUID": "ce13d868-5eec-4e21-9f3b-a5446972cdeb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["0561cc7c-25aa-4578-b4bd-49d60be315ad"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f030e757-9439-4f0e-8607-821c3ae66fa6",
              "title": "error.utils",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/error.utils.spec.ts",
              "file": "error.utils.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "error.utils should be return code in string",
                  "title": "should be return code in string",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return code in string', () => {\n    const code = getCode({ error: HttpStatus['TEST_ERROR'] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  })",
                  "err": {},
                  "uuid": "1190f59b-e07a-44dd-be9c-09f1469d294a",
                  "parentUUID": "f030e757-9439-4f0e-8607-821c3ae66fa6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "error.utils should be return code in string obj",
                  "title": "should be return code in string obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return code in string obj', () => {\n    const code = getCode({ error: HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  })",
                  "err": {},
                  "uuid": "02ecde21-80e2-4776-a914-7aa1731a910c",
                  "parentUUID": "f030e757-9439-4f0e-8607-821c3ae66fa6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "error.utils should be return code in string",
                  "title": "should be return code in string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return code in string', () => {\n    const code = getCode({ error: HttpStatus['TEST_ERROR'] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  })",
                  "err": {},
                  "uuid": "fb19ef41-0e02-40d5-94e8-a1e7afb8b568",
                  "parentUUID": "f030e757-9439-4f0e-8607-821c3ae66fa6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1190f59b-e07a-44dd-be9c-09f1469d294a",
                "02ecde21-80e2-4776-a914-7aa1731a910c",
                "fb19ef41-0e02-40d5-94e8-a1e7afb8b568"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

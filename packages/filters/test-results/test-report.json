{
  "stats": {
    "suites": 2,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-11T02:10:37.726Z",
    "end": "2023-05-11T02:10:37.742Z",
    "duration": 16
  },
  "results": [
    {
      "uuid": "a47dbcb0-52db-4b1d-b2b1-2d966d9148ed",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9ea1326e-177c-41c9-a244-26b64f5d50f2",
          "title": "@tresdoce-nestjs-toolkit/filters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c94a01cb-0a88-4baa-b1ee-2a024249dd34",
              "title": "filters",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
              "file": "exceptions.filter.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "3072e8b0-fc20-4a49-9ca9-f206703cb043",
                  "title": "code exception",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                  "file": "exceptions.filter.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "filters code exception should map a regular code exception",
                      "title": "should map a regular code exception",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    })",
                      "err": {},
                      "uuid": "16917e2a-f30c-4245-9e2d-18b9654af2c9",
                      "parentUUID": "3072e8b0-fc20-4a49-9ca9-f206703cb043",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "16917e2a-f30c-4245-9e2d-18b9654af2c9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "6fd64373-b597-4c47-8558-bcd1d631c8a9",
                  "title": "HttpExceptions",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                  "file": "exceptions.filter.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "59cc8d6e-857c-4772-a30b-0d35c638e40d",
                      "title": "Default HttpExceptions",
                      "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                      "file": "exceptions.filter.spec.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "fullTitle": "filters HttpExceptions Default HttpExceptions should map default exception when thrown with not parameters",
                          "title": "should map default exception when thrown with not parameters",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    })",
                          "err": {},
                          "uuid": "c245e1e1-ca32-4048-8c23-2e25afc4d98f",
                          "parentUUID": "59cc8d6e-857c-4772-a30b-0d35c638e40d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Default HttpExceptions should map default exception when thrown with error details",
                          "title": "should map default exception when thrown with error details",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map default exception when thrown with error details', () => {\n        const status = HttpStatus.FORBIDDEN;\n        const message = 'not pass!';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n          detail: HttpStatus[status],\n        };\n        filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "a498a2d2-8fa0-4a19-b22a-a1c44c0b9078",
                          "parentUUID": "59cc8d6e-857c-4772-a30b-0d35c638e40d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Default HttpExceptions should map default exception when thrown with error details and description",
                          "title": "should map default exception when thrown with error details and description",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map default exception when thrown with error details and description', () => {\n        const status = HttpStatus.FORBIDDEN;\n        const message = 'passing?';\n        const details = 'not pass!';\n\n        const expectation: IProblemDetail = {\n          message,\n          detail: details,\n          status,\n          code: HttpStatus[status],\n        };\n        filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "6ce52854-29b0-4971-a8e6-e55694390977",
                          "parentUUID": "59cc8d6e-857c-4772-a30b-0d35c638e40d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Default HttpExceptions should map HttpException response when called with an object",
                          "title": "should map HttpException response when called with an object",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "c4feca54-f322-48ba-94e9-696df1ae4386",
                          "parentUUID": "59cc8d6e-857c-4772-a30b-0d35c638e40d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c245e1e1-ca32-4048-8c23-2e25afc4d98f",
                        "a498a2d2-8fa0-4a19-b22a-a1c44c0b9078",
                        "6ce52854-29b0-4971-a8e6-e55694390977",
                        "c4feca54-f322-48ba-94e9-696df1ae4386"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 5,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 5000
                    },
                    {
                      "uuid": "ba37d8b2-cdc3-46a8-aafb-9293122e5a7d",
                      "title": "Generic HttpException",
                      "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                      "file": "exceptions.filter.spec.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "fullTitle": "filters HttpExceptions Generic HttpException should map HttpException response when called with a string",
                          "title": "should map HttpException response when called with a string",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "4055b5ec-4387-4c7e-bd27-8273ef90a526",
                          "parentUUID": "ba37d8b2-cdc3-46a8-aafb-9293122e5a7d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Generic HttpException should map HttpException response when called with an object",
                          "title": "should map HttpException response when called with an object",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "82e820a2-a208-4af3-b5d2-de7d50737366",
                          "parentUUID": "ba37d8b2-cdc3-46a8-aafb-9293122e5a7d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Generic HttpException should map HttpException response when called with an object with empty message",
                          "title": "should map HttpException response when called with an object with empty message",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "1f326e21-4e2a-4516-a950-c0821c9da305",
                          "parentUUID": "ba37d8b2-cdc3-46a8-aafb-9293122e5a7d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Generic HttpException should map HttpException response when called with an array",
                          "title": "should map HttpException response when called with an array",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "2ea93f33-7147-4648-bd3c-ec4a79dd8208",
                          "parentUUID": "ba37d8b2-cdc3-46a8-aafb-9293122e5a7d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "4055b5ec-4387-4c7e-bd27-8273ef90a526",
                        "82e820a2-a208-4af3-b5d2-de7d50737366",
                        "1f326e21-4e2a-4516-a950-c0821c9da305",
                        "2ea93f33-7147-4648-bd3c-ec4a79dd8208"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 5,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 5000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "cc259faa-2847-4fe5-a913-ef64deb2cbfd",
                  "title": "when used outside a module",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                  "file": "exceptions.filter.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "filters when used outside a module should map default exception when thrown with not parameters",
                      "title": "should map default exception when thrown with not parameters",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    })",
                      "err": {},
                      "uuid": "cac08c39-032e-4975-bbcb-c40ffd5a617c",
                      "parentUUID": "cc259faa-2847-4fe5-a913-ef64deb2cbfd",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cac08c39-032e-4975-bbcb-c40ffd5a617c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "91af5a7f-16f7-4598-9668-8688ae304279",
                  "title": "configuration is defined with values",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                  "file": "exceptions.filter.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "filters configuration is defined with values should be return application info",
                      "title": "should be return application info",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    })",
                      "err": {},
                      "uuid": "d2f1af1d-433a-409f-960a-222c066ecf97",
                      "parentUUID": "91af5a7f-16f7-4598-9668-8688ae304279",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d2f1af1d-433a-409f-960a-222c066ecf97"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f24e76c6-4254-4ded-ad40-467ccfcf6ad5",
              "title": "error.utils",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/error.utils.spec.ts",
              "file": "error.utils.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "error.utils should be return code in string",
                  "title": "should be return code in string",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return code in string', () => {\n    const code = getCode({ error: HttpStatus['TEST_ERROR'] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  })",
                  "err": {},
                  "uuid": "c88e4713-82e2-4aee-9923-e7b689a625f8",
                  "parentUUID": "f24e76c6-4254-4ded-ad40-467ccfcf6ad5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "error.utils should be return code in string obj",
                  "title": "should be return code in string obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return code in string obj', () => {\n    const code = getCode({ error: HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  })",
                  "err": {},
                  "uuid": "a564c48d-c8b0-4a13-8e31-98e3cd57124b",
                  "parentUUID": "f24e76c6-4254-4ded-ad40-467ccfcf6ad5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "error.utils should be return code in string",
                  "title": "should be return code in string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return code in string', () => {\n    const code = getCode({ error: HttpStatus['TEST_ERROR'] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  })",
                  "err": {},
                  "uuid": "c31ae6c3-a7d5-40fe-bcaa-0570b472f1e3",
                  "parentUUID": "f24e76c6-4254-4ded-ad40-467ccfcf6ad5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c88e4713-82e2-4aee-9923-e7b689a625f8",
                "a564c48d-c8b0-4a13-8e31-98e3cd57124b",
                "c31ae6c3-a7d5-40fe-bcaa-0570b472f1e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}
{
  "stats": {
    "suites": 2,
    "tests": 27,
    "passes": 27,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 27,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-11T02:10:25.899Z",
    "end": "2023-05-11T02:10:27.115Z",
    "duration": 1216
  },
  "results": [
    {
      "uuid": "8dc7e3cf-8d62-4bf0-975a-53ded49a8489",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d3fe14be-ea4b-4c67-8e8d-3f75c566ebd6",
          "title": "@tresdoce-nestjs-toolkit/mailer",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "833765de-8dae-44ad-ae54-59cbcfa2454d",
              "title": "MailerService",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/mailer/src/__test__/mailer.service.spec.ts",
              "file": "mailer.service.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "MailerService should not be defined if a transport is not provided",
                  "title": "should not be defined if a transport is not provided",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  })",
                  "err": {},
                  "uuid": "69265331-cb51-4ce2-8078-dfbec53a8057",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should accept a smtp transport string",
                  "title": "should accept a smtp transport string",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  })",
                  "err": {},
                  "uuid": "c3ddc931-5909-446b-a0af-8e235886517b",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should accept a smtp transports string",
                  "title": "should accept a smtp transports string",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  })",
                  "err": {},
                  "uuid": "37f869c0-b17f-4602-b9b1-3a68752582d0",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should accept smtp transport options",
                  "title": "should accept smtp transport options",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  })",
                  "err": {},
                  "uuid": "354a3618-43fe-40ea-ab56-67980e1cf990",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should accept a smtp transport instance",
                  "title": "should accept a smtp transport instance",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  })",
                  "err": {},
                  "uuid": "08982d5e-1725-40ef-b972-dbcdd102fa6d",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should send emails with nodemailer",
                  "title": "should send emails with nodemailer",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  })",
                  "err": {},
                  "uuid": "944f7ab1-866d-419d-bfd8-2ab0889c7094",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should send emails with nodemailer transports",
                  "title": "should send emails with nodemailer transports",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  })",
                  "err": {},
                  "uuid": "5014b6ec-7e33-429e-9872-379335a0b413",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should send emails with nodemailer with different transports name",
                  "title": "should send emails with nodemailer with different transports name",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  })",
                  "err": {},
                  "uuid": "a296e390-c828-4897-b41c-fdd5ba2f7f19",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should send emails with nodemailer without transports",
                  "title": "should send emails with nodemailer without transports",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  })",
                  "err": {},
                  "uuid": "04fab54b-2cf1-4b4e-be65-623f3b49f974",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should use mailerOptions.defaults when send emails",
                  "title": "should use mailerOptions.defaults when send emails",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  })",
                  "err": {},
                  "uuid": "aa044c03-daf3-4600-ab1b-39e57f411972",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should use custom transport to send mail",
                  "title": "should use custom transport to send mail",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  })",
                  "err": {},
                  "uuid": "9c40b295-4a42-48d4-8ff7-49a5b0d6d14f",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter",
                  "title": "should compile template with the handlebars adapter",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "8cbcada1-d82e-4234-b167-b413c35023d4",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter with relative path",
                  "title": "should compile template with the handlebars adapter with relative path",
                  "timedOut": false,
                  "duration": 76,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "2787fe80-f528-4e6d-886a-55597e4444e5",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter with error template path",
                  "title": "should compile template with the handlebars adapter with error template path",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  })",
                  "err": {},
                  "uuid": "1d427416-6f47-4212-b1cc-96136e1fcc29",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter with disabled inline-css",
                  "title": "should compile template with the handlebars adapter with disabled inline-css",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "bd910244-58ae-4304-8607-e6c12a59f6ff",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter with enabled inline-css and media query",
                  "title": "should compile template with the handlebars adapter with enabled inline-css and media query",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "911b08a3-6cb9-405c-a5f8-f35b870981b5",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the pug adapter",
                  "title": "should compile template with the pug adapter",
                  "timedOut": false,
                  "duration": 329,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "c000a888-5f21-492d-ae87-a33517ff34e9",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the pug adapter with relative path",
                  "title": "should compile template with the pug adapter with relative path",
                  "timedOut": false,
                  "duration": 186,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "58eebbab-89f1-4081-a65b-e481f6ac9ab2",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the pug adapter with error to read template",
                  "title": "should compile template with the pug adapter with error to read template",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  })",
                  "err": {},
                  "uuid": "e5a2718d-d597-4a13-bdef-ae9555238db8",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the pug adapter without inline css",
                  "title": "should compile template with the pug adapter without inline css",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  })",
                  "err": {},
                  "uuid": "5b664809-6d64-4aa9-bd7e-9301ad5c57b2",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter",
                  "title": "should compile template with the ejs adapter",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "e54c7322-9f22-4404-83c8-0cc74e38ebb2",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter with error to read template",
                  "title": "should compile template with the ejs adapter with error to read template",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  })",
                  "err": {},
                  "uuid": "9073475b-2d24-4ae4-b9a5-9ed51f0c6508",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter read template relative url",
                  "title": "should compile template with the ejs adapter read template relative url",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "907825ea-ec20-4f2b-94f7-43c11bb7c494",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter without css inline",
                  "title": "should compile template with the ejs adapter without css inline",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "8ea4b01a-88e9-4c1b-a319-4500a8849f5a",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter with css inline",
                  "title": "should compile template with the ejs adapter with css inline",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "b304b349-57ff-4bc8-917a-88ee14a21212",
                  "parentUUID": "833765de-8dae-44ad-ae54-59cbcfa2454d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69265331-cb51-4ce2-8078-dfbec53a8057",
                "c3ddc931-5909-446b-a0af-8e235886517b",
                "37f869c0-b17f-4602-b9b1-3a68752582d0",
                "354a3618-43fe-40ea-ab56-67980e1cf990",
                "08982d5e-1725-40ef-b972-dbcdd102fa6d",
                "944f7ab1-866d-419d-bfd8-2ab0889c7094",
                "5014b6ec-7e33-429e-9872-379335a0b413",
                "a296e390-c828-4897-b41c-fdd5ba2f7f19",
                "04fab54b-2cf1-4b4e-be65-623f3b49f974",
                "aa044c03-daf3-4600-ab1b-39e57f411972",
                "9c40b295-4a42-48d4-8ff7-49a5b0d6d14f",
                "8cbcada1-d82e-4234-b167-b413c35023d4",
                "2787fe80-f528-4e6d-886a-55597e4444e5",
                "1d427416-6f47-4212-b1cc-96136e1fcc29",
                "bd910244-58ae-4304-8607-e6c12a59f6ff",
                "911b08a3-6cb9-405c-a5f8-f35b870981b5",
                "c000a888-5f21-492d-ae87-a33517ff34e9",
                "58eebbab-89f1-4081-a65b-e481f6ac9ab2",
                "e5a2718d-d597-4a13-bdef-ae9555238db8",
                "5b664809-6d64-4aa9-bd7e-9301ad5c57b2",
                "e54c7322-9f22-4404-83c8-0cc74e38ebb2",
                "9073475b-2d24-4ae4-b9a5-9ed51f0c6508",
                "907825ea-ec20-4f2b-94f7-43c11bb7c494",
                "8ea4b01a-88e9-4c1b-a319-4500a8849f5a",
                "b304b349-57ff-4bc8-917a-88ee14a21212"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 756,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "e969e2e2-903a-4bf4-a11e-fbfeb5f5674e",
              "title": "MailerModule",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/mailer/src/__test__/mailer.module.spec.ts",
              "file": "mailer.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "0289cbac-83c5-4327-8dc0-4b76383a848b",
                  "title": "forRoot",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/mailer/src/__test__/mailer.module.spec.ts",
                  "file": "mailer.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "MailerModule forRoot should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 412,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "5eec6a49-d01f-4b0b-a90c-23a5193b2969",
                      "parentUUID": "0289cbac-83c5-4327-8dc0-4b76383a848b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5eec6a49-d01f-4b0b-a90c-23a5193b2969"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 412,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "ba5cc9ce-72fa-4a9b-a046-d4b6185b9c20",
                  "title": "forRootAsync",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/mailer/src/__test__/mailer.module.spec.ts",
                  "file": "mailer.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "MailerModule forRootAsync should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 48,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "15e55406-5389-4680-8f0d-752e5a0e2bac",
                      "parentUUID": "ba5cc9ce-72fa-4a9b-a046-d4b6185b9c20",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "15e55406-5389-4680-8f0d-752e5a0e2bac"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 48,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}
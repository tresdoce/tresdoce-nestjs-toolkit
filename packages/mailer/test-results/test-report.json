{
  "stats": {
    "suites": 2,
    "tests": 27,
    "passes": 27,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 27,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-11T01:56:07.990Z",
    "end": "2023-05-11T01:56:08.539Z",
    "duration": 549
  },
  "results": [
    {
      "uuid": "3144cd67-ce2e-4617-a5da-6a7a18f247a9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "66d20d92-ef0b-4980-a7ef-a7d2338dd327",
          "title": "@tresdoce-nestjs-toolkit/mailer",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
              "title": "MailerService",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/mailer/src/__test__/mailer.service.spec.ts",
              "file": "mailer.service.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "MailerService should not be defined if a transport is not provided",
                  "title": "should not be defined if a transport is not provided",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  })",
                  "err": {},
                  "uuid": "096e402d-3168-431a-a337-6067431222a0",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should accept a smtp transport string",
                  "title": "should accept a smtp transport string",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  })",
                  "err": {},
                  "uuid": "a6828bc0-b789-45f7-be13-0ee2301b6de1",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should accept a smtp transports string",
                  "title": "should accept a smtp transports string",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  })",
                  "err": {},
                  "uuid": "9fbd0d31-e9f2-413b-be0c-db2d91dc586c",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should accept smtp transport options",
                  "title": "should accept smtp transport options",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  })",
                  "err": {},
                  "uuid": "8605a7cd-1a5f-48b0-9160-e86c3c9e7bcf",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should accept a smtp transport instance",
                  "title": "should accept a smtp transport instance",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  })",
                  "err": {},
                  "uuid": "88876e06-654c-42a1-8176-cc7690a0f74c",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should send emails with nodemailer",
                  "title": "should send emails with nodemailer",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  })",
                  "err": {},
                  "uuid": "7272d32b-0242-47a1-b2f3-dd857c352038",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should send emails with nodemailer transports",
                  "title": "should send emails with nodemailer transports",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  })",
                  "err": {},
                  "uuid": "8a197d75-9786-492b-856a-9f42f2069ea9",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should send emails with nodemailer with different transports name",
                  "title": "should send emails with nodemailer with different transports name",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  })",
                  "err": {},
                  "uuid": "657f4256-5c7b-4c41-bd5a-97f844edf1b2",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should send emails with nodemailer without transports",
                  "title": "should send emails with nodemailer without transports",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  })",
                  "err": {},
                  "uuid": "7458ba40-9db5-46d5-aced-7f19ea65faed",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should use mailerOptions.defaults when send emails",
                  "title": "should use mailerOptions.defaults when send emails",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  })",
                  "err": {},
                  "uuid": "5c1365b5-5870-49fd-872b-49ef91ae6a66",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should use custom transport to send mail",
                  "title": "should use custom transport to send mail",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  })",
                  "err": {},
                  "uuid": "66248167-5b1a-46f1-bf55-ce2ad77d9f3b",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter",
                  "title": "should compile template with the handlebars adapter",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "ee29557b-a436-4f40-85ad-0956a1f3f006",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter with relative path",
                  "title": "should compile template with the handlebars adapter with relative path",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "6566f148-f6a6-4221-9108-0ba35d2dd8dd",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter with error template path",
                  "title": "should compile template with the handlebars adapter with error template path",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  })",
                  "err": {},
                  "uuid": "22e593c9-961e-4ecc-9a89-bf3ac7fc8516",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter with disabled inline-css",
                  "title": "should compile template with the handlebars adapter with disabled inline-css",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "9e2030d1-4c18-4703-b63c-8786f3968154",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter with enabled inline-css and media query",
                  "title": "should compile template with the handlebars adapter with enabled inline-css and media query",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "3580fed2-ea9e-4ccd-ac3c-76efca0f9b85",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the pug adapter",
                  "title": "should compile template with the pug adapter",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "0e7ea46b-2fa6-4783-b4b0-ac53cc09d4f3",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the pug adapter with relative path",
                  "title": "should compile template with the pug adapter with relative path",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "ed8592fc-52a6-432c-becb-c0ea15e0db15",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the pug adapter with error to read template",
                  "title": "should compile template with the pug adapter with error to read template",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  })",
                  "err": {},
                  "uuid": "a6736274-72ae-4b4b-ab6c-aa7d72ff1890",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the pug adapter without inline css",
                  "title": "should compile template with the pug adapter without inline css",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  })",
                  "err": {},
                  "uuid": "8493d5fc-a643-42b0-91a0-909197be90da",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter",
                  "title": "should compile template with the ejs adapter",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "65e91f32-d9f1-466b-bed1-c07a5d5328f9",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter with error to read template",
                  "title": "should compile template with the ejs adapter with error to read template",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  })",
                  "err": {},
                  "uuid": "c388fe0c-bd6d-4831-954e-a762757c22da",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter read template relative url",
                  "title": "should compile template with the ejs adapter read template relative url",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "bdfab0af-a31b-4717-9728-7df580ff36b1",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter without css inline",
                  "title": "should compile template with the ejs adapter without css inline",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "3a145e27-0eef-42df-9131-490eb6fc2067",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter with css inline",
                  "title": "should compile template with the ejs adapter with css inline",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "bd564d37-ccf6-4485-b113-861e99f4b8ca",
                  "parentUUID": "12801c49-93c1-4cc3-bd4e-887b93d03e44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "096e402d-3168-431a-a337-6067431222a0",
                "a6828bc0-b789-45f7-be13-0ee2301b6de1",
                "9fbd0d31-e9f2-413b-be0c-db2d91dc586c",
                "8605a7cd-1a5f-48b0-9160-e86c3c9e7bcf",
                "88876e06-654c-42a1-8176-cc7690a0f74c",
                "7272d32b-0242-47a1-b2f3-dd857c352038",
                "8a197d75-9786-492b-856a-9f42f2069ea9",
                "657f4256-5c7b-4c41-bd5a-97f844edf1b2",
                "7458ba40-9db5-46d5-aced-7f19ea65faed",
                "5c1365b5-5870-49fd-872b-49ef91ae6a66",
                "66248167-5b1a-46f1-bf55-ce2ad77d9f3b",
                "ee29557b-a436-4f40-85ad-0956a1f3f006",
                "6566f148-f6a6-4221-9108-0ba35d2dd8dd",
                "22e593c9-961e-4ecc-9a89-bf3ac7fc8516",
                "9e2030d1-4c18-4703-b63c-8786f3968154",
                "3580fed2-ea9e-4ccd-ac3c-76efca0f9b85",
                "0e7ea46b-2fa6-4783-b4b0-ac53cc09d4f3",
                "ed8592fc-52a6-432c-becb-c0ea15e0db15",
                "a6736274-72ae-4b4b-ab6c-aa7d72ff1890",
                "8493d5fc-a643-42b0-91a0-909197be90da",
                "65e91f32-d9f1-466b-bed1-c07a5d5328f9",
                "c388fe0c-bd6d-4831-954e-a762757c22da",
                "bdfab0af-a31b-4717-9728-7df580ff36b1",
                "3a145e27-0eef-42df-9131-490eb6fc2067",
                "bd564d37-ccf6-4485-b113-861e99f4b8ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 299,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c6864000-b3c9-4004-8726-6b5e341036fb",
              "title": "MailerModule",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/mailer/src/__test__/mailer.module.spec.ts",
              "file": "mailer.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "6c1ab72a-e48d-49cb-bebb-5fb60c34a390",
                  "title": "forRoot",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/mailer/src/__test__/mailer.module.spec.ts",
                  "file": "mailer.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "MailerModule forRoot should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 241,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "9c857759-8e31-4e3f-a889-ad913ca6833d",
                      "parentUUID": "6c1ab72a-e48d-49cb-bebb-5fb60c34a390",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["9c857759-8e31-4e3f-a889-ad913ca6833d"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 241,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "eeacc02d-29c1-4c09-9f00-3367ea56887c",
                  "title": "forRootAsync",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/mailer/src/__test__/mailer.module.spec.ts",
                  "file": "mailer.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "MailerModule forRootAsync should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "8f10efaf-06c6-40ea-be03-09f80991754d",
                      "parentUUID": "eeacc02d-29c1-4c09-9f00-3367ea56887c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["8f10efaf-06c6-40ea-be03-09f80991754d"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 9,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-02T02:22:30.695Z",
    "end": "2023-05-02T02:22:32.343Z",
    "duration": 1648
  },
  "results": [
    {
      "uuid": "46664aea-ab4c-4419-9caf-9f217d862352",
      "title": "@tresdoce-nestjs-toolkit/health",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "85b4b858-ce62-4804-859b-d6601138b085",
          "title": "@tresdoce-nestjs-toolkit/health",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Health > Ready controller - extend config > should be defined with extend config",
              "fullTitle": "should be defined with extend config",
              "timedOut": false,
              "duration": 731,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TerminusModule,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ReadinessController } from '../health/controllers/readiness.controller';\nimport { CONFIG_OPTIONS } from '../health/constants';\n\nconst mockedConfig = {\n  services: {\n    myService: {\n      url: 'http://localhost:8082',\n      timeout: 3000,\n    },\n    demoApi: {\n      url: 'https://nestjs-starter.up.railway.app',\n      timeout: 3000,\n      healthPath: '/v1/health/liveness',\n    },\n  },\n  database: {\n    typeorm: {\n      type: 'postgres',\n    },\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379,\n  },\n  elasticsearch: {\n    name: 'test-app',\n    node: 'http://localhost:9200',\n  },\n  camunda: {\n    baseUrl: 'http://localhost:8080/engine-rest',\n  },\n};\n\nconst mockExpectReadiness = {\n  status: 'ok',\n  info: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n  error: {},\n  details: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n};\n\nconst mockExpectReadinessDown = {\n  myService: {\n    status: 'down',\n    message: 'connect ECONNREFUSED 127.0.0.1:8082',\n  },\n};\n\nconst simpleConfig = {\n  services: {\n    myService: { url: 'http://localhost:8082' },\n  },\n};\n\ndescribe('Health', () => {\n  describe('Ready controller - extend config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: mockedConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n\n  describe('Ready controller - simple config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: simpleConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "cfff6d00-6492-457d-84df-e11a66ff4290",
              "parentUUID": "85b4b858-ce62-4804-859b-d6601138b085",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Health > Ready controller - extend config > should be return up services with extend config",
              "fullTitle": "should be return up services with extend config",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TerminusModule,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ReadinessController } from '../health/controllers/readiness.controller';\nimport { CONFIG_OPTIONS } from '../health/constants';\n\nconst mockedConfig = {\n  services: {\n    myService: {\n      url: 'http://localhost:8082',\n      timeout: 3000,\n    },\n    demoApi: {\n      url: 'https://nestjs-starter.up.railway.app',\n      timeout: 3000,\n      healthPath: '/v1/health/liveness',\n    },\n  },\n  database: {\n    typeorm: {\n      type: 'postgres',\n    },\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379,\n  },\n  elasticsearch: {\n    name: 'test-app',\n    node: 'http://localhost:9200',\n  },\n  camunda: {\n    baseUrl: 'http://localhost:8080/engine-rest',\n  },\n};\n\nconst mockExpectReadiness = {\n  status: 'ok',\n  info: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n  error: {},\n  details: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n};\n\nconst mockExpectReadinessDown = {\n  myService: {\n    status: 'down',\n    message: 'connect ECONNREFUSED 127.0.0.1:8082',\n  },\n};\n\nconst simpleConfig = {\n  services: {\n    myService: { url: 'http://localhost:8082' },\n  },\n};\n\ndescribe('Health', () => {\n  describe('Ready controller - extend config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: mockedConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n\n  describe('Ready controller - simple config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: simpleConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "da6177a7-f808-492d-9532-5663a8e1626b",
              "parentUUID": "85b4b858-ce62-4804-859b-d6601138b085",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Health > Ready controller - extend config > should be defined with simple config",
              "fullTitle": "should be defined with simple config",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TerminusModule,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ReadinessController } from '../health/controllers/readiness.controller';\nimport { CONFIG_OPTIONS } from '../health/constants';\n\nconst mockedConfig = {\n  services: {\n    myService: {\n      url: 'http://localhost:8082',\n      timeout: 3000,\n    },\n    demoApi: {\n      url: 'https://nestjs-starter.up.railway.app',\n      timeout: 3000,\n      healthPath: '/v1/health/liveness',\n    },\n  },\n  database: {\n    typeorm: {\n      type: 'postgres',\n    },\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379,\n  },\n  elasticsearch: {\n    name: 'test-app',\n    node: 'http://localhost:9200',\n  },\n  camunda: {\n    baseUrl: 'http://localhost:8080/engine-rest',\n  },\n};\n\nconst mockExpectReadiness = {\n  status: 'ok',\n  info: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n  error: {},\n  details: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n};\n\nconst mockExpectReadinessDown = {\n  myService: {\n    status: 'down',\n    message: 'connect ECONNREFUSED 127.0.0.1:8082',\n  },\n};\n\nconst simpleConfig = {\n  services: {\n    myService: { url: 'http://localhost:8082' },\n  },\n};\n\ndescribe('Health', () => {\n  describe('Ready controller - extend config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: mockedConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n\n  describe('Ready controller - simple config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: simpleConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "32e93d5b-fb79-4242-88c0-88186a309b13",
              "parentUUID": "85b4b858-ce62-4804-859b-d6601138b085",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Health > Ready controller - extend config > should be return up services with simple config",
              "fullTitle": "should be return up services with simple config",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TerminusModule,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ReadinessController } from '../health/controllers/readiness.controller';\nimport { CONFIG_OPTIONS } from '../health/constants';\n\nconst mockedConfig = {\n  services: {\n    myService: {\n      url: 'http://localhost:8082',\n      timeout: 3000,\n    },\n    demoApi: {\n      url: 'https://nestjs-starter.up.railway.app',\n      timeout: 3000,\n      healthPath: '/v1/health/liveness',\n    },\n  },\n  database: {\n    typeorm: {\n      type: 'postgres',\n    },\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379,\n  },\n  elasticsearch: {\n    name: 'test-app',\n    node: 'http://localhost:9200',\n  },\n  camunda: {\n    baseUrl: 'http://localhost:8080/engine-rest',\n  },\n};\n\nconst mockExpectReadiness = {\n  status: 'ok',\n  info: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n  error: {},\n  details: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n};\n\nconst mockExpectReadinessDown = {\n  myService: {\n    status: 'down',\n    message: 'connect ECONNREFUSED 127.0.0.1:8082',\n  },\n};\n\nconst simpleConfig = {\n  services: {\n    myService: { url: 'http://localhost:8082' },\n  },\n};\n\ndescribe('Health', () => {\n  describe('Ready controller - extend config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: mockedConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n\n  describe('Ready controller - simple config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: simpleConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "f080514f-b837-47ba-a196-e62bacf89988",
              "parentUUID": "85b4b858-ce62-4804-859b-d6601138b085",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HealthModule > should be define",
              "fullTitle": "should be define",
              "timedOut": false,
              "duration": 558,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { HealthModule } from '../health/health.module';\nimport { LivenessController } from '../health/controllers/liveness.controller';\nimport { ReadinessController } from '../health/controllers/readiness.controller';\n\ndescribe('HealthModule', () => {\n  let app: INestApplication;\n  let livenessController: LivenessController;\n  let readinessController: ReadinessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HealthModule,\n      ],\n    }).compile();\n\n    app = module.createNestApplication();\n    livenessController = module.get<LivenessController>(LivenessController);\n    readinessController = module.get<ReadinessController>(ReadinessController);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await Promise.all([app.close()]);\n  });\n\n  it('should be define', async () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be return status up', async () => {\n    expect(livenessController.getLiveness()).toEqual({ status: 'up' });\n  });\n\n  it('should be return readiness services', async () => {\n    const result = await readinessController.check();\n    expect(result).toHaveProperty('details');\n    expect(result).toHaveProperty('error');\n    expect(result).toHaveProperty('info');\n    expect(result).toHaveProperty('status');\n  });\n});\n",
              "err": {},
              "uuid": "35ab7d93-c1ab-4685-bed2-9920f2bb4ecc",
              "parentUUID": "85b4b858-ce62-4804-859b-d6601138b085",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HealthModule > should be return status up",
              "fullTitle": "should be return status up",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { HealthModule } from '../health/health.module';\nimport { LivenessController } from '../health/controllers/liveness.controller';\nimport { ReadinessController } from '../health/controllers/readiness.controller';\n\ndescribe('HealthModule', () => {\n  let app: INestApplication;\n  let livenessController: LivenessController;\n  let readinessController: ReadinessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HealthModule,\n      ],\n    }).compile();\n\n    app = module.createNestApplication();\n    livenessController = module.get<LivenessController>(LivenessController);\n    readinessController = module.get<ReadinessController>(ReadinessController);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await Promise.all([app.close()]);\n  });\n\n  it('should be define', async () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be return status up', async () => {\n    expect(livenessController.getLiveness()).toEqual({ status: 'up' });\n  });\n\n  it('should be return readiness services', async () => {\n    const result = await readinessController.check();\n    expect(result).toHaveProperty('details');\n    expect(result).toHaveProperty('error');\n    expect(result).toHaveProperty('info');\n    expect(result).toHaveProperty('status');\n  });\n});\n",
              "err": {},
              "uuid": "c67cc7c5-915a-44a4-b124-6fcc7d65e85d",
              "parentUUID": "85b4b858-ce62-4804-859b-d6601138b085",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HealthModule > should be return readiness services",
              "fullTitle": "should be return readiness services",
              "timedOut": false,
              "duration": 317,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { HealthModule } from '../health/health.module';\nimport { LivenessController } from '../health/controllers/liveness.controller';\nimport { ReadinessController } from '../health/controllers/readiness.controller';\n\ndescribe('HealthModule', () => {\n  let app: INestApplication;\n  let livenessController: LivenessController;\n  let readinessController: ReadinessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HealthModule,\n      ],\n    }).compile();\n\n    app = module.createNestApplication();\n    livenessController = module.get<LivenessController>(LivenessController);\n    readinessController = module.get<ReadinessController>(ReadinessController);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await Promise.all([app.close()]);\n  });\n\n  it('should be define', async () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be return status up', async () => {\n    expect(livenessController.getLiveness()).toEqual({ status: 'up' });\n  });\n\n  it('should be return readiness services', async () => {\n    const result = await readinessController.check();\n    expect(result).toHaveProperty('details');\n    expect(result).toHaveProperty('error');\n    expect(result).toHaveProperty('info');\n    expect(result).toHaveProperty('status');\n  });\n});\n",
              "err": {},
              "uuid": "58fcaee8-47b0-4041-976f-61c895aff273",
              "parentUUID": "85b4b858-ce62-4804-859b-d6601138b085",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Health - Live controller > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { LivenessController } from '../health/controllers/liveness.controller';\n\ndescribe('Health - Live controller', () => {\n  let controller: LivenessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [LivenessController],\n    }).compile();\n\n    controller = module.get<LivenessController>(LivenessController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should be return up liveness', () => {\n    expect(controller.getLiveness()).toEqual({ status: 'up' });\n  });\n});\n",
              "err": {},
              "uuid": "aa9f0243-ec9d-4e43-a7b7-d3d1f29058b9",
              "parentUUID": "85b4b858-ce62-4804-859b-d6601138b085",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Health - Live controller > should be return up liveness",
              "fullTitle": "should be return up liveness",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { LivenessController } from '../health/controllers/liveness.controller';\n\ndescribe('Health - Live controller', () => {\n  let controller: LivenessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [LivenessController],\n    }).compile();\n\n    controller = module.get<LivenessController>(LivenessController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should be return up liveness', () => {\n    expect(controller.getLiveness()).toEqual({ status: 'up' });\n  });\n});\n",
              "err": {},
              "uuid": "60949bc0-b9d2-4987-8f1f-1a192ee5812b",
              "parentUUID": "85b4b858-ce62-4804-859b-d6601138b085",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "healthConstants > should be return exclude to prefix global",
              "fullTitle": "should be return exclude to prefix global",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { RequestMethod } from '@nestjs/common';\nimport { controllersExcludes } from '../health/constants';\n\ndescribe('healthConstants', () => {\n  it('should be return exclude to prefix global', async () => {\n    expect(controllersExcludes).toEqual(expect.any(Array));\n    expect(controllersExcludes).toMatchObject([\n      {\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      },\n      {\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      },\n    ]);\n  });\n});\n",
              "err": {},
              "uuid": "3082febe-6342-45e1-b9a2-e32bc2406ce0",
              "parentUUID": "85b4b858-ce62-4804-859b-d6601138b085",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cfff6d00-6492-457d-84df-e11a66ff4290",
            "da6177a7-f808-492d-9532-5663a8e1626b",
            "32e93d5b-fb79-4242-88c0-88186a309b13",
            "f080514f-b837-47ba-a196-e62bacf89988",
            "35ab7d93-c1ab-4685-bed2-9920f2bb4ecc",
            "c67cc7c5-915a-44a4-b124-6fcc7d65e85d",
            "58fcaee8-47b0-4041-976f-61c895aff273",
            "aa9f0243-ec9d-4e43-a7b7-d3d1f29058b9",
            "60949bc0-b9d2-4987-8f1f-1a192ee5812b",
            "3082febe-6342-45e1-b9a2-e32bc2406ce0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1648,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

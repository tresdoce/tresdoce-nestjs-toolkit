{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-11T01:57:00.081Z",
    "end": "2023-05-11T01:57:08.411Z",
    "duration": 8330
  },
  "results": [
    {
      "uuid": "e226acf0-fe3a-48fa-9732-1361947da9db",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7fcb60fb-d741-4a9f-9c64-e924cd300993",
          "title": "@tresdoce-nestjs-toolkit/elk",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0809e964-f58e-4238-9266-d22280168826",
              "title": "ElkModule",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/elk/src/__test__/elk.module.spec.ts",
              "file": "elk.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "adf7db9e-1d89-4a6c-910a-ccd195970a57",
                  "title": "forRoot",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/elk/src/__test__/elk.module.spec.ts",
                  "file": "elk.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "ElkModule forRoot should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1249,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "499b95c9-e7ae-4b5b-b13b-be4c7216b502",
                      "parentUUID": "adf7db9e-1d89-4a6c-910a-ccd195970a57",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["499b95c9-e7ae-4b5b-b13b-be4c7216b502"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1249,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "2422e542-7848-496b-b81c-ed2015d47a1e",
                  "title": "Interceptor",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/elk/src/__test__/elk.module.spec.ts",
                  "file": "elk.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "ElkModule Interceptor should be an ElkInterceptor instance to be defined",
                      "title": "should be an ElkInterceptor instance to be defined",
                      "timedOut": false,
                      "duration": 1010,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "ac6b5363-94fe-4eb1-b5b1-df365d663989",
                      "parentUUID": "2422e542-7848-496b-b81c-ed2015d47a1e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "ElkModule Interceptor should be create document in elasticsearch when return success string",
                      "title": "should be create document in elasticsearch when return success string",
                      "timedOut": false,
                      "duration": 1016,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    })",
                      "err": {},
                      "uuid": "51e7eb01-5e78-4182-bb6e-8594ffe594db",
                      "parentUUID": "2422e542-7848-496b-b81c-ed2015d47a1e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "ElkModule Interceptor should be create document in elasticsearch when return success object",
                      "title": "should be create document in elasticsearch when return success object",
                      "timedOut": false,
                      "duration": 1012,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    })",
                      "err": {},
                      "uuid": "bb0e3043-1b34-4fb5-9259-549a1a9e5fda",
                      "parentUUID": "2422e542-7848-496b-b81c-ed2015d47a1e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "ElkModule Interceptor should be create document in elasticsearch when return success with parameters",
                      "title": "should be create document in elasticsearch when return success with parameters",
                      "timedOut": false,
                      "duration": 1013,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    })",
                      "err": {},
                      "uuid": "8598f832-fdce-4724-a660-7cc781a45a72",
                      "parentUUID": "2422e542-7848-496b-b81c-ed2015d47a1e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "ElkModule Interceptor should be create document in elasticsearch when return exception",
                      "title": "should be create document in elasticsearch when return exception",
                      "timedOut": false,
                      "duration": 1010,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    })",
                      "err": {},
                      "uuid": "3c8f3812-9de6-4c5e-8083-98c0ef0e270b",
                      "parentUUID": "2422e542-7848-496b-b81c-ed2015d47a1e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "ElkModule Interceptor should be create document in elasticsearch when return exception http",
                      "title": "should be create document in elasticsearch when return exception http",
                      "timedOut": false,
                      "duration": 1011,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    })",
                      "err": {},
                      "uuid": "da3e3eec-e1ac-4702-9e85-aa8fdb9ad6a4",
                      "parentUUID": "2422e542-7848-496b-b81c-ed2015d47a1e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ac6b5363-94fe-4eb1-b5b1-df365d663989",
                    "51e7eb01-5e78-4182-bb6e-8594ffe594db",
                    "bb0e3043-1b34-4fb5-9259-549a1a9e5fda",
                    "8598f832-fdce-4724-a660-7cc781a45a72",
                    "3c8f3812-9de6-4c5e-8083-98c0ef0e270b",
                    "da3e3eec-e1ac-4702-9e85-aa8fdb9ad6a4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6072,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7d0cf389-6a05-4831-b229-3959aea248ff",
                  "title": "Register",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/elk/src/__test__/elk.module.spec.ts",
                  "file": "elk.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "ElkModule Register should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1009,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "ae680f20-e743-414d-8328-7f3026874fef",
                      "parentUUID": "7d0cf389-6a05-4831-b229-3959aea248ff",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["ae680f20-e743-414d-8328-7f3026874fef"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1009,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

{
  "stats": {
    "suites": 4,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-05T13:17:56.109Z",
    "end": "2023-05-05T13:17:56.342Z",
    "duration": 233
  },
  "results": [
    {
      "uuid": "75292f1c-953c-4f5d-9511-a0ff51df03b0",
      "title": "@tresdoce-nestjs-toolkit/archetype",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b8d02835-1254-45b7-b274-580ef3b4bc49",
          "title": "@tresdoce-nestjs-toolkit/archetype",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "Constants > should be return exclude to prefix global",
              "title": "Constants > should be return exclude to prefix global",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { RequestMethod } from '@nestjs/common';\nimport { manifestControllerExcludes } from '../archetype/constants/archetype.constants';\n\ndescribe('Constants', () => {\n  it('should be return exclude to prefix global', async () => {\n    expect(manifestControllerExcludes).toEqual(expect.any(Array));\n    expect(manifestControllerExcludes).toMatchObject([\n      {\n        path: '/info',\n        method: RequestMethod.GET,\n      },\n    ]);\n  });\n});\n",
              "err": {},
              "uuid": "ff8814c4-28a1-4306-a0a9-aac2db2eb62a",
              "parentUUID": "b8d02835-1254-45b7-b274-580ef3b4bc49",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeService > should be defined",
              "title": "ArchetypeService > should be defined",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "64e83238-36ca-46ca-912e-747de812fb10",
              "parentUUID": "b8d02835-1254-45b7-b274-580ef3b4bc49",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeService > should be read package file",
              "title": "ArchetypeService > should be read package file",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "22b75286-0e8c-4e31-89ca-120ec6c6970a",
              "parentUUID": "b8d02835-1254-45b7-b274-580ef3b4bc49",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeService > should be return archetype version",
              "title": "ArchetypeService > should be return archetype version",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "562055ca-7c34-4ec7-9f64-1a91ba135be5",
              "parentUUID": "b8d02835-1254-45b7-b274-580ef3b4bc49",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeService > should be return application info",
              "title": "ArchetypeService > should be return application info",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "e37f224c-673c-4d74-9282-aea6b54fe043",
              "parentUUID": "b8d02835-1254-45b7-b274-580ef3b4bc49",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeService > should be return manifest",
              "title": "ArchetypeService > should be return manifest",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "abda106f-1bb2-457b-bd44-8679a51e6e1e",
              "parentUUID": "b8d02835-1254-45b7-b274-580ef3b4bc49",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeModule > should be define",
              "title": "ArchetypeModule > should be define",
              "timedOut": false,
              "duration": 176,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\n\ndescribe('ArchetypeModule', () => {\n  let app: INestApplication;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n    }).compile();\n\n    app = module.createNestApplication();\n    await app.init();\n  });\n\n  it('should be define', async () => {\n    expect(app).toBeDefined();\n  });\n});\n",
              "err": {},
              "uuid": "1589982f-89e3-408b-9c27-ac6218a19536",
              "parentUUID": "b8d02835-1254-45b7-b274-580ef3b4bc49",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeController > should be defined",
              "title": "ArchetypeController > should be defined",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeController } from '../archetype/controllers/archetype.controller';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeController', () => {\n  let controller: ArchetypeController;\n  const archetypeService = {\n    generateManifest: () => manifest,\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      controllers: [ArchetypeController],\n      providers: [ArchetypeService],\n    })\n      .overrideProvider(ArchetypeService)\n      .useValue(archetypeService)\n      .compile();\n\n    controller = module.get<ArchetypeController>(ArchetypeController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should be return manifest json', async () => {\n    expect(await controller.getArchetypeInfo()).toBeDefined();\n    expect(await controller.getArchetypeInfo()).toEqual(manifest);\n  });\n});\n",
              "err": {},
              "uuid": "84630f0a-3aa5-487f-8ebb-bf998274d0a4",
              "parentUUID": "b8d02835-1254-45b7-b274-580ef3b4bc49",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeController > should be return manifest json",
              "title": "ArchetypeController > should be return manifest json",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeController } from '../archetype/controllers/archetype.controller';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeController', () => {\n  let controller: ArchetypeController;\n  const archetypeService = {\n    generateManifest: () => manifest,\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      controllers: [ArchetypeController],\n      providers: [ArchetypeService],\n    })\n      .overrideProvider(ArchetypeService)\n      .useValue(archetypeService)\n      .compile();\n\n    controller = module.get<ArchetypeController>(ArchetypeController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should be return manifest json', async () => {\n    expect(await controller.getArchetypeInfo()).toBeDefined();\n    expect(await controller.getArchetypeInfo()).toEqual(manifest);\n  });\n});\n",
              "err": {},
              "uuid": "8b30e9c1-b1a1-4d9e-87e6-9cfefb180c08",
              "parentUUID": "b8d02835-1254-45b7-b274-580ef3b4bc49",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff8814c4-28a1-4306-a0a9-aac2db2eb62a",
            "64e83238-36ca-46ca-912e-747de812fb10",
            "22b75286-0e8c-4e31-89ca-120ec6c6970a",
            "562055ca-7c34-4ec7-9f64-1a91ba135be5",
            "e37f224c-673c-4d74-9282-aea6b54fe043",
            "abda106f-1bb2-457b-bd44-8679a51e6e1e",
            "1589982f-89e3-408b-9c27-ac6218a19536",
            "84630f0a-3aa5-487f-8ebb-bf998274d0a4",
            "8b30e9c1-b1a1-4d9e-87e6-9cfefb180c08"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 233,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}
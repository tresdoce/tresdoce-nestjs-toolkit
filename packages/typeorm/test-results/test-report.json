{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-02T17:46:03.808Z",
    "end": "2023-05-02T17:46:06.633Z",
    "duration": 2825
  },
  "results": [
    {
      "uuid": "260425a9-2830-476c-9b80-4028c71c9df9",
      "title": "@tresdoce-nestjs-toolkit/typeorm",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "51083ea1-e4f6-4aa9-a09e-69a699c08cc5",
          "title": "@tresdoce-nestjs-toolkit/typeorm",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "TypeOrm > Postgres > should be defined",
              "title": "TypeOrm > Postgres > should be defined",
              "timedOut": false,
              "duration": 257,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "945dcdb3-0be2-4fa4-bb3c-79eb48502abf",
              "parentUUID": "51083ea1-e4f6-4aa9-a09e-69a699c08cc5",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TypeOrm > Postgres > should be return an array of post",
              "title": "TypeOrm > Postgres > should be return an array of post",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "80580afe-8bb3-4b97-a35f-e5423b5d0ea4",
              "parentUUID": "51083ea1-e4f6-4aa9-a09e-69a699c08cc5",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TypeOrm > Postgres > should be defined",
              "title": "TypeOrm > Postgres > should be defined",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "0ffb8564-d345-4ba5-a9f3-c951a482bae5",
              "parentUUID": "51083ea1-e4f6-4aa9-a09e-69a699c08cc5",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TypeOrm > Postgres > should be return an array of post",
              "title": "TypeOrm > Postgres > should be return an array of post",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "3881a0e0-3f13-499e-b92d-d98e01731dba",
              "parentUUID": "51083ea1-e4f6-4aa9-a09e-69a699c08cc5",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TypeOrm > Postgres > should be defined",
              "title": "TypeOrm > Postgres > should be defined",
              "timedOut": false,
              "duration": 2264,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "d240f940-976e-4d42-8045-74f96f52455f",
              "parentUUID": "51083ea1-e4f6-4aa9-a09e-69a699c08cc5",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TypeOrm > Postgres > should be return an array of user",
              "title": "TypeOrm > Postgres > should be return an array of user",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "05f8e452-8109-48ba-a937-ceaa25ba88e0",
              "parentUUID": "51083ea1-e4f6-4aa9-a09e-69a699c08cc5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "945dcdb3-0be2-4fa4-bb3c-79eb48502abf",
            "80580afe-8bb3-4b97-a35f-e5423b5d0ea4",
            "0ffb8564-d345-4ba5-a9f3-c951a482bae5",
            "3881a0e0-3f13-499e-b92d-d98e01731dba",
            "d240f940-976e-4d42-8045-74f96f52455f",
            "05f8e452-8109-48ba-a937-ceaa25ba88e0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2825,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

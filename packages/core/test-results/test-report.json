{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-03T01:38:00.557Z",
    "end": "2023-05-03T01:38:00.572Z",
    "duration": 15
  },
  "results": [
    {
      "uuid": "bf641606-f4e7-4dc8-b3f7-627e3fe52787",
      "title": "@tresdoce-nestjs-toolkit/core",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3b2f0424-f43e-4282-afdb-1ecd619184f1",
          "title": "@tresdoce-nestjs-toolkit/core",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "commons > with env context > should be return commons exclude paths with context",
              "title": "commons > with env context > should be return commons exclude paths with context",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "48c190f7-0a5b-46a1-b7ad-4a26e4b5f46a",
              "parentUUID": "3b2f0424-f43e-4282-afdb-1ecd619184f1",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "commons > with env context > should be return array of exclude paths with context",
              "title": "commons > with env context > should be return array of exclude paths with context",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "f2bd8fdb-2c36-440b-b75d-aff89f881e63",
              "parentUUID": "3b2f0424-f43e-4282-afdb-1ecd619184f1",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "commons > without env context > should be return commons exclude paths without context",
              "title": "commons > without env context > should be return commons exclude paths without context",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "26649b9a-80f9-4d3b-b7d6-1848fd367ce0",
              "parentUUID": "3b2f0424-f43e-4282-afdb-1ecd619184f1",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "commons > without env context > should be return array of exclude paths without context",
              "title": "commons > without env context > should be return array of exclude paths without context",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "b9c143e3-5d9c-40cb-a939-31b930515f4c",
              "parentUUID": "3b2f0424-f43e-4282-afdb-1ecd619184f1",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Public decorator > should be defined",
              "title": "Public decorator > should be defined",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Public, IS_PUBLIC_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Public()).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(IS_PUBLIC_KEY).toBe('isPublic');\n  });\n});\n",
              "err": {},
              "uuid": "ed947e9c-ec80-47d9-a914-82f5a03c42ad",
              "parentUUID": "3b2f0424-f43e-4282-afdb-1ecd619184f1",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Public decorator > should be return key",
              "title": "Public decorator > should be return key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Public, IS_PUBLIC_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Public()).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(IS_PUBLIC_KEY).toBe('isPublic');\n  });\n});\n",
              "err": {},
              "uuid": "0078b887-7605-412b-8120-2264e5e9a06d",
              "parentUUID": "3b2f0424-f43e-4282-afdb-1ecd619184f1",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "https-certificate > should be return https certificate config",
              "title": "https-certificate > should be return https certificate config",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { setHttpsOptions } from '../index';\nimport * as path from 'path';\ndescribe('https-certificate', () => {\n  it('should be return https certificate config', () => {\n    const crtPath = path.resolve(__dirname, './utils/localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).not.toEqual('');\n    expect(config.key).not.toEqual('');\n  });\n\n  it('should be return https certificate config empty', () => {\n    const crtPath = path.resolve(__dirname, './utils/my-localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/my-localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).toEqual('');\n    expect(config.key).toEqual('');\n  });\n});\n",
              "err": {},
              "uuid": "da4b0a43-9952-4657-9151-8f2a2073959e",
              "parentUUID": "3b2f0424-f43e-4282-afdb-1ecd619184f1",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "https-certificate > should be return https certificate config empty",
              "title": "https-certificate > should be return https certificate config empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { setHttpsOptions } from '../index';\nimport * as path from 'path';\ndescribe('https-certificate', () => {\n  it('should be return https certificate config', () => {\n    const crtPath = path.resolve(__dirname, './utils/localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).not.toEqual('');\n    expect(config.key).not.toEqual('');\n  });\n\n  it('should be return https certificate config empty', () => {\n    const crtPath = path.resolve(__dirname, './utils/my-localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/my-localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).toEqual('');\n    expect(config.key).toEqual('');\n  });\n});\n",
              "err": {},
              "uuid": "86a7ca8a-83fb-49ca-890e-7979eda8f000",
              "parentUUID": "3b2f0424-f43e-4282-afdb-1ecd619184f1",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Public decorator > should be defined",
              "title": "Public decorator > should be defined",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Roles, ROLES_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Roles('admin')).toBeDefined();\n    expect(Roles('admin', 'user')).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(ROLES_KEY).toBe('roles');\n  });\n});\n",
              "err": {},
              "uuid": "43912e60-1263-4f1d-8278-813d0c412cf9",
              "parentUUID": "3b2f0424-f43e-4282-afdb-1ecd619184f1",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Public decorator > should be return key",
              "title": "Public decorator > should be return key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Roles, ROLES_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Roles('admin')).toBeDefined();\n    expect(Roles('admin', 'user')).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(ROLES_KEY).toBe('roles');\n  });\n});\n",
              "err": {},
              "uuid": "6c609976-91ec-49a0-a663-a435c84bb51a",
              "parentUUID": "3b2f0424-f43e-4282-afdb-1ecd619184f1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48c190f7-0a5b-46a1-b7ad-4a26e4b5f46a",
            "f2bd8fdb-2c36-440b-b75d-aff89f881e63",
            "26649b9a-80f9-4d3b-b7d6-1848fd367ce0",
            "b9c143e3-5d9c-40cb-a939-31b930515f4c",
            "ed947e9c-ec80-47d9-a914-82f5a03c42ad",
            "0078b887-7605-412b-8120-2264e5e9a06d",
            "da4b0a43-9952-4657-9151-8f2a2073959e",
            "86a7ca8a-83fb-49ca-890e-7979eda8f000",
            "43912e60-1263-4f1d-8278-813d0c412cf9",
            "6c609976-91ec-49a0-a663-a435c84bb51a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

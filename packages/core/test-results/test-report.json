{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-02T02:21:10.091Z",
    "end": "2023-05-02T02:21:10.107Z",
    "duration": 16
  },
  "results": [
    {
      "uuid": "f875986c-58a4-4abd-b291-8bbecba584bf",
      "title": "@tresdoce-nestjs-toolkit/core",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "151fba54-cd65-4cda-b2ba-453531901049",
          "title": "@tresdoce-nestjs-toolkit/core",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "commons > with env context > should be return commons exclude paths with context",
              "fullTitle": "should be return commons exclude paths with context",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "050145fd-c349-4f6e-a2fa-71fbf442c7d1",
              "parentUUID": "151fba54-cd65-4cda-b2ba-453531901049",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "commons > with env context > should be return array of exclude paths with context",
              "fullTitle": "should be return array of exclude paths with context",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "23f61e96-c45a-45a2-a6e9-ced9fb97490e",
              "parentUUID": "151fba54-cd65-4cda-b2ba-453531901049",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "commons > with env context > should be return commons exclude paths without context",
              "fullTitle": "should be return commons exclude paths without context",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "634aaf7b-995e-4781-987d-af854478275d",
              "parentUUID": "151fba54-cd65-4cda-b2ba-453531901049",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "commons > with env context > should be return array of exclude paths without context",
              "fullTitle": "should be return array of exclude paths without context",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "cb2f1042-a3fa-4d8c-8d9c-19ef658153f9",
              "parentUUID": "151fba54-cd65-4cda-b2ba-453531901049",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Public decorator > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Public, IS_PUBLIC_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Public()).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(IS_PUBLIC_KEY).toBe('isPublic');\n  });\n});\n",
              "err": {},
              "uuid": "66e59b05-2315-45ab-8cbc-0c5e251f4482",
              "parentUUID": "151fba54-cd65-4cda-b2ba-453531901049",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Public decorator > should be return key",
              "fullTitle": "should be return key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Public, IS_PUBLIC_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Public()).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(IS_PUBLIC_KEY).toBe('isPublic');\n  });\n});\n",
              "err": {},
              "uuid": "12a3fa1f-5e39-4eeb-89c7-3ec4040b4f91",
              "parentUUID": "151fba54-cd65-4cda-b2ba-453531901049",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "https-certificate > should be return https certificate config",
              "fullTitle": "should be return https certificate config",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { setHttpsOptions } from '../index';\nimport * as path from 'path';\ndescribe('https-certificate', () => {\n  it('should be return https certificate config', () => {\n    const crtPath = path.resolve(__dirname, './utils/localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).not.toEqual('');\n    expect(config.key).not.toEqual('');\n  });\n\n  it('should be return https certificate config empty', () => {\n    const crtPath = path.resolve(__dirname, './utils/my-localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/my-localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).toEqual('');\n    expect(config.key).toEqual('');\n  });\n});\n",
              "err": {},
              "uuid": "4093a3a1-0672-4a23-9599-45a093af5e27",
              "parentUUID": "151fba54-cd65-4cda-b2ba-453531901049",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "https-certificate > should be return https certificate config empty",
              "fullTitle": "should be return https certificate config empty",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { setHttpsOptions } from '../index';\nimport * as path from 'path';\ndescribe('https-certificate', () => {\n  it('should be return https certificate config', () => {\n    const crtPath = path.resolve(__dirname, './utils/localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).not.toEqual('');\n    expect(config.key).not.toEqual('');\n  });\n\n  it('should be return https certificate config empty', () => {\n    const crtPath = path.resolve(__dirname, './utils/my-localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/my-localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).toEqual('');\n    expect(config.key).toEqual('');\n  });\n});\n",
              "err": {},
              "uuid": "73149a33-4dc2-4483-80c6-6a64af393cce",
              "parentUUID": "151fba54-cd65-4cda-b2ba-453531901049",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Public decorator > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Roles, ROLES_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Roles('admin')).toBeDefined();\n    expect(Roles('admin', 'user')).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(ROLES_KEY).toBe('roles');\n  });\n});\n",
              "err": {},
              "uuid": "5988badb-77db-4a0e-b58f-346a9b217012",
              "parentUUID": "151fba54-cd65-4cda-b2ba-453531901049",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Public decorator > should be return key",
              "fullTitle": "should be return key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Roles, ROLES_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Roles('admin')).toBeDefined();\n    expect(Roles('admin', 'user')).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(ROLES_KEY).toBe('roles');\n  });\n});\n",
              "err": {},
              "uuid": "2669e3f0-8eb5-4ca9-ab52-4ab478a7b9d5",
              "parentUUID": "151fba54-cd65-4cda-b2ba-453531901049",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "050145fd-c349-4f6e-a2fa-71fbf442c7d1",
            "23f61e96-c45a-45a2-a6e9-ced9fb97490e",
            "634aaf7b-995e-4781-987d-af854478275d",
            "cb2f1042-a3fa-4d8c-8d9c-19ef658153f9",
            "66e59b05-2315-45ab-8cbc-0c5e251f4482",
            "12a3fa1f-5e39-4eeb-89c7-3ec4040b4f91",
            "4093a3a1-0672-4a23-9599-45a093af5e27",
            "73149a33-4dc2-4483-80c6-6a64af393cce",
            "5988badb-77db-4a0e-b58f-346a9b217012",
            "2669e3f0-8eb5-4ca9-ab52-4ab478a7b9d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

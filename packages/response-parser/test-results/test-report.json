{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-11T01:57:59.919Z",
    "end": "2023-05-11T01:57:59.926Z",
    "duration": 7
  },
  "results": [
    {
      "uuid": "c8d00881-6106-4c31-a363-3c7a089cb7bb",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "358cecf2-397f-4047-bf99-3008e016c0a8",
          "title": "@tresdoce-nestjs-toolkit/response-parser",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bd6a4c97-e92f-4989-8a51-a67f0161298f",
              "title": "ResponseInterceptor",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/response-parser/src/__test__/response.interceptor.spec.ts",
              "file": "response.interceptor.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "ResponseInterceptor should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "a38e16c7-248a-4d24-97df-52e27baab9ca",
                  "parentUUID": "bd6a4c97-e92f-4989-8a51-a67f0161298f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "ResponseInterceptor should return an ResponseInterceptor instance simple entity",
                  "title": "should return an ResponseInterceptor instance simple entity",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should return an ResponseInterceptor instance simple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserResponse)),\n    };\n\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject(fixtureUserResponse);\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  })",
                  "err": {},
                  "uuid": "340e5449-ec30-4675-8f0c-e482db4a3349",
                  "parentUUID": "bd6a4c97-e92f-4989-8a51-a67f0161298f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "ResponseInterceptor should return an ResponseInterceptor instance multiple entity",
                  "title": "should return an ResponseInterceptor instance multiple entity",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should return an ResponseInterceptor instance multiple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserArrayResponse)),\n    };\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject({ data: fixtureUserArrayResponse });\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  })",
                  "err": {},
                  "uuid": "7ba4e15a-75c4-45b2-9ba1-b6bd1d1aeb6e",
                  "parentUUID": "bd6a4c97-e92f-4989-8a51-a67f0161298f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a38e16c7-248a-4d24-97df-52e27baab9ca",
                "340e5449-ec30-4675-8f0c-e482db4a3349",
                "7ba4e15a-75c4-45b2-9ba1-b6bd1d1aeb6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

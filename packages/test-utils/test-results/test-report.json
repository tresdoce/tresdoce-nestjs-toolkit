{
  "stats": {
    "suites": 5,
    "tests": 30,
    "passes": 30,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 30,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-11T02:11:50.602Z",
    "end": "2023-05-11T02:12:40.036Z",
    "duration": 49434
  },
  "results": [
    {
      "uuid": "3c242a11-c333-49a7-81b4-5331c71ccb5a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4880e005-4845-4e35-8ece-d26b0061b788",
          "title": "@tresdoce-nestjs-toolkit/test-utils",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1f6cbc00-2099-4447-9408-f1b3874d6fde",
              "title": "globalTestContainers",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/globalTestContainers.spec.ts",
              "file": "globalTestContainers.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "globalTestContainers should be initialize service from docker-compose.yml",
                  "title": "should be initialize service from docker-compose.yml",
                  "timedOut": false,
                  "duration": 13229,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be initialize service from docker-compose.yml', async () => {\n    const services = ['mongo'];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  })",
                  "err": {},
                  "uuid": "56464bdd-8b59-4bea-ad88-fc55e2ba87f0",
                  "parentUUID": "1f6cbc00-2099-4447-9408-f1b3874d6fde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "globalTestContainers should be initialize all services from docker-compose.yml",
                  "title": "should be initialize all services from docker-compose.yml",
                  "timedOut": false,
                  "duration": 14097,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be initialize all services from docker-compose.yml', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  })",
                  "err": {},
                  "uuid": "91c1a3de-8097-4380-8140-7a1dd74dc71c",
                  "parentUUID": "1f6cbc00-2099-4447-9408-f1b3874d6fde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "globalTestContainers should be initialize services from docker-compose.yml in default path and filename",
                  "title": "should be initialize services from docker-compose.yml in default path and filename",
                  "timedOut": false,
                  "duration": 12017,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be initialize services from docker-compose.yml in default path and filename', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(services)();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  })",
                  "err": {},
                  "uuid": "be7c421a-fb2b-4634-9501-9f46d1b66433",
                  "parentUUID": "1f6cbc00-2099-4447-9408-f1b3874d6fde",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56464bdd-8b59-4bea-ad88-fc55e2ba87f0",
                "91c1a3de-8097-4380-8140-7a1dd74dc71c",
                "be7c421a-fb2b-4634-9501-9f46d1b66433"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 39343,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "5a00c577-0dad-4a74-979e-fdabe45af954",
              "title": "TestContainers",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
              "file": "testcontainer.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "3642795b-6b07-4107-962c-0fda16442ac8",
                  "title": "Redis",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers Redis should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "bfad2957-56df-4704-b31a-0b7f062736bf",
                      "parentUUID": "3642795b-6b07-4107-962c-0fda16442ac8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return exception of instance",
                      "title": "should be return exception of instance",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    })",
                      "err": {},
                      "uuid": "58edaa7b-eff2-4271-84fa-0b73f1c4312f",
                      "parentUUID": "3642795b-6b07-4107-962c-0fda16442ac8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be get instance of test container",
                      "title": "should be get instance of test container",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "d2cf7ee8-30b2-423a-a7d2-f386de6f621e",
                      "parentUUID": "3642795b-6b07-4107-962c-0fda16442ac8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return envs of instance",
                      "title": "should be return envs of instance",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    })",
                      "err": {},
                      "uuid": "8f2e7f48-1968-4ade-aa30-d9567fb61201",
                      "parentUUID": "3642795b-6b07-4107-962c-0fda16442ac8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return container instance",
                      "title": "should be return container instance",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    })",
                      "err": {},
                      "uuid": "ff2c775f-b93a-470c-9e30-2844129fccde",
                      "parentUUID": "3642795b-6b07-4107-962c-0fda16442ac8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return host of container instance",
                      "title": "should be return host of container instance",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    })",
                      "err": {},
                      "uuid": "f7664e39-6c9f-4d26-803d-6383ed402234",
                      "parentUUID": "3642795b-6b07-4107-962c-0fda16442ac8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return name of container instance",
                      "title": "should be return name of container instance",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    })",
                      "err": {},
                      "uuid": "a2df0e01-4457-4598-8002-5bd1db4cba97",
                      "parentUUID": "3642795b-6b07-4107-962c-0fda16442ac8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return mapped port",
                      "title": "should be return mapped port",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    })",
                      "err": {},
                      "uuid": "50a3f589-e8c7-4f2f-9ca2-818954062a69",
                      "parentUUID": "3642795b-6b07-4107-962c-0fda16442ac8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bfad2957-56df-4704-b31a-0b7f062736bf",
                    "58edaa7b-eff2-4271-84fa-0b73f1c4312f",
                    "d2cf7ee8-30b2-423a-a7d2-f386de6f621e",
                    "8f2e7f48-1968-4ade-aa30-d9567fb61201",
                    "ff2c775f-b93a-470c-9e30-2844129fccde",
                    "f7664e39-6c9f-4d26-803d-6383ed402234",
                    "a2df0e01-4457-4598-8002-5bd1db4cba97",
                    "50a3f589-e8c7-4f2f-9ca2-818954062a69"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "61572af7-ea17-4ea8-98ff-3168b5ec9482",
                  "title": "DynamoDB",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers DynamoDB should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "df46f397-37a5-4740-93b9-7822953005aa",
                      "parentUUID": "61572af7-ea17-4ea8-98ff-3168b5ec9482",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "df46f397-37a5-4740-93b9-7822953005aa"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "d19ba454-c911-4580-80f0-bdb3dd0ac4c2",
                  "title": "MongoDB",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers MongoDB should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "87801fbf-7426-4d60-9ef0-ea48ee5da35e",
                      "parentUUID": "d19ba454-c911-4580-80f0-bdb3dd0ac4c2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "87801fbf-7426-4d60-9ef0-ea48ee5da35e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "1394fc9f-050a-4eb1-99c2-e5f7b01c4fc0",
                  "title": "MySql",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers MySql should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "67e5f1dc-b8d7-4c9f-b941-446579fa2594",
                      "parentUUID": "1394fc9f-050a-4eb1-99c2-e5f7b01c4fc0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "67e5f1dc-b8d7-4c9f-b941-446579fa2594"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7b85d551-d5f8-403a-a1d4-c0d26b24182b",
                  "title": "Postgres",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers Postgres should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "27501130-2ed2-4428-b829-e61637695f68",
                      "parentUUID": "7b85d551-d5f8-403a-a1d4-c0d26b24182b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "27501130-2ed2-4428-b829-e61637695f68"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7b71043b-53d4-4eca-8557-8ad0e97c3b86",
                  "title": "ElasticSearch",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers ElasticSearch should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "3cc78668-331a-463c-bb55-2d15007cec6b",
                      "parentUUID": "7b71043b-53d4-4eca-8557-8ad0e97c3b86",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3cc78668-331a-463c-bb55-2d15007cec6b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0cbfbd2b-3358-4d35-a3f8-fade2fdebabc",
              "title": "utilities",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/utils.spec.ts",
              "file": "utils.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "utilities should be return delay default time",
                  "title": "should be return delay default time",
                  "timedOut": false,
                  "duration": 10007,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return delay default time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay();\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  })",
                  "err": {},
                  "uuid": "8396f563-97f2-4121-af30-a199fa36d619",
                  "parentUUID": "0cbfbd2b-3358-4d35-a3f8-fade2fdebabc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "utilities should be return delay custom time",
                  "title": "should be return delay custom time",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return delay custom time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay(60);\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 60);\n  })",
                  "err": {},
                  "uuid": "74549df9-2d4e-4a8b-a898-0d6ed3bf3799",
                  "parentUUID": "0cbfbd2b-3358-4d35-a3f8-fade2fdebabc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "utilities should be return a join of paths",
                  "title": "should be return a join of paths",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return a join of paths', async () => {\n    const filePath = pathJoin(__dirname, 'join');\n    expect(filePath).toBe(path.join(__dirname, 'join'));\n  })",
                  "err": {},
                  "uuid": "dcc0409b-8b17-4f66-af80-c14e80c7124e",
                  "parentUUID": "0cbfbd2b-3358-4d35-a3f8-fade2fdebabc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8396f563-97f2-4121-af30-a199fa36d619",
                "74549df9-2d4e-4a8b-a898-0d6ed3bf3799",
                "dcc0409b-8b17-4f66-af80-c14e80c7124e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10068,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "88b81ada-0296-4847-bf34-1c225dabdd9d",
              "title": "Config",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/config.spec.ts",
              "file": "config.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "855b5d41-9338-4d9a-98d8-d63e237cfaec",
                  "title": "baseConfig",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/config.spec.ts",
                  "file": "config.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Config baseConfig should be return config",
                      "title": "should be return config",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return config', async () => {\n      expect(config()).toBeDefined();\n      expect(config()).not.toBe(null);\n      expect(typeof config()).toBe('object');\n      expect(config()).toEqual(appConfigBase);\n    })",
                      "err": {},
                      "uuid": "3c514ae7-d84e-4356-8950-4dc6981fd932",
                      "parentUUID": "855b5d41-9338-4d9a-98d8-d63e237cfaec",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3c514ae7-d84e-4356-8950-4dc6981fd932"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "1320d79a-98c5-43fe-b65a-b28aa2a063aa",
                  "title": "dynamicConfig",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/config.spec.ts",
                  "file": "config.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Config dynamicConfig should be return config with args",
                      "title": "should be return config with args",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return config with args', async () => {\n      const args = {\n        httOptions: {\n          timeout: 5000,\n          maxRedirects: 5,\n        },\n      };\n\n      expect(dynamicConfig(args)()).toBeDefined();\n      expect(dynamicConfig(args)()).not.toBe(null);\n      expect(typeof dynamicConfig(args)()).toBe('object');\n      expect(dynamicConfig(args)()).toEqual({ ...appConfigBase, ...args });\n    })",
                      "err": {},
                      "uuid": "b8efe9b4-2f3e-4049-b8f9-da2aefbd543f",
                      "parentUUID": "1320d79a-98c5-43fe-b65a-b28aa2a063aa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Config dynamicConfig should be return config without args",
                      "title": "should be return config without args",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return config without args', async () => {\n      expect(dynamicConfig()()).toBeDefined();\n      expect(dynamicConfig()()).not.toBe(null);\n      expect(typeof dynamicConfig()()).toBe('object');\n      expect(dynamicConfig()()).toEqual(appConfigBase);\n    })",
                      "err": {},
                      "uuid": "0e155f31-8938-4d86-b2ce-93bd8eefc3b7",
                      "parentUUID": "1320d79a-98c5-43fe-b65a-b28aa2a063aa",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b8efe9b4-2f3e-4049-b8f9-da2aefbd543f",
                    "0e155f31-8938-4d86-b2ce-93bd8eefc3b7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "88ef6c60-b12f-41af-adc0-89e8c660d712",
              "title": "Fixtures",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/fixtures.spec.ts",
              "file": "fixtures.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "f6386b9b-9e2d-4205-b4f0-c4e08a1832f2",
                  "title": "appConfigBase",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/fixtures.spec.ts",
                  "file": "fixtures.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Fixtures appConfigBase should be return appBaseConfig",
                      "title": "should be return appBaseConfig",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    })",
                      "err": {},
                      "uuid": "35bd9565-2b7e-43b3-bf1b-3080a606cfcd",
                      "parentUUID": "f6386b9b-9e2d-4205-b4f0-c4e08a1832f2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "35bd9565-2b7e-43b3-bf1b-3080a606cfcd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "655e417e-5bf3-4f95-920b-7c53416ba5e0",
                  "title": "manifest",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/fixtures.spec.ts",
                  "file": "fixtures.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Fixtures manifest should be return appBaseConfig",
                      "title": "should be return appBaseConfig",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    })",
                      "err": {},
                      "uuid": "208e18d0-c512-4f0f-8939-9c453f4a9ba7",
                      "parentUUID": "655e417e-5bf3-4f95-920b-7c53416ba5e0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "208e18d0-c512-4f0f-8939-9c453f4a9ba7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f070981f-8149-4810-a006-96e3467ddd3f",
                  "title": "TestContainers options",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/fixtures.spec.ts",
                  "file": "fixtures.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Fixtures TestContainers options should be define Redis options",
                      "title": "should be define Redis options",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "c2195fc4-edff-4c77-a727-d9207ec12432",
                      "parentUUID": "f070981f-8149-4810-a006-96e3467ddd3f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define DynamoDB options",
                      "title": "should be define DynamoDB options",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "d1d1e1cc-20ed-40f2-93b3-3294b34a7bad",
                      "parentUUID": "f070981f-8149-4810-a006-96e3467ddd3f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define MongoDB options",
                      "title": "should be define MongoDB options",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "603547c3-6d72-4cff-971a-2ac3d762fd04",
                      "parentUUID": "f070981f-8149-4810-a006-96e3467ddd3f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define MySql options",
                      "title": "should be define MySql options",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "1f130a13-74ed-4942-930a-fae0b85db70c",
                      "parentUUID": "f070981f-8149-4810-a006-96e3467ddd3f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define Postgres options",
                      "title": "should be define Postgres options",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "1bf5b62f-9f3c-48be-b74a-75b6120bbcb6",
                      "parentUUID": "f070981f-8149-4810-a006-96e3467ddd3f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define ElasticSearch options",
                      "title": "should be define ElasticSearch options",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "ecc9ea27-bf22-4b2a-a55c-fa41e4b31e26",
                      "parentUUID": "f070981f-8149-4810-a006-96e3467ddd3f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c2195fc4-edff-4c77-a727-d9207ec12432",
                    "d1d1e1cc-20ed-40f2-93b3-3294b34a7bad",
                    "603547c3-6d72-4cff-971a-2ac3d762fd04",
                    "1f130a13-74ed-4942-930a-fae0b85db70c",
                    "1bf5b62f-9f3c-48be-b74a-75b6120bbcb6",
                    "ecc9ea27-bf22-4b2a-a55c-fa41e4b31e26"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}
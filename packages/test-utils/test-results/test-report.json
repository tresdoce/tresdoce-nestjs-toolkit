{
  "stats": {
    "suites": 5,
    "tests": 30,
    "passes": 30,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 30,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-11T01:58:26.088Z",
    "end": "2023-05-11T01:59:18.104Z",
    "duration": 52016
  },
  "results": [
    {
      "uuid": "a12451b7-c2e3-4236-bae9-95b9bae4daf9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b7b5efc7-7a94-46b1-884a-5305954cc718",
          "title": "@tresdoce-nestjs-toolkit/test-utils",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9be10981-3960-46ff-a36f-59223b9c7b79",
              "title": "globalTestContainers",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/globalTestContainers.spec.ts",
              "file": "globalTestContainers.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "globalTestContainers should be initialize service from docker-compose.yml",
                  "title": "should be initialize service from docker-compose.yml",
                  "timedOut": false,
                  "duration": 14184,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be initialize service from docker-compose.yml', async () => {\n    const services = ['mongo'];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  })",
                  "err": {},
                  "uuid": "f88f6fde-f32b-47cf-abe6-43764f7f2539",
                  "parentUUID": "9be10981-3960-46ff-a36f-59223b9c7b79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "globalTestContainers should be initialize all services from docker-compose.yml",
                  "title": "should be initialize all services from docker-compose.yml",
                  "timedOut": false,
                  "duration": 15427,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be initialize all services from docker-compose.yml', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  })",
                  "err": {},
                  "uuid": "c3902884-a759-4f61-8231-ab771de207c9",
                  "parentUUID": "9be10981-3960-46ff-a36f-59223b9c7b79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "globalTestContainers should be initialize services from docker-compose.yml in default path and filename",
                  "title": "should be initialize services from docker-compose.yml in default path and filename",
                  "timedOut": false,
                  "duration": 12274,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be initialize services from docker-compose.yml in default path and filename', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(services)();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  })",
                  "err": {},
                  "uuid": "98e03b31-bbb4-4b4b-9dbb-001eb478e752",
                  "parentUUID": "9be10981-3960-46ff-a36f-59223b9c7b79",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f88f6fde-f32b-47cf-abe6-43764f7f2539",
                "c3902884-a759-4f61-8231-ab771de207c9",
                "98e03b31-bbb4-4b4b-9dbb-001eb478e752"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 41885,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1cf00080-dff5-482d-bda9-f36884fe0db5",
              "title": "TestContainers",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
              "file": "testcontainer.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "99b3e5b7-5b91-403d-b488-9f999b4e029b",
                  "title": "Redis",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers Redis should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "31800bc4-033d-424b-aecf-aa27a437bd8c",
                      "parentUUID": "99b3e5b7-5b91-403d-b488-9f999b4e029b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return exception of instance",
                      "title": "should be return exception of instance",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    })",
                      "err": {},
                      "uuid": "cb911b16-d0f2-416e-8e26-6e106b2890f8",
                      "parentUUID": "99b3e5b7-5b91-403d-b488-9f999b4e029b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be get instance of test container",
                      "title": "should be get instance of test container",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "1304e3b1-ccd4-4f77-aef2-2cf144947727",
                      "parentUUID": "99b3e5b7-5b91-403d-b488-9f999b4e029b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return envs of instance",
                      "title": "should be return envs of instance",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    })",
                      "err": {},
                      "uuid": "67caad61-beb4-445b-b2ed-c9ec7edeb257",
                      "parentUUID": "99b3e5b7-5b91-403d-b488-9f999b4e029b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return container instance",
                      "title": "should be return container instance",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    })",
                      "err": {},
                      "uuid": "bf1bf5ff-3073-42f7-b098-b288b062a3fd",
                      "parentUUID": "99b3e5b7-5b91-403d-b488-9f999b4e029b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return host of container instance",
                      "title": "should be return host of container instance",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    })",
                      "err": {},
                      "uuid": "057457fc-88cd-4100-8933-68a0ccb8fe7d",
                      "parentUUID": "99b3e5b7-5b91-403d-b488-9f999b4e029b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return name of container instance",
                      "title": "should be return name of container instance",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    })",
                      "err": {},
                      "uuid": "324acac2-080b-41d2-8126-eac36e616a1e",
                      "parentUUID": "99b3e5b7-5b91-403d-b488-9f999b4e029b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return mapped port",
                      "title": "should be return mapped port",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    })",
                      "err": {},
                      "uuid": "2d3dfe4b-e039-41c6-80bf-cddcaa9a6805",
                      "parentUUID": "99b3e5b7-5b91-403d-b488-9f999b4e029b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "31800bc4-033d-424b-aecf-aa27a437bd8c",
                    "cb911b16-d0f2-416e-8e26-6e106b2890f8",
                    "1304e3b1-ccd4-4f77-aef2-2cf144947727",
                    "67caad61-beb4-445b-b2ed-c9ec7edeb257",
                    "bf1bf5ff-3073-42f7-b098-b288b062a3fd",
                    "057457fc-88cd-4100-8933-68a0ccb8fe7d",
                    "324acac2-080b-41d2-8126-eac36e616a1e",
                    "2d3dfe4b-e039-41c6-80bf-cddcaa9a6805"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "e688cbca-3a97-41dc-bdbe-98741771d948",
                  "title": "DynamoDB",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers DynamoDB should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "6018017c-230b-489f-8ac4-dfdd619341c4",
                      "parentUUID": "e688cbca-3a97-41dc-bdbe-98741771d948",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["6018017c-230b-489f-8ac4-dfdd619341c4"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "cc533920-f912-4dbb-8a48-674d4355d06e",
                  "title": "MongoDB",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers MongoDB should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "42ab15d6-db6a-468a-ab66-d5fb27a7a07a",
                      "parentUUID": "cc533920-f912-4dbb-8a48-674d4355d06e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["42ab15d6-db6a-468a-ab66-d5fb27a7a07a"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f64c5bb9-6626-4fbd-915c-84b5d62ce4ed",
                  "title": "MySql",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers MySql should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "c9705efc-0441-4051-bc2e-5067f885a819",
                      "parentUUID": "f64c5bb9-6626-4fbd-915c-84b5d62ce4ed",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["c9705efc-0441-4051-bc2e-5067f885a819"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "994ab240-14a1-4ee0-983b-15066e0263ea",
                  "title": "Postgres",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers Postgres should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "6f2cb539-e693-41be-8fee-5e30531322ee",
                      "parentUUID": "994ab240-14a1-4ee0-983b-15066e0263ea",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["6f2cb539-e693-41be-8fee-5e30531322ee"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "9a6de4f5-adf8-4132-9c90-4e9b01a44d04",
                  "title": "ElasticSearch",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers ElasticSearch should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "ef503a36-6cd4-4859-87a5-76c81f54f8d8",
                      "parentUUID": "9a6de4f5-adf8-4132-9c90-4e9b01a44d04",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["ef503a36-6cd4-4859-87a5-76c81f54f8d8"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "30af6589-136d-4660-b254-28534998adc6",
              "title": "utilities",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/utils.spec.ts",
              "file": "utils.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "utilities should be return delay default time",
                  "title": "should be return delay default time",
                  "timedOut": false,
                  "duration": 10005,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return delay default time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay();\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  })",
                  "err": {},
                  "uuid": "959082f1-427e-48bd-b731-dc03bd21b707",
                  "parentUUID": "30af6589-136d-4660-b254-28534998adc6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "utilities should be return delay custom time",
                  "title": "should be return delay custom time",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return delay custom time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay(60);\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 60);\n  })",
                  "err": {},
                  "uuid": "6fb4f012-9750-40d0-8405-d865f95f2ee6",
                  "parentUUID": "30af6589-136d-4660-b254-28534998adc6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "utilities should be return a join of paths",
                  "title": "should be return a join of paths",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return a join of paths', async () => {\n    const filePath = pathJoin(__dirname, 'join');\n    expect(filePath).toBe(path.join(__dirname, 'join'));\n  })",
                  "err": {},
                  "uuid": "be78bcfb-8d66-4b24-8922-4c5c51dced76",
                  "parentUUID": "30af6589-136d-4660-b254-28534998adc6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "959082f1-427e-48bd-b731-dc03bd21b707",
                "6fb4f012-9750-40d0-8405-d865f95f2ee6",
                "be78bcfb-8d66-4b24-8922-4c5c51dced76"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10066,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c192f063-db66-4030-8c2b-60164effe62e",
              "title": "Config",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/config.spec.ts",
              "file": "config.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "cfaefa26-287b-49f4-a6ec-ae8dfb50f8da",
                  "title": "baseConfig",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/config.spec.ts",
                  "file": "config.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Config baseConfig should be return config",
                      "title": "should be return config",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return config', async () => {\n      expect(config()).toBeDefined();\n      expect(config()).not.toBe(null);\n      expect(typeof config()).toBe('object');\n      expect(config()).toEqual(appConfigBase);\n    })",
                      "err": {},
                      "uuid": "ded3e200-30db-43ab-95bb-ce1c49b81444",
                      "parentUUID": "cfaefa26-287b-49f4-a6ec-ae8dfb50f8da",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["ded3e200-30db-43ab-95bb-ce1c49b81444"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "c7afa677-9171-4ba6-a22f-66f60d1bbdfa",
                  "title": "dynamicConfig",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/config.spec.ts",
                  "file": "config.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Config dynamicConfig should be return config with args",
                      "title": "should be return config with args",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return config with args', async () => {\n      const args = {\n        httOptions: {\n          timeout: 5000,\n          maxRedirects: 5,\n        },\n      };\n\n      expect(dynamicConfig(args)()).toBeDefined();\n      expect(dynamicConfig(args)()).not.toBe(null);\n      expect(typeof dynamicConfig(args)()).toBe('object');\n      expect(dynamicConfig(args)()).toEqual({ ...appConfigBase, ...args });\n    })",
                      "err": {},
                      "uuid": "1b3a26d6-2c65-499b-afce-dc8738da23b4",
                      "parentUUID": "c7afa677-9171-4ba6-a22f-66f60d1bbdfa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Config dynamicConfig should be return config without args",
                      "title": "should be return config without args",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return config without args', async () => {\n      expect(dynamicConfig()()).toBeDefined();\n      expect(dynamicConfig()()).not.toBe(null);\n      expect(typeof dynamicConfig()()).toBe('object');\n      expect(dynamicConfig()()).toEqual(appConfigBase);\n    })",
                      "err": {},
                      "uuid": "9dec14a9-7534-4284-a4a7-20784e90082f",
                      "parentUUID": "c7afa677-9171-4ba6-a22f-66f60d1bbdfa",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1b3a26d6-2c65-499b-afce-dc8738da23b4",
                    "9dec14a9-7534-4284-a4a7-20784e90082f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c65619d8-1364-4156-af6b-243e265a1cb7",
              "title": "Fixtures",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/fixtures.spec.ts",
              "file": "fixtures.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "50f9bba9-48df-49f3-8750-b1fc6b5b3667",
                  "title": "appConfigBase",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/fixtures.spec.ts",
                  "file": "fixtures.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Fixtures appConfigBase should be return appBaseConfig",
                      "title": "should be return appBaseConfig",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    })",
                      "err": {},
                      "uuid": "7f301b56-a55b-4f13-ba8c-71aa4b679bbc",
                      "parentUUID": "50f9bba9-48df-49f3-8750-b1fc6b5b3667",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["7f301b56-a55b-4f13-ba8c-71aa4b679bbc"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f408bb15-2176-4165-a954-45231389e783",
                  "title": "manifest",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/fixtures.spec.ts",
                  "file": "fixtures.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Fixtures manifest should be return appBaseConfig",
                      "title": "should be return appBaseConfig",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    })",
                      "err": {},
                      "uuid": "b1ed5d71-0f04-4197-900f-4c61e2851a95",
                      "parentUUID": "f408bb15-2176-4165-a954-45231389e783",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": ["b1ed5d71-0f04-4197-900f-4c61e2851a95"],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "d93295e2-b35e-4601-b92a-ee73e3f212ae",
                  "title": "TestContainers options",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/fixtures.spec.ts",
                  "file": "fixtures.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Fixtures TestContainers options should be define Redis options",
                      "title": "should be define Redis options",
                      "timedOut": false,
                      "duration": 31,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "a65347f2-4469-40c1-a02d-4ca80f365a20",
                      "parentUUID": "d93295e2-b35e-4601-b92a-ee73e3f212ae",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define DynamoDB options",
                      "title": "should be define DynamoDB options",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "d0f1814e-80f2-466c-9cc8-e7695ed09918",
                      "parentUUID": "d93295e2-b35e-4601-b92a-ee73e3f212ae",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define MongoDB options",
                      "title": "should be define MongoDB options",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "b39ddad5-6b8d-4663-a054-30aff38e066f",
                      "parentUUID": "d93295e2-b35e-4601-b92a-ee73e3f212ae",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define MySql options",
                      "title": "should be define MySql options",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "cca6a7aa-3307-42df-8bfb-e1e18f07b96d",
                      "parentUUID": "d93295e2-b35e-4601-b92a-ee73e3f212ae",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define Postgres options",
                      "title": "should be define Postgres options",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "e3cced0b-43fd-4762-b55d-7d15356b28c0",
                      "parentUUID": "d93295e2-b35e-4601-b92a-ee73e3f212ae",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define ElasticSearch options",
                      "title": "should be define ElasticSearch options",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "d89e0ca1-d374-4f79-ba0c-f3e527eb000a",
                      "parentUUID": "d93295e2-b35e-4601-b92a-ee73e3f212ae",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a65347f2-4469-40c1-a02d-4ca80f365a20",
                    "d0f1814e-80f2-466c-9cc8-e7695ed09918",
                    "b39ddad5-6b8d-4663-a054-30aff38e066f",
                    "cca6a7aa-3307-42df-8bfb-e1e18f07b96d",
                    "e3cced0b-43fd-4762-b55d-7d15356b28c0",
                    "d89e0ca1-d374-4f79-ba0c-f3e527eb000a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 39,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

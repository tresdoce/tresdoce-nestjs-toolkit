{
  "stats": {
    "suites": 5,
    "tests": 30,
    "passes": 30,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 30,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-03T01:39:33.978Z",
    "end": "2023-05-03T01:40:22.651Z",
    "duration": 48673
  },
  "results": [
    {
      "uuid": "32979787-6295-4d6d-8ac6-cf818f9dce26",
      "title": "@tresdoce-nestjs-toolkit/test-utils",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d4026ec9-5d57-494d-949d-53a113dbe790",
          "title": "@tresdoce-nestjs-toolkit/test-utils",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "globalTestContainers > should be initialize service from docker-compose.yml",
              "title": "globalTestContainers > should be initialize service from docker-compose.yml",
              "timedOut": false,
              "duration": 12578,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { StartedDockerComposeEnvironment } from 'testcontainers';\nimport { closeDockerCompose, initDockerCompose } from '../testcontainers';\nimport path from 'path';\n\ndescribe('globalTestContainers', () => {\n  const composeFilePath = path.resolve(__dirname, '..', 'fixtures', 'docker-compose');\n  const composeFile = 'docker-compose.yml';\n\n  it('should be initialize service from docker-compose.yml', async () => {\n    const services = ['mongo'];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize all services from docker-compose.yml', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize services from docker-compose.yml in default path and filename', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(services)();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n});\n",
              "err": {},
              "uuid": "42a9b68d-0f73-4054-89f6-c23b977bbca3",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "globalTestContainers > should be initialize all services from docker-compose.yml",
              "title": "globalTestContainers > should be initialize all services from docker-compose.yml",
              "timedOut": false,
              "duration": 14015,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { StartedDockerComposeEnvironment } from 'testcontainers';\nimport { closeDockerCompose, initDockerCompose } from '../testcontainers';\nimport path from 'path';\n\ndescribe('globalTestContainers', () => {\n  const composeFilePath = path.resolve(__dirname, '..', 'fixtures', 'docker-compose');\n  const composeFile = 'docker-compose.yml';\n\n  it('should be initialize service from docker-compose.yml', async () => {\n    const services = ['mongo'];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize all services from docker-compose.yml', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize services from docker-compose.yml in default path and filename', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(services)();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n});\n",
              "err": {},
              "uuid": "589376c9-859b-48bd-a678-7189e8840fba",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "globalTestContainers > should be initialize services from docker-compose.yml in default path and filename",
              "title": "globalTestContainers > should be initialize services from docker-compose.yml in default path and filename",
              "timedOut": false,
              "duration": 11987,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { StartedDockerComposeEnvironment } from 'testcontainers';\nimport { closeDockerCompose, initDockerCompose } from '../testcontainers';\nimport path from 'path';\n\ndescribe('globalTestContainers', () => {\n  const composeFilePath = path.resolve(__dirname, '..', 'fixtures', 'docker-compose');\n  const composeFile = 'docker-compose.yml';\n\n  it('should be initialize service from docker-compose.yml', async () => {\n    const services = ['mongo'];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize all services from docker-compose.yml', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize services from docker-compose.yml in default path and filename', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(services)();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n});\n",
              "err": {},
              "uuid": "f458bb70-ba3e-4bfb-820b-f8f288f338d5",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be defined",
              "title": "TestContainers > Redis > should be defined",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "c95e5c90-eb3e-4a0d-a05b-a08e3f557aab",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be return exception of instance",
              "title": "TestContainers > Redis > should be return exception of instance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "9f806c19-571e-4584-b83c-e65b70155045",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be get instance of test container",
              "title": "TestContainers > Redis > should be get instance of test container",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "e3cc9a75-4d46-473e-aa33-79861e37b4fd",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be return envs of instance",
              "title": "TestContainers > Redis > should be return envs of instance",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "0af67095-05e5-430f-821c-1461a4595cb3",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be return container instance",
              "title": "TestContainers > Redis > should be return container instance",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "88d34b80-499d-40c2-93fa-e22c8a1a6b9b",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be return host of container instance",
              "title": "TestContainers > Redis > should be return host of container instance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "49d44762-c572-4e24-acd7-6ddb0a352cae",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be return name of container instance",
              "title": "TestContainers > Redis > should be return name of container instance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "bf857969-3d05-40f6-b102-db156b1266f2",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be return mapped port",
              "title": "TestContainers > Redis > should be return mapped port",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "d7635eae-8060-428d-b684-5a411bf885f1",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > DynamoDB > should be defined",
              "title": "TestContainers > DynamoDB > should be defined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "4d66d844-dc44-46a3-891e-d6f1b8bb098b",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > MongoDB > should be defined",
              "title": "TestContainers > MongoDB > should be defined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "8182a258-9e3d-4917-8007-53e9ef8ec4a5",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > MySql > should be defined",
              "title": "TestContainers > MySql > should be defined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "790eb3b7-af22-428d-b5e0-105d337c5d05",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Postgres > should be defined",
              "title": "TestContainers > Postgres > should be defined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "3c259120-9e29-4e2f-9d97-88f963b7e9c6",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > ElasticSearch > should be defined",
              "title": "TestContainers > ElasticSearch > should be defined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "d7b831e9-66db-4c39-8ae2-02bec33b5988",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "utilities > should be return delay default time",
              "title": "utilities > should be return delay default time",
              "timedOut": false,
              "duration": 10004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { delay, pathJoin } from '../utilities';\nimport path from 'path';\n\ndescribe('utilities', () => {\n  it('should be return delay default time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay();\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n\n  it('should be return delay custom time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay(60);\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 60);\n  });\n\n  it('should be return a join of paths', async () => {\n    const filePath = pathJoin(__dirname, 'join');\n    expect(filePath).toBe(path.join(__dirname, 'join'));\n  });\n});\n",
              "err": {},
              "uuid": "fac6994e-51c2-45cc-b0e6-181201838de1",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "utilities > should be return delay custom time",
              "title": "utilities > should be return delay custom time",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { delay, pathJoin } from '../utilities';\nimport path from 'path';\n\ndescribe('utilities', () => {\n  it('should be return delay default time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay();\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n\n  it('should be return delay custom time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay(60);\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 60);\n  });\n\n  it('should be return a join of paths', async () => {\n    const filePath = pathJoin(__dirname, 'join');\n    expect(filePath).toBe(path.join(__dirname, 'join'));\n  });\n});\n",
              "err": {},
              "uuid": "b50dfa76-e4f9-4684-9a6a-4d3b3bb5037e",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "utilities > should be return a join of paths",
              "title": "utilities > should be return a join of paths",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { delay, pathJoin } from '../utilities';\nimport path from 'path';\n\ndescribe('utilities', () => {\n  it('should be return delay default time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay();\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n\n  it('should be return delay custom time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay(60);\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 60);\n  });\n\n  it('should be return a join of paths', async () => {\n    const filePath = pathJoin(__dirname, 'join');\n    expect(filePath).toBe(path.join(__dirname, 'join'));\n  });\n});\n",
              "err": {},
              "uuid": "dee495ab-d098-4f5c-a35f-379834259053",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Config > baseConfig > should be return config",
              "title": "Config > baseConfig > should be return config",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { config, dynamicConfig } from '../config/index';\nimport { appConfigBase } from '../fixtures';\n\ndescribe('Config', () => {\n  describe('baseConfig', () => {\n    it('should be return config', async () => {\n      expect(config()).toBeDefined();\n      expect(config()).not.toBe(null);\n      expect(typeof config()).toBe('object');\n      expect(config()).toEqual(appConfigBase);\n    });\n  });\n\n  describe('dynamicConfig', () => {\n    it('should be return config with args', async () => {\n      const args = {\n        httOptions: {\n          timeout: 5000,\n          maxRedirects: 5,\n        },\n      };\n\n      expect(dynamicConfig(args)()).toBeDefined();\n      expect(dynamicConfig(args)()).not.toBe(null);\n      expect(typeof dynamicConfig(args)()).toBe('object');\n      expect(dynamicConfig(args)()).toEqual({ ...appConfigBase, ...args });\n    });\n\n    it('should be return config without args', async () => {\n      expect(dynamicConfig()()).toBeDefined();\n      expect(dynamicConfig()()).not.toBe(null);\n      expect(typeof dynamicConfig()()).toBe('object');\n      expect(dynamicConfig()()).toEqual(appConfigBase);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "f011dd40-b86b-499f-a30d-9837057fecf0",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Config > dynamicConfig > should be return config with args",
              "title": "Config > dynamicConfig > should be return config with args",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { config, dynamicConfig } from '../config/index';\nimport { appConfigBase } from '../fixtures';\n\ndescribe('Config', () => {\n  describe('baseConfig', () => {\n    it('should be return config', async () => {\n      expect(config()).toBeDefined();\n      expect(config()).not.toBe(null);\n      expect(typeof config()).toBe('object');\n      expect(config()).toEqual(appConfigBase);\n    });\n  });\n\n  describe('dynamicConfig', () => {\n    it('should be return config with args', async () => {\n      const args = {\n        httOptions: {\n          timeout: 5000,\n          maxRedirects: 5,\n        },\n      };\n\n      expect(dynamicConfig(args)()).toBeDefined();\n      expect(dynamicConfig(args)()).not.toBe(null);\n      expect(typeof dynamicConfig(args)()).toBe('object');\n      expect(dynamicConfig(args)()).toEqual({ ...appConfigBase, ...args });\n    });\n\n    it('should be return config without args', async () => {\n      expect(dynamicConfig()()).toBeDefined();\n      expect(dynamicConfig()()).not.toBe(null);\n      expect(typeof dynamicConfig()()).toBe('object');\n      expect(dynamicConfig()()).toEqual(appConfigBase);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "c2286166-fdc3-4bc1-b1b1-1eb40eae1e94",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Config > dynamicConfig > should be return config without args",
              "title": "Config > dynamicConfig > should be return config without args",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { config, dynamicConfig } from '../config/index';\nimport { appConfigBase } from '../fixtures';\n\ndescribe('Config', () => {\n  describe('baseConfig', () => {\n    it('should be return config', async () => {\n      expect(config()).toBeDefined();\n      expect(config()).not.toBe(null);\n      expect(typeof config()).toBe('object');\n      expect(config()).toEqual(appConfigBase);\n    });\n  });\n\n  describe('dynamicConfig', () => {\n    it('should be return config with args', async () => {\n      const args = {\n        httOptions: {\n          timeout: 5000,\n          maxRedirects: 5,\n        },\n      };\n\n      expect(dynamicConfig(args)()).toBeDefined();\n      expect(dynamicConfig(args)()).not.toBe(null);\n      expect(typeof dynamicConfig(args)()).toBe('object');\n      expect(dynamicConfig(args)()).toEqual({ ...appConfigBase, ...args });\n    });\n\n    it('should be return config without args', async () => {\n      expect(dynamicConfig()()).toBeDefined();\n      expect(dynamicConfig()()).not.toBe(null);\n      expect(typeof dynamicConfig()()).toBe('object');\n      expect(dynamicConfig()()).toEqual(appConfigBase);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "cbe24401-2458-4d22-a5c4-bed2f112e406",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > appConfigBase > should be return appBaseConfig",
              "title": "Fixtures > appConfigBase > should be return appBaseConfig",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "af4e9212-2d4a-4477-93f5-33c4d73a23c2",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > manifest > should be return appBaseConfig",
              "title": "Fixtures > manifest > should be return appBaseConfig",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "b7c7a503-1657-48bf-993e-53bdfe85c43a",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > TestContainers options > should be define Redis options",
              "title": "Fixtures > TestContainers options > should be define Redis options",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "15db70f5-be71-42ab-80d3-ed4f5fa5fb8d",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > TestContainers options > should be define DynamoDB options",
              "title": "Fixtures > TestContainers options > should be define DynamoDB options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "b9bf15be-cd68-4a6b-beaf-e52126cbb076",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > TestContainers options > should be define MongoDB options",
              "title": "Fixtures > TestContainers options > should be define MongoDB options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "26df33a3-8198-4f41-9b09-4748d078c519",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > TestContainers options > should be define MySql options",
              "title": "Fixtures > TestContainers options > should be define MySql options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "a9f498a6-001a-4727-a8b1-1b2d9f75b8f4",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > TestContainers options > should be define Postgres options",
              "title": "Fixtures > TestContainers options > should be define Postgres options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "176c6d43-b323-4632-9b37-53f27fab19ae",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > TestContainers options > should be define ElasticSearch options",
              "title": "Fixtures > TestContainers options > should be define ElasticSearch options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "c77651ae-af33-48b3-a773-b17c0469f86a",
              "parentUUID": "d4026ec9-5d57-494d-949d-53a113dbe790",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "42a9b68d-0f73-4054-89f6-c23b977bbca3",
            "589376c9-859b-48bd-a678-7189e8840fba",
            "f458bb70-ba3e-4bfb-820b-f8f288f338d5",
            "c95e5c90-eb3e-4a0d-a05b-a08e3f557aab",
            "9f806c19-571e-4584-b83c-e65b70155045",
            "e3cc9a75-4d46-473e-aa33-79861e37b4fd",
            "0af67095-05e5-430f-821c-1461a4595cb3",
            "88d34b80-499d-40c2-93fa-e22c8a1a6b9b",
            "49d44762-c572-4e24-acd7-6ddb0a352cae",
            "bf857969-3d05-40f6-b102-db156b1266f2",
            "d7635eae-8060-428d-b684-5a411bf885f1",
            "4d66d844-dc44-46a3-891e-d6f1b8bb098b",
            "8182a258-9e3d-4917-8007-53e9ef8ec4a5",
            "790eb3b7-af22-428d-b5e0-105d337c5d05",
            "3c259120-9e29-4e2f-9d97-88f963b7e9c6",
            "d7b831e9-66db-4c39-8ae2-02bec33b5988",
            "fac6994e-51c2-45cc-b0e6-181201838de1",
            "b50dfa76-e4f9-4684-9a6a-4d3b3bb5037e",
            "dee495ab-d098-4f5c-a35f-379834259053",
            "f011dd40-b86b-499f-a30d-9837057fecf0",
            "c2286166-fdc3-4bc1-b1b1-1eb40eae1e94",
            "cbe24401-2458-4d22-a5c4-bed2f112e406",
            "af4e9212-2d4a-4477-93f5-33c4d73a23c2",
            "b7c7a503-1657-48bf-993e-53bdfe85c43a",
            "15db70f5-be71-42ab-80d3-ed4f5fa5fb8d",
            "b9bf15be-cd68-4a6b-beaf-e52126cbb076",
            "26df33a3-8198-4f41-9b09-4748d078c519",
            "a9f498a6-001a-4727-a8b1-1b2d9f75b8f4",
            "176c6d43-b323-4632-9b37-53f27fab19ae",
            "c77651ae-af33-48b3-a773-b17c0469f86a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 48673,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

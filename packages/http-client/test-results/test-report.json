{
  "stats": {
    "suites": 3,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-02T00:49:24.923Z",
    "end": "2023-05-02T00:49:29.888Z",
    "duration": 4965
  },
  "results": [
    {
      "uuid": "fa97bc63-2de4-4d50-864a-f78e0cb55d29",
      "title": "@tresdoce-nestjs-toolkit/http-client",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
          "title": "@tresdoce-nestjs-toolkit/http-client",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "HttpService > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "22100ed2-fb62-4322-a967-98c632d9d10e",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - request",
              "fullTitle": "should be return status 200 - request",
              "timedOut": false,
              "duration": 536,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "27a5ba8a-1ae9-4ec1-bec9-4861924c2fb4",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - get",
              "fullTitle": "should be return status 200 - get",
              "timedOut": false,
              "duration": 480,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "8a626d1c-36e6-487c-8047-4eefa463319c",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 201 - post",
              "fullTitle": "should be return status 201 - post",
              "timedOut": false,
              "duration": 540,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "6e15bcd1-72ea-4ab3-ab04-aa9d030d46fb",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - get by id",
              "fullTitle": "should be return status 200 - get by id",
              "timedOut": false,
              "duration": 478,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "104b4baa-3f8d-42a3-b9e5-b3a180004328",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - put",
              "fullTitle": "should be return status 200 - put",
              "timedOut": false,
              "duration": 556,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "c37c6ec9-7b14-49c7-a9b5-68198d23c0c6",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - delete",
              "fullTitle": "should be return status 200 - delete",
              "timedOut": false,
              "duration": 520,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "fa59402a-b638-43a2-bf91-28e65ab3ec9e",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - patch",
              "fullTitle": "should be return status 200 - patch",
              "timedOut": false,
              "duration": 532,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "9483c53f-1579-4820-bd8f-c1a2cda259d3",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - head",
              "fullTitle": "should be return status 200 - head",
              "timedOut": false,
              "duration": 458,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "2120086e-b661-4dd8-8093-199c55b35625",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return error",
              "fullTitle": "should be return error",
              "timedOut": false,
              "duration": 553,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "682c4914-38f0-4da3-98e5-189a6749465e",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpInterceptor > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 77,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientInterceptor } from '../http/interceptors/httpClient.interceptor';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst executionContext: any = {\n  switchToHttp: jest.fn().mockReturnThis(),\n  getRequest: jest.fn().mockReturnThis(),\n  getResponse: jest.fn().mockReturnThis(),\n};\n\nconst callHandler: any = {\n  handle: jest.fn(),\n};\n\ndescribe('HttpInterceptor', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n  let interceptor: HttpClientInterceptor<any>;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule,\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n\n    service = module.get<HttpClientService>(HttpClientService);\n    interceptor = new HttpClientInterceptor(service);\n  });\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('should be intercept and pass headers', async () => {\n    await interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n  });\n});\n",
              "err": {},
              "uuid": "a3cda8c6-22df-4631-8f81-dd7ceef1a7fb",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpInterceptor > should be intercept and pass headers",
              "fullTitle": "should be intercept and pass headers",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientInterceptor } from '../http/interceptors/httpClient.interceptor';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst executionContext: any = {\n  switchToHttp: jest.fn().mockReturnThis(),\n  getRequest: jest.fn().mockReturnThis(),\n  getResponse: jest.fn().mockReturnThis(),\n};\n\nconst callHandler: any = {\n  handle: jest.fn(),\n};\n\ndescribe('HttpInterceptor', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n  let interceptor: HttpClientInterceptor<any>;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule,\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n\n    service = module.get<HttpClientService>(HttpClientService);\n    interceptor = new HttpClientInterceptor(service);\n  });\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('should be intercept and pass headers', async () => {\n    await interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n  });\n});\n",
              "err": {},
              "uuid": "395b0d42-2dc5-4a6f-8c2a-e44ff83814ce",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpModule > registerAsync useFactory > should be define",
              "fullTitle": "should be define",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\nimport { HttpModuleAsyncOptions } from '../http/interfaces/http-module.interface';\n\nclass MockedClass {\n  createHttpOptions() {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n\ndescribe('HttpModule', () => {\n  const mockedUseFactory: HttpModuleAsyncOptions = {\n    useFactory: async () => ({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  };\n\n  describe('registerAsync useFactory', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseFactory),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseClassOptions: HttpModuleAsyncOptions = {\n    useClass: MockedClass,\n  };\n\n  describe('registerAsync useClass', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseClassOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseExistingOptions: HttpModuleAsyncOptions = {\n    extraProviders: [MockedClass],\n    useExisting: MockedClass,\n  };\n\n  describe('registerAsync useExisting', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseExistingOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('register', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.register({ ...config().httOptions }),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "7423561a-6dac-4e49-b137-b45d37600d7b",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpModule > registerAsync useFactory > should be define",
              "fullTitle": "should be define",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\nimport { HttpModuleAsyncOptions } from '../http/interfaces/http-module.interface';\n\nclass MockedClass {\n  createHttpOptions() {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n\ndescribe('HttpModule', () => {\n  const mockedUseFactory: HttpModuleAsyncOptions = {\n    useFactory: async () => ({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  };\n\n  describe('registerAsync useFactory', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseFactory),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseClassOptions: HttpModuleAsyncOptions = {\n    useClass: MockedClass,\n  };\n\n  describe('registerAsync useClass', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseClassOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseExistingOptions: HttpModuleAsyncOptions = {\n    extraProviders: [MockedClass],\n    useExisting: MockedClass,\n  };\n\n  describe('registerAsync useExisting', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseExistingOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('register', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.register({ ...config().httOptions }),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "f49097a3-3a64-48e5-92ce-0cf601eb8970",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpModule > registerAsync useFactory > should be define",
              "fullTitle": "should be define",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\nimport { HttpModuleAsyncOptions } from '../http/interfaces/http-module.interface';\n\nclass MockedClass {\n  createHttpOptions() {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n\ndescribe('HttpModule', () => {\n  const mockedUseFactory: HttpModuleAsyncOptions = {\n    useFactory: async () => ({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  };\n\n  describe('registerAsync useFactory', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseFactory),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseClassOptions: HttpModuleAsyncOptions = {\n    useClass: MockedClass,\n  };\n\n  describe('registerAsync useClass', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseClassOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseExistingOptions: HttpModuleAsyncOptions = {\n    extraProviders: [MockedClass],\n    useExisting: MockedClass,\n  };\n\n  describe('registerAsync useExisting', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseExistingOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('register', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.register({ ...config().httOptions }),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "8cb344ed-0806-40ef-a78c-bc9d084e4fd6",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpModule > registerAsync useFactory > should be define",
              "fullTitle": "should be define",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\nimport { HttpModuleAsyncOptions } from '../http/interfaces/http-module.interface';\n\nclass MockedClass {\n  createHttpOptions() {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n\ndescribe('HttpModule', () => {\n  const mockedUseFactory: HttpModuleAsyncOptions = {\n    useFactory: async () => ({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  };\n\n  describe('registerAsync useFactory', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseFactory),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseClassOptions: HttpModuleAsyncOptions = {\n    useClass: MockedClass,\n  };\n\n  describe('registerAsync useClass', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseClassOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseExistingOptions: HttpModuleAsyncOptions = {\n    extraProviders: [MockedClass],\n    useExisting: MockedClass,\n  };\n\n  describe('registerAsync useExisting', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseExistingOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('register', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.register({ ...config().httOptions }),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "2bbaabbe-5c59-4f68-a756-300537d5d06e",
              "parentUUID": "87e3b8b8-fa9e-48da-b620-d6ebd927aba6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "22100ed2-fb62-4322-a967-98c632d9d10e",
            "27a5ba8a-1ae9-4ec1-bec9-4861924c2fb4",
            "8a626d1c-36e6-487c-8047-4eefa463319c",
            "6e15bcd1-72ea-4ab3-ab04-aa9d030d46fb",
            "104b4baa-3f8d-42a3-b9e5-b3a180004328",
            "c37c6ec9-7b14-49c7-a9b5-68198d23c0c6",
            "fa59402a-b638-43a2-bf91-28e65ab3ec9e",
            "9483c53f-1579-4820-bd8f-c1a2cda259d3",
            "2120086e-b661-4dd8-8093-199c55b35625",
            "682c4914-38f0-4da3-98e5-189a6749465e",
            "a3cda8c6-22df-4631-8f81-dd7ceef1a7fb",
            "395b0d42-2dc5-4a6f-8c2a-e44ff83814ce",
            "7423561a-6dac-4e49-b137-b45d37600d7b",
            "f49097a3-3a64-48e5-92ce-0cf601eb8970",
            "8cb344ed-0806-40ef-a78c-bc9d084e4fd6",
            "2bbaabbe-5c59-4f68-a756-300537d5d06e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4965,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}

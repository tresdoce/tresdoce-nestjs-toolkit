{
  "stats": {
    "suites": 13,
    "tests": 155,
    "passes": 155,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 155,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-02T02:16:09.404Z",
    "end": "2023-05-02T02:19:29.530Z",
    "duration": 200126
  },
  "results": [
    {
      "uuid": "a9fdb68a-014a-42f6-a027-2b90205361a6",
      "title": "@tresdoce-nestjs-toolkit/archetype",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4fcc4bbc-4258-43ce-a6d6-c1966ccb312e",
          "title": "@tresdoce-nestjs-toolkit/archetype",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "healthConstants > should be return exclude to prefix global",
              "fullTitle": "should be return exclude to prefix global",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { RequestMethod } from '@nestjs/common';\nimport { manifestControllerExcludes } from '../archetype/constants/archetype.constants';\n\ndescribe('healthConstants', () => {\n  it('should be return exclude to prefix global', async () => {\n    expect(manifestControllerExcludes).toEqual(expect.any(Array));\n    expect(manifestControllerExcludes).toMatchObject([\n      {\n        path: '/info',\n        method: RequestMethod.GET,\n      },\n    ]);\n  });\n});\n",
              "err": {},
              "uuid": "49d0be78-e2e7-43e7-b6bc-11e2035491d3",
              "parentUUID": "4fcc4bbc-4258-43ce-a6d6-c1966ccb312e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ArchetypeService > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "71986551-5e09-470e-be7d-4838d9cc83ac",
              "parentUUID": "4fcc4bbc-4258-43ce-a6d6-c1966ccb312e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ArchetypeService > should be read package file",
              "fullTitle": "should be read package file",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "0f7c6e0f-8eff-4302-8926-fd08398f292d",
              "parentUUID": "4fcc4bbc-4258-43ce-a6d6-c1966ccb312e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ArchetypeService > should be return archetype version",
              "fullTitle": "should be return archetype version",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "f4b312e8-d213-4d85-bfb7-49e5a559db48",
              "parentUUID": "4fcc4bbc-4258-43ce-a6d6-c1966ccb312e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ArchetypeService > should be return application info",
              "fullTitle": "should be return application info",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "8ffcd0a8-7bf4-46f3-8534-80cb78c0f962",
              "parentUUID": "4fcc4bbc-4258-43ce-a6d6-c1966ccb312e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ArchetypeService > should be return manifest",
              "fullTitle": "should be return manifest",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "3c4cf46b-a7ad-4c3c-a074-0e84cb611bc2",
              "parentUUID": "4fcc4bbc-4258-43ce-a6d6-c1966ccb312e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ArchetypeModule > should be define",
              "fullTitle": "should be define",
              "timedOut": false,
              "duration": 324,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\n\ndescribe('ArchetypeModule', () => {\n  let app: INestApplication;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n    }).compile();\n\n    app = module.createNestApplication();\n    await app.init();\n  });\n\n  it('should be define', async () => {\n    expect(app).toBeDefined();\n  });\n});\n",
              "err": {},
              "uuid": "cec2732d-a627-4795-8551-59dbfa37369b",
              "parentUUID": "4fcc4bbc-4258-43ce-a6d6-c1966ccb312e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ArchetypeController > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeController } from '../archetype/controllers/archetype.controller';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeController', () => {\n  let controller: ArchetypeController;\n  const archetypeService = {\n    generateManifest: () => manifest,\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      controllers: [ArchetypeController],\n      providers: [ArchetypeService],\n    })\n      .overrideProvider(ArchetypeService)\n      .useValue(archetypeService)\n      .compile();\n\n    controller = module.get<ArchetypeController>(ArchetypeController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should be return manifest json', async () => {\n    expect(await controller.getArchetypeInfo()).toBeDefined();\n    expect(await controller.getArchetypeInfo()).toEqual(manifest);\n  });\n});\n",
              "err": {},
              "uuid": "380fb73d-ee95-4e72-9ec4-887d0f430b1f",
              "parentUUID": "4fcc4bbc-4258-43ce-a6d6-c1966ccb312e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ArchetypeController > should be return manifest json",
              "fullTitle": "should be return manifest json",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeController } from '../archetype/controllers/archetype.controller';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeController', () => {\n  let controller: ArchetypeController;\n  const archetypeService = {\n    generateManifest: () => manifest,\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      controllers: [ArchetypeController],\n      providers: [ArchetypeService],\n    })\n      .overrideProvider(ArchetypeService)\n      .useValue(archetypeService)\n      .compile();\n\n    controller = module.get<ArchetypeController>(ArchetypeController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should be return manifest json', async () => {\n    expect(await controller.getArchetypeInfo()).toBeDefined();\n    expect(await controller.getArchetypeInfo()).toEqual(manifest);\n  });\n});\n",
              "err": {},
              "uuid": "b4e1becb-6731-499d-9c4e-898c80cc3ecf",
              "parentUUID": "4fcc4bbc-4258-43ce-a6d6-c1966ccb312e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "49d0be78-e2e7-43e7-b6bc-11e2035491d3",
            "71986551-5e09-470e-be7d-4838d9cc83ac",
            "0f7c6e0f-8eff-4302-8926-fd08398f292d",
            "f4b312e8-d213-4d85-bfb7-49e5a559db48",
            "8ffcd0a8-7bf4-46f3-8534-80cb78c0f962",
            "3c4cf46b-a7ad-4c3c-a074-0e84cb611bc2",
            "cec2732d-a627-4795-8551-59dbfa37369b",
            "380fb73d-ee95-4e72-9ec4-887d0f430b1f",
            "b4e1becb-6731-499d-9c4e-898c80cc3ecf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 384,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "51e86fd9-bee0-4cb9-8802-819e02dae670",
      "title": "@tresdoce-nestjs-toolkit/camunda",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "040e714d-3222-4a3d-a448-cdb4df92718b",
          "title": "@tresdoce-nestjs-toolkit/camunda",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CamundaModule > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 330,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { CamundaModule } from '../camunda/camunda.module';\nimport { dynamicConfig, tcName, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Subscription } from '../camunda/decorators/camunda.decorator';\nimport { CamundaTaskConnector } from '../camunda/providers/camunda.provider';\n\ndescribe('CamundaModule', () => {\n  let app: INestApplication;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    container = await new testContainers('camunda/camunda-bpm-platform:7.17.0', {\n      ports: [\n        {\n          container: 8080,\n          host: 8080,\n        },\n      ],\n      containerName: `${tcName}-camunda-bpm`,\n      reuse: true,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              camunda: {\n                baseUrl: 'http://localhost:8080/engine-rest',\n              },\n            }),\n          ],\n        }),\n        CamundaModule,\n      ],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    app.connectMicroservice({\n      strategy: app.get(CamundaTaskConnector),\n    });\n    await app.startAllMicroservices();\n    await app.init();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be Subscription decorator is defined with options', async () => {\n    const decorator = Subscription('test-topic', { lockDuration: 500 });\n    console.log(decorator);\n    expect(decorator).toBeDefined();\n  });\n});\n",
              "err": {},
              "uuid": "08f71cc6-295d-4284-9c98-638d7285a2ae",
              "parentUUID": "040e714d-3222-4a3d-a448-cdb4df92718b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CamundaModule > should be Subscription decorator is defined with options",
              "fullTitle": "should be Subscription decorator is defined with options",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { CamundaModule } from '../camunda/camunda.module';\nimport { dynamicConfig, tcName, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Subscription } from '../camunda/decorators/camunda.decorator';\nimport { CamundaTaskConnector } from '../camunda/providers/camunda.provider';\n\ndescribe('CamundaModule', () => {\n  let app: INestApplication;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    container = await new testContainers('camunda/camunda-bpm-platform:7.17.0', {\n      ports: [\n        {\n          container: 8080,\n          host: 8080,\n        },\n      ],\n      containerName: `${tcName}-camunda-bpm`,\n      reuse: true,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              camunda: {\n                baseUrl: 'http://localhost:8080/engine-rest',\n              },\n            }),\n          ],\n        }),\n        CamundaModule,\n      ],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    app.connectMicroservice({\n      strategy: app.get(CamundaTaskConnector),\n    });\n    await app.startAllMicroservices();\n    await app.init();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be Subscription decorator is defined with options', async () => {\n    const decorator = Subscription('test-topic', { lockDuration: 500 });\n    console.log(decorator);\n    expect(decorator).toBeDefined();\n  });\n});\n",
              "err": {},
              "uuid": "e3c36753-bb30-4e6a-ac4f-f5daf0e2b876",
              "parentUUID": "040e714d-3222-4a3d-a448-cdb4df92718b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "08f71cc6-295d-4284-9c98-638d7285a2ae",
            "e3c36753-bb30-4e6a-ac4f-f5daf0e2b876"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 342,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "e28c661e-0d11-41fb-a76f-2307977fdc66",
      "title": "@tresdoce-nestjs-toolkit/commons",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7f941c9b-b369-42e7-956e-bd0f23e27b24",
          "title": "@tresdoce-nestjs-toolkit/commons",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "build-config > should be return jest config is build",
              "fullTitle": "should be return jest config is build",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { buildConfig } from '../index';\ndescribe('build-config', () => {\n  const INIT_ENVS = process.env;\n\n  beforeEach(() => {\n    jest.resetModules();\n    process.env = { ...INIT_ENVS };\n  });\n\n  afterAll(() => {\n    process.env = INIT_ENVS;\n  });\n\n  it('should be return jest config is build', () => {\n    process.env.NODE_ENV = 'build';\n    const config = buildConfig({ output: {}, optimization: {} });\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.mode).toEqual('production');\n  });\n\n  it('should be return jest config not is build', () => {\n    process.env.NODE_ENV = 'dev';\n    const config = buildConfig({ output: {}, optimization: {} });\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.mode).toEqual('none');\n  });\n});\n",
              "err": {},
              "uuid": "48c34420-af3b-430c-8e10-947a76cd1a8c",
              "parentUUID": "7f941c9b-b369-42e7-956e-bd0f23e27b24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "build-config > should be return jest config not is build",
              "fullTitle": "should be return jest config not is build",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { buildConfig } from '../index';\ndescribe('build-config', () => {\n  const INIT_ENVS = process.env;\n\n  beforeEach(() => {\n    jest.resetModules();\n    process.env = { ...INIT_ENVS };\n  });\n\n  afterAll(() => {\n    process.env = INIT_ENVS;\n  });\n\n  it('should be return jest config is build', () => {\n    process.env.NODE_ENV = 'build';\n    const config = buildConfig({ output: {}, optimization: {} });\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.mode).toEqual('production');\n  });\n\n  it('should be return jest config not is build', () => {\n    process.env.NODE_ENV = 'dev';\n    const config = buildConfig({ output: {}, optimization: {} });\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.mode).toEqual('none');\n  });\n});\n",
              "err": {},
              "uuid": "920a8855-3c66-46e3-b100-593487548068",
              "parentUUID": "7f941c9b-b369-42e7-956e-bd0f23e27b24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "eslint-config > should be return jest config",
              "fullTitle": "should be return jest config",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { eslintConfig } from '../index';\ndescribe('eslint-config', () => {\n  it('should be return jest config', () => {\n    const config = eslintConfig();\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n  });\n});\n",
              "err": {},
              "uuid": "bb993f4f-815a-4bba-96dd-ef792546b346",
              "parentUUID": "7f941c9b-b369-42e7-956e-bd0f23e27b24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testing-library > should be return jest config",
              "fullTitle": "should be return jest config",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { jestConfig } from '../index';\n\ndescribe('testing-library', () => {\n  it('should be return jest config', () => {\n    const config = jestConfig();\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n  });\n});\n",
              "err": {},
              "uuid": "d1ae87a5-4a89-42c4-9a39-00a97e441eb3",
              "parentUUID": "7f941c9b-b369-42e7-956e-bd0f23e27b24",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48c34420-af3b-430c-8e10-947a76cd1a8c",
            "920a8855-3c66-46e3-b100-593487548068",
            "bb993f4f-815a-4bba-96dd-ef792546b346",
            "d1ae87a5-4a89-42c4-9a39-00a97e441eb3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "5a66d34b-775d-416f-bf71-9c25ca537110",
      "title": "@tresdoce-nestjs-toolkit/core",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4e8acad7-23b5-4041-b5be-d2287bdc0ed3",
          "title": "@tresdoce-nestjs-toolkit/core",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "commons > with env context > should be return commons exclude paths with context",
              "fullTitle": "should be return commons exclude paths with context",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "593779b6-a09b-49ee-87eb-68faf1f6c6f1",
              "parentUUID": "4e8acad7-23b5-4041-b5be-d2287bdc0ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "commons > with env context > should be return array of exclude paths with context",
              "fullTitle": "should be return array of exclude paths with context",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "286b825e-2de2-4ab2-ab05-18d3c9e681aa",
              "parentUUID": "4e8acad7-23b5-4041-b5be-d2287bdc0ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "commons > with env context > should be return commons exclude paths without context",
              "fullTitle": "should be return commons exclude paths without context",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "140f8a24-300b-4985-abb5-ae01e53a49da",
              "parentUUID": "4e8acad7-23b5-4041-b5be-d2287bdc0ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "commons > with env context > should be return array of exclude paths without context",
              "fullTitle": "should be return array of exclude paths without context",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "b3c99a44-b2c3-42af-b6a1-511a78718115",
              "parentUUID": "4e8acad7-23b5-4041-b5be-d2287bdc0ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Public decorator > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Public, IS_PUBLIC_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Public()).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(IS_PUBLIC_KEY).toBe('isPublic');\n  });\n});\n",
              "err": {},
              "uuid": "b76ad3c8-263a-4a0c-9aa5-b5cfe804bdb2",
              "parentUUID": "4e8acad7-23b5-4041-b5be-d2287bdc0ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Public decorator > should be return key",
              "fullTitle": "should be return key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Public, IS_PUBLIC_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Public()).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(IS_PUBLIC_KEY).toBe('isPublic');\n  });\n});\n",
              "err": {},
              "uuid": "65bb7cb3-ba77-4779-8a76-1d4203b300b9",
              "parentUUID": "4e8acad7-23b5-4041-b5be-d2287bdc0ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "https-certificate > should be return https certificate config",
              "fullTitle": "should be return https certificate config",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { setHttpsOptions } from '../index';\nimport * as path from 'path';\ndescribe('https-certificate', () => {\n  it('should be return https certificate config', () => {\n    const crtPath = path.resolve(__dirname, './utils/localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).not.toEqual('');\n    expect(config.key).not.toEqual('');\n  });\n\n  it('should be return https certificate config empty', () => {\n    const crtPath = path.resolve(__dirname, './utils/my-localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/my-localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).toEqual('');\n    expect(config.key).toEqual('');\n  });\n});\n",
              "err": {},
              "uuid": "e5f5d8d3-8375-49fb-9ebf-7c566c4f322a",
              "parentUUID": "4e8acad7-23b5-4041-b5be-d2287bdc0ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "https-certificate > should be return https certificate config empty",
              "fullTitle": "should be return https certificate config empty",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { setHttpsOptions } from '../index';\nimport * as path from 'path';\ndescribe('https-certificate', () => {\n  it('should be return https certificate config', () => {\n    const crtPath = path.resolve(__dirname, './utils/localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).not.toEqual('');\n    expect(config.key).not.toEqual('');\n  });\n\n  it('should be return https certificate config empty', () => {\n    const crtPath = path.resolve(__dirname, './utils/my-localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/my-localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).toEqual('');\n    expect(config.key).toEqual('');\n  });\n});\n",
              "err": {},
              "uuid": "0412bfbd-ec27-4239-a84d-eb945eb26755",
              "parentUUID": "4e8acad7-23b5-4041-b5be-d2287bdc0ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Public decorator > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Roles, ROLES_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Roles('admin')).toBeDefined();\n    expect(Roles('admin', 'user')).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(ROLES_KEY).toBe('roles');\n  });\n});\n",
              "err": {},
              "uuid": "0a8ddf92-1bbd-4096-b3cf-5252bc171dd5",
              "parentUUID": "4e8acad7-23b5-4041-b5be-d2287bdc0ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Public decorator > should be return key",
              "fullTitle": "should be return key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Roles, ROLES_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Roles('admin')).toBeDefined();\n    expect(Roles('admin', 'user')).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(ROLES_KEY).toBe('roles');\n  });\n});\n",
              "err": {},
              "uuid": "6aa28f40-f8db-444f-ac31-b6caf974183c",
              "parentUUID": "4e8acad7-23b5-4041-b5be-d2287bdc0ed3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "593779b6-a09b-49ee-87eb-68faf1f6c6f1",
            "286b825e-2de2-4ab2-ab05-18d3c9e681aa",
            "140f8a24-300b-4985-abb5-ae01e53a49da",
            "b3c99a44-b2c3-42af-b6a1-511a78718115",
            "b76ad3c8-263a-4a0c-9aa5-b5cfe804bdb2",
            "65bb7cb3-ba77-4779-8a76-1d4203b300b9",
            "e5f5d8d3-8375-49fb-9ebf-7c566c4f322a",
            "0412bfbd-ec27-4239-a84d-eb945eb26755",
            "0a8ddf92-1bbd-4096-b3cf-5252bc171dd5",
            "6aa28f40-f8db-444f-ac31-b6caf974183c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "8f95a1e1-1fda-49e7-8ebc-da0540572cc2",
      "title": "@tresdoce-nestjs-toolkit/elk",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0204b7da-b2e0-4610-b240-696091bb59c2",
          "title": "@tresdoce-nestjs-toolkit/elk",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ElkModule > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 1325,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "9c942377-f02b-4780-bd3e-3976c6db4883",
              "parentUUID": "0204b7da-b2e0-4610-b240-696091bb59c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ElkModule > should be an ElkInterceptor instance to be defined",
              "fullTitle": "should be an ElkInterceptor instance to be defined",
              "timedOut": false,
              "duration": 1011,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "48dbb7cb-278b-48b2-b2a2-d62f9f2c6ad4",
              "parentUUID": "0204b7da-b2e0-4610-b240-696091bb59c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ElkModule > should be create document in elasticsearch when return success string",
              "fullTitle": "should be create document in elasticsearch when return success string",
              "timedOut": false,
              "duration": 1016,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "4c309ce6-fb0f-47f7-b8a5-5b2bd2cd803f",
              "parentUUID": "0204b7da-b2e0-4610-b240-696091bb59c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ElkModule > should be create document in elasticsearch when return success object",
              "fullTitle": "should be create document in elasticsearch when return success object",
              "timedOut": false,
              "duration": 1010,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "2c87e150-d870-4528-ae3b-9a3500a51619",
              "parentUUID": "0204b7da-b2e0-4610-b240-696091bb59c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ElkModule > should be create document in elasticsearch when return success with parameters",
              "fullTitle": "should be create document in elasticsearch when return success with parameters",
              "timedOut": false,
              "duration": 1008,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "38f10e63-fe60-441c-8f52-b3c5874d39bc",
              "parentUUID": "0204b7da-b2e0-4610-b240-696091bb59c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ElkModule > should be create document in elasticsearch when return exception",
              "fullTitle": "should be create document in elasticsearch when return exception",
              "timedOut": false,
              "duration": 1009,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "f301b6f5-430a-4425-8745-a4d23b75408e",
              "parentUUID": "0204b7da-b2e0-4610-b240-696091bb59c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ElkModule > should be create document in elasticsearch when return exception http",
              "fullTitle": "should be create document in elasticsearch when return exception http",
              "timedOut": false,
              "duration": 1010,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "da1f5589-5e4b-4af9-93a7-f4461fe2aee6",
              "parentUUID": "0204b7da-b2e0-4610-b240-696091bb59c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ElkModule > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 1014,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "fbe4b73e-5fd8-4543-87d4-6d832d02a2c6",
              "parentUUID": "0204b7da-b2e0-4610-b240-696091bb59c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c942377-f02b-4780-bd3e-3976c6db4883",
            "48dbb7cb-278b-48b2-b2a2-d62f9f2c6ad4",
            "4c309ce6-fb0f-47f7-b8a5-5b2bd2cd803f",
            "2c87e150-d870-4528-ae3b-9a3500a51619",
            "38f10e63-fe60-441c-8f52-b3c5874d39bc",
            "f301b6f5-430a-4425-8745-a4d23b75408e",
            "da1f5589-5e4b-4af9-93a7-f4461fe2aee6",
            "fbe4b73e-5fd8-4543-87d4-6d832d02a2c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8403,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "78aa4719-d85a-482d-a211-4d4b68c8d478",
      "title": "@tresdoce-nestjs-toolkit/filters",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
          "title": "@tresdoce-nestjs-toolkit/filters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filters > code exception > should map a regular code exception",
              "fullTitle": "should map a regular code exception",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "c603969a-942e-46b2-a868-f9c1d04e4846",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "filters > code exception > should map default exception when thrown with not parameters",
              "fullTitle": "should map default exception when thrown with not parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "90a38286-a494-45fc-b96d-6bd0b49c30f0",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "filters > code exception > should map default exception when thrown with error details",
              "fullTitle": "should map default exception when thrown with error details",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "5b963a65-e848-4a71-9bed-b33307084a0e",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "filters > code exception > should map default exception when thrown with error details and description",
              "fullTitle": "should map default exception when thrown with error details and description",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "02a6bad2-694c-4157-91b3-160b4242229c",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "filters > code exception > should map HttpException response when called with a string",
              "fullTitle": "should map HttpException response when called with a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "d1ec2aa1-e27b-4891-b709-48147b599a1c",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "filters > code exception > should map HttpException response when called with an object",
              "fullTitle": "should map HttpException response when called with an object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "9b4cf883-3f25-4f53-ba4d-358f9a9b71e4",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "filters > code exception > should map HttpException response when called with an object with empty message",
              "fullTitle": "should map HttpException response when called with an object with empty message",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "26332837-177b-47d1-9b22-c1d61161adea",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "filters > code exception > should map HttpException response when called with an array",
              "fullTitle": "should map HttpException response when called with an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "fbb86588-ff34-4734-a49e-48439a403ea5",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "filters > code exception > should map HttpException response when called with an object",
              "fullTitle": "should map HttpException response when called with an object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "6714871b-64b4-4a7d-8310-dd64d6edf45e",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "filters > code exception > should map default exception when thrown with not parameters",
              "fullTitle": "should map default exception when thrown with not parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "b9ccf127-7e4c-490f-b23d-11b13276ddc2",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "filters > code exception > should be return application info",
              "fullTitle": "should be return application info",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "9a6acafb-d8d3-4c26-abf6-d72bb13ad23d",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "error.utils > should be return code in string",
              "fullTitle": "should be return code in string",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { getCode } from '../';\nimport { HttpStatus } from '@nestjs/common';\n\ndescribe('error.utils', () => {\n  it('should be return code in string', () => {\n    const code = getCode(HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR]);\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n\n  it('should be return code in string obj', () => {\n    const code = getCode({ error: HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n\n  it('should be return code in string', () => {\n    const code = getCode({ error: HttpStatus['TEST_ERROR'] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n});\n",
              "err": {},
              "uuid": "d0dcbfdf-74c9-418d-8dd3-2a05b1c6f138",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "error.utils > should be return code in string obj",
              "fullTitle": "should be return code in string obj",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { getCode } from '../';\nimport { HttpStatus } from '@nestjs/common';\n\ndescribe('error.utils', () => {\n  it('should be return code in string', () => {\n    const code = getCode(HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR]);\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n\n  it('should be return code in string obj', () => {\n    const code = getCode({ error: HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n\n  it('should be return code in string', () => {\n    const code = getCode({ error: HttpStatus['TEST_ERROR'] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n});\n",
              "err": {},
              "uuid": "adc2b817-c90f-4206-aa29-7a39c0f61ec9",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "error.utils > should be return code in string",
              "fullTitle": "should be return code in string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { getCode } from '../';\nimport { HttpStatus } from '@nestjs/common';\n\ndescribe('error.utils', () => {\n  it('should be return code in string', () => {\n    const code = getCode(HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR]);\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n\n  it('should be return code in string obj', () => {\n    const code = getCode({ error: HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n\n  it('should be return code in string', () => {\n    const code = getCode({ error: HttpStatus['TEST_ERROR'] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n});\n",
              "err": {},
              "uuid": "c9233b2a-b599-4ac1-9686-d664d389f077",
              "parentUUID": "0a07c873-56d5-4a46-b4c5-8f3f730109bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c603969a-942e-46b2-a868-f9c1d04e4846",
            "90a38286-a494-45fc-b96d-6bd0b49c30f0",
            "5b963a65-e848-4a71-9bed-b33307084a0e",
            "02a6bad2-694c-4157-91b3-160b4242229c",
            "d1ec2aa1-e27b-4891-b709-48147b599a1c",
            "9b4cf883-3f25-4f53-ba4d-358f9a9b71e4",
            "26332837-177b-47d1-9b22-c1d61161adea",
            "fbb86588-ff34-4734-a49e-48439a403ea5",
            "6714871b-64b4-4a7d-8310-dd64d6edf45e",
            "b9ccf127-7e4c-490f-b23d-11b13276ddc2",
            "9a6acafb-d8d3-4c26-abf6-d72bb13ad23d",
            "d0dcbfdf-74c9-418d-8dd3-2a05b1c6f138",
            "adc2b817-c90f-4206-aa29-7a39c0f61ec9",
            "c9233b2a-b599-4ac1-9686-d664d389f077"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "1b0207c7-22bc-4285-be2a-333455d75e79",
      "title": "@tresdoce-nestjs-toolkit/health",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0072d8d5-ff57-4293-b9e2-49c52544cca2",
          "title": "@tresdoce-nestjs-toolkit/health",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Health > Ready controller - extend config > should be defined with extend config",
              "fullTitle": "should be defined with extend config",
              "timedOut": false,
              "duration": 616,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TerminusModule,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ReadinessController } from '../health/controllers/readiness.controller';\nimport { CONFIG_OPTIONS } from '../health/constants';\n\nconst mockedConfig = {\n  services: {\n    myService: {\n      url: 'http://localhost:8082',\n      timeout: 3000,\n    },\n    demoApi: {\n      url: 'https://nestjs-starter.up.railway.app',\n      timeout: 3000,\n      healthPath: '/v1/health/liveness',\n    },\n  },\n  database: {\n    typeorm: {\n      type: 'postgres',\n    },\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379,\n  },\n  elasticsearch: {\n    name: 'test-app',\n    node: 'http://localhost:9200',\n  },\n  camunda: {\n    baseUrl: 'http://localhost:8080/engine-rest',\n  },\n};\n\nconst mockExpectReadiness = {\n  status: 'ok',\n  info: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n  error: {},\n  details: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n};\n\nconst mockExpectReadinessDown = {\n  myService: {\n    status: 'down',\n    message: 'connect ECONNREFUSED 127.0.0.1:8082',\n  },\n};\n\nconst simpleConfig = {\n  services: {\n    myService: { url: 'http://localhost:8082' },\n  },\n};\n\ndescribe('Health', () => {\n  describe('Ready controller - extend config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: mockedConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n\n  describe('Ready controller - simple config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: simpleConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "f289ed32-9320-4b9f-a819-79089f297680",
              "parentUUID": "0072d8d5-ff57-4293-b9e2-49c52544cca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Health > Ready controller - extend config > should be return up services with extend config",
              "fullTitle": "should be return up services with extend config",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TerminusModule,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ReadinessController } from '../health/controllers/readiness.controller';\nimport { CONFIG_OPTIONS } from '../health/constants';\n\nconst mockedConfig = {\n  services: {\n    myService: {\n      url: 'http://localhost:8082',\n      timeout: 3000,\n    },\n    demoApi: {\n      url: 'https://nestjs-starter.up.railway.app',\n      timeout: 3000,\n      healthPath: '/v1/health/liveness',\n    },\n  },\n  database: {\n    typeorm: {\n      type: 'postgres',\n    },\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379,\n  },\n  elasticsearch: {\n    name: 'test-app',\n    node: 'http://localhost:9200',\n  },\n  camunda: {\n    baseUrl: 'http://localhost:8080/engine-rest',\n  },\n};\n\nconst mockExpectReadiness = {\n  status: 'ok',\n  info: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n  error: {},\n  details: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n};\n\nconst mockExpectReadinessDown = {\n  myService: {\n    status: 'down',\n    message: 'connect ECONNREFUSED 127.0.0.1:8082',\n  },\n};\n\nconst simpleConfig = {\n  services: {\n    myService: { url: 'http://localhost:8082' },\n  },\n};\n\ndescribe('Health', () => {\n  describe('Ready controller - extend config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: mockedConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n\n  describe('Ready controller - simple config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: simpleConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "49d35d19-52b6-40ee-bd0f-134f46863021",
              "parentUUID": "0072d8d5-ff57-4293-b9e2-49c52544cca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Health > Ready controller - extend config > should be defined with simple config",
              "fullTitle": "should be defined with simple config",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TerminusModule,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ReadinessController } from '../health/controllers/readiness.controller';\nimport { CONFIG_OPTIONS } from '../health/constants';\n\nconst mockedConfig = {\n  services: {\n    myService: {\n      url: 'http://localhost:8082',\n      timeout: 3000,\n    },\n    demoApi: {\n      url: 'https://nestjs-starter.up.railway.app',\n      timeout: 3000,\n      healthPath: '/v1/health/liveness',\n    },\n  },\n  database: {\n    typeorm: {\n      type: 'postgres',\n    },\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379,\n  },\n  elasticsearch: {\n    name: 'test-app',\n    node: 'http://localhost:9200',\n  },\n  camunda: {\n    baseUrl: 'http://localhost:8080/engine-rest',\n  },\n};\n\nconst mockExpectReadiness = {\n  status: 'ok',\n  info: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n  error: {},\n  details: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n};\n\nconst mockExpectReadinessDown = {\n  myService: {\n    status: 'down',\n    message: 'connect ECONNREFUSED 127.0.0.1:8082',\n  },\n};\n\nconst simpleConfig = {\n  services: {\n    myService: { url: 'http://localhost:8082' },\n  },\n};\n\ndescribe('Health', () => {\n  describe('Ready controller - extend config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: mockedConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n\n  describe('Ready controller - simple config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: simpleConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "0c3a266c-0558-41e5-813b-1793ef31c9d7",
              "parentUUID": "0072d8d5-ff57-4293-b9e2-49c52544cca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Health > Ready controller - extend config > should be return up services with simple config",
              "fullTitle": "should be return up services with simple config",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TerminusModule,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ReadinessController } from '../health/controllers/readiness.controller';\nimport { CONFIG_OPTIONS } from '../health/constants';\n\nconst mockedConfig = {\n  services: {\n    myService: {\n      url: 'http://localhost:8082',\n      timeout: 3000,\n    },\n    demoApi: {\n      url: 'https://nestjs-starter.up.railway.app',\n      timeout: 3000,\n      healthPath: '/v1/health/liveness',\n    },\n  },\n  database: {\n    typeorm: {\n      type: 'postgres',\n    },\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379,\n  },\n  elasticsearch: {\n    name: 'test-app',\n    node: 'http://localhost:9200',\n  },\n  camunda: {\n    baseUrl: 'http://localhost:8080/engine-rest',\n  },\n};\n\nconst mockExpectReadiness = {\n  status: 'ok',\n  info: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n  error: {},\n  details: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n};\n\nconst mockExpectReadinessDown = {\n  myService: {\n    status: 'down',\n    message: 'connect ECONNREFUSED 127.0.0.1:8082',\n  },\n};\n\nconst simpleConfig = {\n  services: {\n    myService: { url: 'http://localhost:8082' },\n  },\n};\n\ndescribe('Health', () => {\n  describe('Ready controller - extend config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: mockedConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n\n  describe('Ready controller - simple config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: simpleConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "18595687-a42d-4e86-b6af-0d31d3b58876",
              "parentUUID": "0072d8d5-ff57-4293-b9e2-49c52544cca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HealthModule > should be define",
              "fullTitle": "should be define",
              "timedOut": false,
              "duration": 467,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { HealthModule } from '../health/health.module';\nimport { LivenessController } from '../health/controllers/liveness.controller';\nimport { ReadinessController } from '../health/controllers/readiness.controller';\n\ndescribe('HealthModule', () => {\n  let app: INestApplication;\n  let livenessController: LivenessController;\n  let readinessController: ReadinessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HealthModule,\n      ],\n    }).compile();\n\n    app = module.createNestApplication();\n    livenessController = module.get<LivenessController>(LivenessController);\n    readinessController = module.get<ReadinessController>(ReadinessController);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await Promise.all([app.close()]);\n  });\n\n  it('should be define', async () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be return status up', async () => {\n    expect(livenessController.getLiveness()).toEqual({ status: 'up' });\n  });\n\n  it('should be return readiness services', async () => {\n    const result = await readinessController.check();\n    expect(result).toHaveProperty('details');\n    expect(result).toHaveProperty('error');\n    expect(result).toHaveProperty('info');\n    expect(result).toHaveProperty('status');\n  });\n});\n",
              "err": {},
              "uuid": "c5df33f4-b125-475d-a827-13d13f3174a6",
              "parentUUID": "0072d8d5-ff57-4293-b9e2-49c52544cca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HealthModule > should be return status up",
              "fullTitle": "should be return status up",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { HealthModule } from '../health/health.module';\nimport { LivenessController } from '../health/controllers/liveness.controller';\nimport { ReadinessController } from '../health/controllers/readiness.controller';\n\ndescribe('HealthModule', () => {\n  let app: INestApplication;\n  let livenessController: LivenessController;\n  let readinessController: ReadinessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HealthModule,\n      ],\n    }).compile();\n\n    app = module.createNestApplication();\n    livenessController = module.get<LivenessController>(LivenessController);\n    readinessController = module.get<ReadinessController>(ReadinessController);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await Promise.all([app.close()]);\n  });\n\n  it('should be define', async () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be return status up', async () => {\n    expect(livenessController.getLiveness()).toEqual({ status: 'up' });\n  });\n\n  it('should be return readiness services', async () => {\n    const result = await readinessController.check();\n    expect(result).toHaveProperty('details');\n    expect(result).toHaveProperty('error');\n    expect(result).toHaveProperty('info');\n    expect(result).toHaveProperty('status');\n  });\n});\n",
              "err": {},
              "uuid": "95eab841-fb41-45cb-8f7e-b9f3f64bf0cf",
              "parentUUID": "0072d8d5-ff57-4293-b9e2-49c52544cca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HealthModule > should be return readiness services",
              "fullTitle": "should be return readiness services",
              "timedOut": false,
              "duration": 473,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { HealthModule } from '../health/health.module';\nimport { LivenessController } from '../health/controllers/liveness.controller';\nimport { ReadinessController } from '../health/controllers/readiness.controller';\n\ndescribe('HealthModule', () => {\n  let app: INestApplication;\n  let livenessController: LivenessController;\n  let readinessController: ReadinessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HealthModule,\n      ],\n    }).compile();\n\n    app = module.createNestApplication();\n    livenessController = module.get<LivenessController>(LivenessController);\n    readinessController = module.get<ReadinessController>(ReadinessController);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await Promise.all([app.close()]);\n  });\n\n  it('should be define', async () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be return status up', async () => {\n    expect(livenessController.getLiveness()).toEqual({ status: 'up' });\n  });\n\n  it('should be return readiness services', async () => {\n    const result = await readinessController.check();\n    expect(result).toHaveProperty('details');\n    expect(result).toHaveProperty('error');\n    expect(result).toHaveProperty('info');\n    expect(result).toHaveProperty('status');\n  });\n});\n",
              "err": {},
              "uuid": "945673ad-c60d-4883-9131-45c75d2a0e14",
              "parentUUID": "0072d8d5-ff57-4293-b9e2-49c52544cca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Health - Live controller > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { LivenessController } from '../health/controllers/liveness.controller';\n\ndescribe('Health - Live controller', () => {\n  let controller: LivenessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [LivenessController],\n    }).compile();\n\n    controller = module.get<LivenessController>(LivenessController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should be return up liveness', () => {\n    expect(controller.getLiveness()).toEqual({ status: 'up' });\n  });\n});\n",
              "err": {},
              "uuid": "a787f521-423e-4fa8-a3c0-11aabae6e5e1",
              "parentUUID": "0072d8d5-ff57-4293-b9e2-49c52544cca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Health - Live controller > should be return up liveness",
              "fullTitle": "should be return up liveness",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { LivenessController } from '../health/controllers/liveness.controller';\n\ndescribe('Health - Live controller', () => {\n  let controller: LivenessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [LivenessController],\n    }).compile();\n\n    controller = module.get<LivenessController>(LivenessController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should be return up liveness', () => {\n    expect(controller.getLiveness()).toEqual({ status: 'up' });\n  });\n});\n",
              "err": {},
              "uuid": "9f07258a-97d4-4a1c-84f2-572cb303008c",
              "parentUUID": "0072d8d5-ff57-4293-b9e2-49c52544cca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "healthConstants > should be return exclude to prefix global",
              "fullTitle": "should be return exclude to prefix global",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { RequestMethod } from '@nestjs/common';\nimport { controllersExcludes } from '../health/constants';\n\ndescribe('healthConstants', () => {\n  it('should be return exclude to prefix global', async () => {\n    expect(controllersExcludes).toEqual(expect.any(Array));\n    expect(controllersExcludes).toMatchObject([\n      {\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      },\n      {\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      },\n    ]);\n  });\n});\n",
              "err": {},
              "uuid": "108e9ea3-9dfe-4a69-84a2-2a2e01ced1d5",
              "parentUUID": "0072d8d5-ff57-4293-b9e2-49c52544cca2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f289ed32-9320-4b9f-a819-79089f297680",
            "49d35d19-52b6-40ee-bd0f-134f46863021",
            "0c3a266c-0558-41e5-813b-1793ef31c9d7",
            "18595687-a42d-4e86-b6af-0d31d3b58876",
            "c5df33f4-b125-475d-a827-13d13f3174a6",
            "95eab841-fb41-45cb-8f7e-b9f3f64bf0cf",
            "945673ad-c60d-4883-9131-45c75d2a0e14",
            "a787f521-423e-4fa8-a3c0-11aabae6e5e1",
            "9f07258a-97d4-4a1c-84f2-572cb303008c",
            "108e9ea3-9dfe-4a69-84a2-2a2e01ced1d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1617,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "0da03da1-978a-47aa-a5b5-79f91e890ad5",
      "title": "@tresdoce-nestjs-toolkit/http-client",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "01fe8679-671c-475d-bdca-bdf14621d150",
          "title": "@tresdoce-nestjs-toolkit/http-client",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "HttpService > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "e2e698c7-3f84-40f8-8190-9fef40011454",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - request",
              "fullTitle": "should be return status 200 - request",
              "timedOut": false,
              "duration": 535,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "72526a5c-39fb-4e99-86bf-2cd3f1123c68",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - get",
              "fullTitle": "should be return status 200 - get",
              "timedOut": false,
              "duration": 462,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "f9b6f77f-f414-4c35-866f-d4edb164c9aa",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 201 - post",
              "fullTitle": "should be return status 201 - post",
              "timedOut": false,
              "duration": 554,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "def9b6a7-1565-4396-9a25-8e8ea23c117e",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - get by id",
              "fullTitle": "should be return status 200 - get by id",
              "timedOut": false,
              "duration": 461,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "623c5c14-b98f-4f47-9920-3c5f8f03a372",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - put",
              "fullTitle": "should be return status 200 - put",
              "timedOut": false,
              "duration": 502,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "480b9026-1ffd-4656-8500-de699301ec30",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - delete",
              "fullTitle": "should be return status 200 - delete",
              "timedOut": false,
              "duration": 553,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "f37a6e3a-d11a-4a01-bb8b-e140b75d9c07",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - patch",
              "fullTitle": "should be return status 200 - patch",
              "timedOut": false,
              "duration": 556,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "d08a2ba3-76f7-4fe9-a7ed-61633cca9cf0",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return status 200 - head",
              "fullTitle": "should be return status 200 - head",
              "timedOut": false,
              "duration": 466,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "541ebae4-323d-4bdb-ba62-87c063bf01e5",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpService > should be return error",
              "fullTitle": "should be return error",
              "timedOut": false,
              "duration": 476,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "e5b7b440-23a6-4980-9e79-15e0d53a74cb",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpInterceptor > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientInterceptor } from '../http/interceptors/httpClient.interceptor';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst executionContext: any = {\n  switchToHttp: jest.fn().mockReturnThis(),\n  getRequest: jest.fn().mockReturnThis(),\n  getResponse: jest.fn().mockReturnThis(),\n};\n\nconst callHandler: any = {\n  handle: jest.fn(),\n};\n\ndescribe('HttpInterceptor', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n  let interceptor: HttpClientInterceptor<any>;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule,\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n\n    service = module.get<HttpClientService>(HttpClientService);\n    interceptor = new HttpClientInterceptor(service);\n  });\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('should be intercept and pass headers', async () => {\n    await interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n  });\n});\n",
              "err": {},
              "uuid": "ec6f8b7a-dc6f-4f11-b510-64eabc61fe4c",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpInterceptor > should be intercept and pass headers",
              "fullTitle": "should be intercept and pass headers",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientInterceptor } from '../http/interceptors/httpClient.interceptor';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst executionContext: any = {\n  switchToHttp: jest.fn().mockReturnThis(),\n  getRequest: jest.fn().mockReturnThis(),\n  getResponse: jest.fn().mockReturnThis(),\n};\n\nconst callHandler: any = {\n  handle: jest.fn(),\n};\n\ndescribe('HttpInterceptor', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n  let interceptor: HttpClientInterceptor<any>;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule,\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n\n    service = module.get<HttpClientService>(HttpClientService);\n    interceptor = new HttpClientInterceptor(service);\n  });\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('should be intercept and pass headers', async () => {\n    await interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n  });\n});\n",
              "err": {},
              "uuid": "b01e2f6c-a7f0-44b1-adcf-09779a95c974",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpModule > registerAsync useFactory > should be define",
              "fullTitle": "should be define",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\nimport { HttpModuleAsyncOptions } from '../http/interfaces/http-module.interface';\n\nclass MockedClass {\n  createHttpOptions() {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n\ndescribe('HttpModule', () => {\n  const mockedUseFactory: HttpModuleAsyncOptions = {\n    useFactory: async () => ({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  };\n\n  describe('registerAsync useFactory', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseFactory),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseClassOptions: HttpModuleAsyncOptions = {\n    useClass: MockedClass,\n  };\n\n  describe('registerAsync useClass', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseClassOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseExistingOptions: HttpModuleAsyncOptions = {\n    extraProviders: [MockedClass],\n    useExisting: MockedClass,\n  };\n\n  describe('registerAsync useExisting', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseExistingOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('register', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.register({ ...config().httOptions }),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "b94f463e-f193-42fb-becf-c41aea79f9e0",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpModule > registerAsync useFactory > should be define",
              "fullTitle": "should be define",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\nimport { HttpModuleAsyncOptions } from '../http/interfaces/http-module.interface';\n\nclass MockedClass {\n  createHttpOptions() {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n\ndescribe('HttpModule', () => {\n  const mockedUseFactory: HttpModuleAsyncOptions = {\n    useFactory: async () => ({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  };\n\n  describe('registerAsync useFactory', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseFactory),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseClassOptions: HttpModuleAsyncOptions = {\n    useClass: MockedClass,\n  };\n\n  describe('registerAsync useClass', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseClassOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseExistingOptions: HttpModuleAsyncOptions = {\n    extraProviders: [MockedClass],\n    useExisting: MockedClass,\n  };\n\n  describe('registerAsync useExisting', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseExistingOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('register', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.register({ ...config().httOptions }),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "220f4c0f-3169-4aa3-a145-3ae97775fa4a",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpModule > registerAsync useFactory > should be define",
              "fullTitle": "should be define",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\nimport { HttpModuleAsyncOptions } from '../http/interfaces/http-module.interface';\n\nclass MockedClass {\n  createHttpOptions() {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n\ndescribe('HttpModule', () => {\n  const mockedUseFactory: HttpModuleAsyncOptions = {\n    useFactory: async () => ({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  };\n\n  describe('registerAsync useFactory', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseFactory),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseClassOptions: HttpModuleAsyncOptions = {\n    useClass: MockedClass,\n  };\n\n  describe('registerAsync useClass', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseClassOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseExistingOptions: HttpModuleAsyncOptions = {\n    extraProviders: [MockedClass],\n    useExisting: MockedClass,\n  };\n\n  describe('registerAsync useExisting', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseExistingOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('register', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.register({ ...config().httOptions }),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "693f3073-8537-4607-95ef-4fa4ec2ee826",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HttpModule > registerAsync useFactory > should be define",
              "fullTitle": "should be define",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\nimport { HttpModuleAsyncOptions } from '../http/interfaces/http-module.interface';\n\nclass MockedClass {\n  createHttpOptions() {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n\ndescribe('HttpModule', () => {\n  const mockedUseFactory: HttpModuleAsyncOptions = {\n    useFactory: async () => ({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  };\n\n  describe('registerAsync useFactory', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseFactory),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseClassOptions: HttpModuleAsyncOptions = {\n    useClass: MockedClass,\n  };\n\n  describe('registerAsync useClass', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseClassOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseExistingOptions: HttpModuleAsyncOptions = {\n    extraProviders: [MockedClass],\n    useExisting: MockedClass,\n  };\n\n  describe('registerAsync useExisting', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseExistingOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('register', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.register({ ...config().httOptions }),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "513d0de3-2fbb-4808-aa35-ce32e888db2b",
              "parentUUID": "01fe8679-671c-475d-bdca-bdf14621d150",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e2e698c7-3f84-40f8-8190-9fef40011454",
            "72526a5c-39fb-4e99-86bf-2cd3f1123c68",
            "f9b6f77f-f414-4c35-866f-d4edb164c9aa",
            "def9b6a7-1565-4396-9a25-8e8ea23c117e",
            "623c5c14-b98f-4f47-9920-3c5f8f03a372",
            "480b9026-1ffd-4656-8500-de699301ec30",
            "f37a6e3a-d11a-4a01-bb8b-e140b75d9c07",
            "d08a2ba3-76f7-4fe9-a7ed-61633cca9cf0",
            "541ebae4-323d-4bdb-ba62-87c063bf01e5",
            "e5b7b440-23a6-4980-9e79-15e0d53a74cb",
            "ec6f8b7a-dc6f-4f11-b510-64eabc61fe4c",
            "b01e2f6c-a7f0-44b1-adcf-09779a95c974",
            "b94f463e-f193-42fb-becf-c41aea79f9e0",
            "220f4c0f-3169-4aa3-a145-3ae97775fa4a",
            "693f3073-8537-4607-95ef-4fa4ec2ee826",
            "513d0de3-2fbb-4808-aa35-ce32e888db2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4869,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "aa8ecc3b-dfaf-48eb-a77a-94df6a81ab57",
      "title": "@tresdoce-nestjs-toolkit/mailer",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e2916094-7e2f-41b8-b283-429ec2e50760",
          "title": "@tresdoce-nestjs-toolkit/mailer",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MailerService > should not be defined if a transport is not provided",
              "fullTitle": "should not be defined if a transport is not provided",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "6ab7cb6a-dfba-418b-8a54-8ea949802979",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should accept a smtp transport string",
              "fullTitle": "should accept a smtp transport string",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "c0e5a635-9f78-49b3-8dee-0bc38e5d77d2",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should accept a smtp transports string",
              "fullTitle": "should accept a smtp transports string",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "03ac283c-d79f-40c5-b6dd-09185406531c",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should accept smtp transport options",
              "fullTitle": "should accept smtp transport options",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "c02c6abd-ef24-4814-9f8b-44dd05c262ac",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should accept a smtp transport instance",
              "fullTitle": "should accept a smtp transport instance",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "b087edd1-999e-45e0-b48b-79c5f786e323",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should send emails with nodemailer",
              "fullTitle": "should send emails with nodemailer",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "cac1d9a5-aa9a-49a6-a39f-ae0a08727fcd",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should send emails with nodemailer transports",
              "fullTitle": "should send emails with nodemailer transports",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "e1e380e3-8f5c-4a54-bf8e-34fa341bf9b7",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should send emails with nodemailer with different transports name",
              "fullTitle": "should send emails with nodemailer with different transports name",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "a8d27dfa-1efe-4aa1-a05b-177f017e1c96",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should send emails with nodemailer without transports",
              "fullTitle": "should send emails with nodemailer without transports",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "1a4639b2-3a91-4e3f-90c9-f51fea66dbc8",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should use mailerOptions.defaults when send emails",
              "fullTitle": "should use mailerOptions.defaults when send emails",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "d4971038-0ea3-4ea3-b2b0-f5b89ca95f03",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should use custom transport to send mail",
              "fullTitle": "should use custom transport to send mail",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "c72484ad-5e46-476c-811b-7b088c3ee316",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the handlebars adapter",
              "fullTitle": "should compile template with the handlebars adapter",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "e56120fe-74a6-4cb2-ab7e-175d3868f812",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the handlebars adapter with relative path",
              "fullTitle": "should compile template with the handlebars adapter with relative path",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "8d188252-b51d-49ac-b59f-b8a0f2946b00",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the handlebars adapter with error template path",
              "fullTitle": "should compile template with the handlebars adapter with error template path",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "7f386b4f-b972-4493-8444-80197b4d2677",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the handlebars adapter with disabled inline-css",
              "fullTitle": "should compile template with the handlebars adapter with disabled inline-css",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "809ce004-0d5e-471a-a710-0b71377b0cc9",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the handlebars adapter with enabled inline-css and media query",
              "fullTitle": "should compile template with the handlebars adapter with enabled inline-css and media query",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "319b0ec9-5682-47fd-99ae-fcf98c4cd0b6",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the pug adapter",
              "fullTitle": "should compile template with the pug adapter",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "c28f5d24-9ad2-4d13-bdcc-cfed7a581f49",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the pug adapter with relative path",
              "fullTitle": "should compile template with the pug adapter with relative path",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "368e4d56-f314-4613-806a-3d658dfd705b",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the pug adapter with error to read template",
              "fullTitle": "should compile template with the pug adapter with error to read template",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "fe2a2e15-0534-49ab-b597-c1d61013fc65",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the pug adapter without inline css",
              "fullTitle": "should compile template with the pug adapter without inline css",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "899f9aa4-36c1-4cd7-83c0-a0d04bf111d0",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the ejs adapter",
              "fullTitle": "should compile template with the ejs adapter",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "db3a5323-6b02-494c-a9a1-9f3e29ff2a3f",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the ejs adapter with error to read template",
              "fullTitle": "should compile template with the ejs adapter with error to read template",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "f8dd8eb4-673c-4d33-b0d2-762df09260b2",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the ejs adapter read template relative url",
              "fullTitle": "should compile template with the ejs adapter read template relative url",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "4ba0929d-8a1c-4e0c-86d9-744ac5356e9f",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the ejs adapter without css inline",
              "fullTitle": "should compile template with the ejs adapter without css inline",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "8a16408e-933b-4b1e-bd3b-f59443bbcc78",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerService > should compile template with the ejs adapter with css inline",
              "fullTitle": "should compile template with the ejs adapter with css inline",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "74d54361-b59e-4abb-9d01-93bc3137d4e1",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerModule > forRoot > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 276,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { MailerModule } from '../mailer/mailer.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { dynamicConfig } from '@tresdoce-nestjs-toolkit/test-utils';\n\ndescribe('MailerModule', () => {\n  let app: INestApplication;\n\n  describe('forRoot', () => {\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          MailerModule.forRoot({\n            transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n            defaults: {\n              from: '\"nest-modules\" <modules@nestjs.com>',\n            },\n          }),\n        ],\n      }).compile();\n\n      app = moduleFixture.createNestApplication();\n      await app.init();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('forRootAsync', () => {\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [\n              dynamicConfig({\n                mailer: {\n                  transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n                  defaults: {\n                    from: '\"nest-modules\" <modules@nestjs.com>',\n                  },\n                },\n              }),\n            ],\n          }),\n          MailerModule,\n        ],\n      }).compile();\n\n      app = moduleFixture.createNestApplication();\n      await app.init();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "5ceb9526-3757-4959-9805-2ecc9374768e",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MailerModule > forRoot > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { MailerModule } from '../mailer/mailer.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { dynamicConfig } from '@tresdoce-nestjs-toolkit/test-utils';\n\ndescribe('MailerModule', () => {\n  let app: INestApplication;\n\n  describe('forRoot', () => {\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          MailerModule.forRoot({\n            transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n            defaults: {\n              from: '\"nest-modules\" <modules@nestjs.com>',\n            },\n          }),\n        ],\n      }).compile();\n\n      app = moduleFixture.createNestApplication();\n      await app.init();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('forRootAsync', () => {\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [\n              dynamicConfig({\n                mailer: {\n                  transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n                  defaults: {\n                    from: '\"nest-modules\" <modules@nestjs.com>',\n                  },\n                },\n              }),\n            ],\n          }),\n          MailerModule,\n        ],\n      }).compile();\n\n      app = moduleFixture.createNestApplication();\n      await app.init();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "98f9fd36-c7fb-45fe-b485-f4d9fd494218",
              "parentUUID": "e2916094-7e2f-41b8-b283-429ec2e50760",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6ab7cb6a-dfba-418b-8a54-8ea949802979",
            "c0e5a635-9f78-49b3-8dee-0bc38e5d77d2",
            "03ac283c-d79f-40c5-b6dd-09185406531c",
            "c02c6abd-ef24-4814-9f8b-44dd05c262ac",
            "b087edd1-999e-45e0-b48b-79c5f786e323",
            "cac1d9a5-aa9a-49a6-a39f-ae0a08727fcd",
            "e1e380e3-8f5c-4a54-bf8e-34fa341bf9b7",
            "a8d27dfa-1efe-4aa1-a05b-177f017e1c96",
            "1a4639b2-3a91-4e3f-90c9-f51fea66dbc8",
            "d4971038-0ea3-4ea3-b2b0-f5b89ca95f03",
            "c72484ad-5e46-476c-811b-7b088c3ee316",
            "e56120fe-74a6-4cb2-ab7e-175d3868f812",
            "8d188252-b51d-49ac-b59f-b8a0f2946b00",
            "7f386b4f-b972-4493-8444-80197b4d2677",
            "809ce004-0d5e-471a-a710-0b71377b0cc9",
            "319b0ec9-5682-47fd-99ae-fcf98c4cd0b6",
            "c28f5d24-9ad2-4d13-bdcc-cfed7a581f49",
            "368e4d56-f314-4613-806a-3d658dfd705b",
            "fe2a2e15-0534-49ab-b597-c1d61013fc65",
            "899f9aa4-36c1-4cd7-83c0-a0d04bf111d0",
            "db3a5323-6b02-494c-a9a1-9f3e29ff2a3f",
            "f8dd8eb4-673c-4d33-b0d2-762df09260b2",
            "4ba0929d-8a1c-4e0c-86d9-744ac5356e9f",
            "8a16408e-933b-4b1e-bd3b-f59443bbcc78",
            "74d54361-b59e-4abb-9d01-93bc3137d4e1",
            "5ceb9526-3757-4959-9805-2ecc9374768e",
            "98f9fd36-c7fb-45fe-b485-f4d9fd494218"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 425,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "51751e8d-a8a6-4326-8b65-9b1144f665ba",
      "title": "@tresdoce-nestjs-toolkit/redis",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
          "title": "@tresdoce-nestjs-toolkit/redis",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "RedisService > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 330,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "0aa173f1-43fe-4378-82f9-871520a3007f",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return echo",
              "fullTitle": "should be return echo",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "8074cd60-49f7-46d1-969c-5abf63324d5f",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return false if key dont exist in redis",
              "fullTitle": "should be return false if key dont exist in redis",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "b96926fe-2066-4710-b4d5-9bcfd1c50980",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return OK when set value in redis",
              "fullTitle": "should be return OK when set value in redis",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "ae0538c2-60c1-412d-b1a6-4708fcbdc03e",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return value of key",
              "fullTitle": "should be return value of key",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "07c4c5eb-0281-42a1-af2e-f4763b227daf",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return true if key exist in redis",
              "fullTitle": "should be return true if key exist in redis",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "65e1a2ea-ccc8-4508-ad7e-2ff075cf3b48",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be set value in redis with expiration date",
              "fullTitle": "should be set value in redis with expiration date",
              "timedOut": false,
              "duration": 3017,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "24a82f8a-c207-4aee-8d68-68a34ce8d736",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return true when copy key",
              "fullTitle": "should be return true when copy key",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "d1dc2331-a297-4272-890b-aac601a76fa2",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return false when copy key",
              "fullTitle": "should be return false when copy key",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "52e1ddda-3b75-4c3a-ba44-312d67b0965f",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be rename a key",
              "fullTitle": "should be rename a key",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "f27b9411-757e-4234-92d8-1a97a8fb1a84",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return false when delete a key",
              "fullTitle": "should be return false when delete a key",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "d9959e05-3f09-4744-8b43-da97a8602159",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be return true when delete a key",
              "fullTitle": "should be return true when delete a key",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "2680a9fe-0187-4935-83fd-c2f73bf8e0a4",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisService > should be flush all",
              "fullTitle": "should be flush all",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "10ea8933-66db-44dd-8891-633f66dcb790",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisModule > with auth > forRootAsync > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { RedisModule } from '../redis/redis.module';\nimport { config } from './utils';\n\njest.setTimeout(70000);\ndescribe('RedisModule', () => {\n  describe('with auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        containerName: `${tcName}-redis-module-with-auth`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    describe('forRootAsync', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            ConfigModule.forRoot({\n              isGlobal: true,\n              load: [config],\n            }),\n            RedisModule,\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n\n    describe('register', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            RedisModule.register({\n              name: 'test-redis-module',\n              username: encodeURIComponent('default'),\n              password: encodeURIComponent('123456'),\n              host: global.hostContainer,\n              port: parseInt('6379', 10),\n            }),\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n  });\n\n  describe('without auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        containerName: `${tcName}-redis-module-without-auth`,\n        envs: {},\n        ports: [\n          {\n            container: 6379,\n            host: 6380,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          RedisModule.register({\n            host: global.hostContainer,\n            port: parseInt('6380', 10),\n            database: 1,\n          }),\n        ],\n      }).compile();\n\n      app = module.createNestApplication();\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n  });\n});\n",
              "err": {},
              "uuid": "aad3006a-4f5c-45cd-9418-e74e16bca5d5",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisModule > with auth > forRootAsync > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { RedisModule } from '../redis/redis.module';\nimport { config } from './utils';\n\njest.setTimeout(70000);\ndescribe('RedisModule', () => {\n  describe('with auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        containerName: `${tcName}-redis-module-with-auth`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    describe('forRootAsync', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            ConfigModule.forRoot({\n              isGlobal: true,\n              load: [config],\n            }),\n            RedisModule,\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n\n    describe('register', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            RedisModule.register({\n              name: 'test-redis-module',\n              username: encodeURIComponent('default'),\n              password: encodeURIComponent('123456'),\n              host: global.hostContainer,\n              port: parseInt('6379', 10),\n            }),\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n  });\n\n  describe('without auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        containerName: `${tcName}-redis-module-without-auth`,\n        envs: {},\n        ports: [\n          {\n            container: 6379,\n            host: 6380,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          RedisModule.register({\n            host: global.hostContainer,\n            port: parseInt('6380', 10),\n            database: 1,\n          }),\n        ],\n      }).compile();\n\n      app = module.createNestApplication();\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n  });\n});\n",
              "err": {},
              "uuid": "87a90fb8-3ae6-455f-9a91-c70df0f095b4",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RedisModule > with auth > forRootAsync > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { RedisModule } from '../redis/redis.module';\nimport { config } from './utils';\n\njest.setTimeout(70000);\ndescribe('RedisModule', () => {\n  describe('with auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        containerName: `${tcName}-redis-module-with-auth`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    describe('forRootAsync', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            ConfigModule.forRoot({\n              isGlobal: true,\n              load: [config],\n            }),\n            RedisModule,\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n\n    describe('register', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            RedisModule.register({\n              name: 'test-redis-module',\n              username: encodeURIComponent('default'),\n              password: encodeURIComponent('123456'),\n              host: global.hostContainer,\n              port: parseInt('6379', 10),\n            }),\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n  });\n\n  describe('without auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        containerName: `${tcName}-redis-module-without-auth`,\n        envs: {},\n        ports: [\n          {\n            container: 6379,\n            host: 6380,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          RedisModule.register({\n            host: global.hostContainer,\n            port: parseInt('6380', 10),\n            database: 1,\n          }),\n        ],\n      }).compile();\n\n      app = module.createNestApplication();\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n  });\n});\n",
              "err": {},
              "uuid": "a4d3a080-5584-4e1d-b434-6d2a28c0d283",
              "parentUUID": "8e21cc73-1dd7-4de3-96c3-79ea41ecc42c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0aa173f1-43fe-4378-82f9-871520a3007f",
            "8074cd60-49f7-46d1-969c-5abf63324d5f",
            "b96926fe-2066-4710-b4d5-9bcfd1c50980",
            "ae0538c2-60c1-412d-b1a6-4708fcbdc03e",
            "07c4c5eb-0281-42a1-af2e-f4763b227daf",
            "65e1a2ea-ccc8-4508-ad7e-2ff075cf3b48",
            "24a82f8a-c207-4aee-8d68-68a34ce8d736",
            "d1dc2331-a297-4272-890b-aac601a76fa2",
            "52e1ddda-3b75-4c3a-ba44-312d67b0965f",
            "f27b9411-757e-4234-92d8-1a97a8fb1a84",
            "d9959e05-3f09-4744-8b43-da97a8602159",
            "2680a9fe-0187-4935-83fd-c2f73bf8e0a4",
            "10ea8933-66db-44dd-8891-633f66dcb790",
            "aad3006a-4f5c-45cd-9418-e74e16bca5d5",
            "87a90fb8-3ae6-455f-9a91-c70df0f095b4",
            "a4d3a080-5584-4e1d-b434-6d2a28c0d283"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3580,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "ad807480-06ed-4c2f-b77b-b94229bb2b4d",
      "title": "@tresdoce-nestjs-toolkit/response-parser",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "55550918-225f-434b-834f-7049f815b1ab",
          "title": "@tresdoce-nestjs-toolkit/response-parser",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ResponseInterceptor > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { ResponseInterceptor } from '../response/response.interceptor';\nimport {\n  JestFN,\n  fixtureUserResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { of } from 'rxjs';\n\nconst executionContext: any = JestFN.executionContext;\n\ndescribe('ResponseInterceptor', () => {\n  let interceptor = new ResponseInterceptor();\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('should return an ResponseInterceptor instance simple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserResponse)),\n    };\n\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject(fixtureUserResponse);\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  });\n\n  it('should return an ResponseInterceptor instance multiple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserArrayResponse)),\n    };\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject({ data: fixtureUserArrayResponse });\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  });\n});\n",
              "err": {},
              "uuid": "09459dcc-d7e0-4a37-8d0e-e865403e1965",
              "parentUUID": "55550918-225f-434b-834f-7049f815b1ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ResponseInterceptor > should return an ResponseInterceptor instance simple entity",
              "fullTitle": "should return an ResponseInterceptor instance simple entity",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { ResponseInterceptor } from '../response/response.interceptor';\nimport {\n  JestFN,\n  fixtureUserResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { of } from 'rxjs';\n\nconst executionContext: any = JestFN.executionContext;\n\ndescribe('ResponseInterceptor', () => {\n  let interceptor = new ResponseInterceptor();\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('should return an ResponseInterceptor instance simple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserResponse)),\n    };\n\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject(fixtureUserResponse);\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  });\n\n  it('should return an ResponseInterceptor instance multiple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserArrayResponse)),\n    };\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject({ data: fixtureUserArrayResponse });\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  });\n});\n",
              "err": {},
              "uuid": "9f2a79a1-0486-409d-a902-e163bffa30a1",
              "parentUUID": "55550918-225f-434b-834f-7049f815b1ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ResponseInterceptor > should return an ResponseInterceptor instance multiple entity",
              "fullTitle": "should return an ResponseInterceptor instance multiple entity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { ResponseInterceptor } from '../response/response.interceptor';\nimport {\n  JestFN,\n  fixtureUserResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { of } from 'rxjs';\n\nconst executionContext: any = JestFN.executionContext;\n\ndescribe('ResponseInterceptor', () => {\n  let interceptor = new ResponseInterceptor();\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('should return an ResponseInterceptor instance simple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserResponse)),\n    };\n\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject(fixtureUserResponse);\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  });\n\n  it('should return an ResponseInterceptor instance multiple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserArrayResponse)),\n    };\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject({ data: fixtureUserArrayResponse });\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  });\n});\n",
              "err": {},
              "uuid": "5f9103a3-4b68-4934-84c5-051ab3b9fb0c",
              "parentUUID": "55550918-225f-434b-834f-7049f815b1ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "09459dcc-d7e0-4a37-8d0e-e865403e1965",
            "9f2a79a1-0486-409d-a902-e163bffa30a1",
            "5f9103a3-4b68-4934-84c5-051ab3b9fb0c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "54368789-b3ba-429e-8f21-414a5662edfe",
      "title": "@tresdoce-nestjs-toolkit/test-utils",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
          "title": "@tresdoce-nestjs-toolkit/test-utils",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "globalTestContainers > should be initialize service from docker-compose.yml",
              "fullTitle": "should be initialize service from docker-compose.yml",
              "timedOut": false,
              "duration": 12546,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { StartedDockerComposeEnvironment } from 'testcontainers';\nimport { closeDockerCompose, initDockerCompose } from '../testcontainers';\nimport path from 'path';\n\ndescribe('globalTestContainers', () => {\n  const composeFilePath = path.resolve(__dirname, '..', 'fixtures', 'docker-compose');\n  const composeFile = 'docker-compose.yml';\n\n  it('should be initialize service from docker-compose.yml', async () => {\n    const services = ['mongo'];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize all services from docker-compose.yml', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize services from docker-compose.yml in default path and filename', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(services)();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n});\n",
              "err": {},
              "uuid": "4c0a2aaa-e766-4065-a7db-40c341bd7a1a",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "globalTestContainers > should be initialize all services from docker-compose.yml",
              "fullTitle": "should be initialize all services from docker-compose.yml",
              "timedOut": false,
              "duration": 13664,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { StartedDockerComposeEnvironment } from 'testcontainers';\nimport { closeDockerCompose, initDockerCompose } from '../testcontainers';\nimport path from 'path';\n\ndescribe('globalTestContainers', () => {\n  const composeFilePath = path.resolve(__dirname, '..', 'fixtures', 'docker-compose');\n  const composeFile = 'docker-compose.yml';\n\n  it('should be initialize service from docker-compose.yml', async () => {\n    const services = ['mongo'];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize all services from docker-compose.yml', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize services from docker-compose.yml in default path and filename', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(services)();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n});\n",
              "err": {},
              "uuid": "f4c08a58-4300-4aea-88c5-a1586b87713d",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "globalTestContainers > should be initialize services from docker-compose.yml in default path and filename",
              "fullTitle": "should be initialize services from docker-compose.yml in default path and filename",
              "timedOut": false,
              "duration": 11877,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { StartedDockerComposeEnvironment } from 'testcontainers';\nimport { closeDockerCompose, initDockerCompose } from '../testcontainers';\nimport path from 'path';\n\ndescribe('globalTestContainers', () => {\n  const composeFilePath = path.resolve(__dirname, '..', 'fixtures', 'docker-compose');\n  const composeFile = 'docker-compose.yml';\n\n  it('should be initialize service from docker-compose.yml', async () => {\n    const services = ['mongo'];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize all services from docker-compose.yml', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize services from docker-compose.yml in default path and filename', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(services)();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n});\n",
              "err": {},
              "uuid": "d3b37916-070e-40f6-b0d4-5999856bf9c9",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "739d5696-aa7f-4c14-afaf-49f476e1953b",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be return exception of instance",
              "fullTitle": "should be return exception of instance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "b3fc1a17-58c8-4e83-98fb-55b13ee4d706",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be get instance of test container",
              "fullTitle": "should be get instance of test container",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "62c9c1c0-09f1-44b9-b562-b254e1520836",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be return envs of instance",
              "fullTitle": "should be return envs of instance",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "2a99554e-6b2a-495c-909f-26a19e044cfb",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be return container instance",
              "fullTitle": "should be return container instance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "fd3d95cf-650e-4e16-86ba-a09c850f9048",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be return host of container instance",
              "fullTitle": "should be return host of container instance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "cc445aae-e736-4824-a594-0dc626a13ede",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be return name of container instance",
              "fullTitle": "should be return name of container instance",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "4710b0c8-2490-47d9-85d5-193ab174e878",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be return mapped port",
              "fullTitle": "should be return mapped port",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "c2871fea-a5a5-4ad3-bc5d-f229de685be9",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "4de477ad-ba17-4f88-96c1-369c1e59f9c9",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "e6e04b29-9f71-4ff5-b9b5-cacb4e085c60",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "762c7e99-b213-4ba7-8352-13331d3e2ffe",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "78f6ed8b-0586-427c-a226-e7229082fb59",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestContainers > Redis > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "3b0da5d3-155b-4106-8827-23d85d4c682a",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "utilities > should be return delay default time",
              "fullTitle": "should be return delay default time",
              "timedOut": false,
              "duration": 10005,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { delay, pathJoin } from '../utilities';\nimport path from 'path';\n\ndescribe('utilities', () => {\n  it('should be return delay default time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay();\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n\n  it('should be return delay custom time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay(60);\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 60);\n  });\n\n  it('should be return a join of paths', async () => {\n    const filePath = pathJoin(__dirname, 'join');\n    expect(filePath).toBe(path.join(__dirname, 'join'));\n  });\n});\n",
              "err": {},
              "uuid": "63e135d8-55eb-4e95-954e-bd43603cbaa0",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "utilities > should be return delay custom time",
              "fullTitle": "should be return delay custom time",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { delay, pathJoin } from '../utilities';\nimport path from 'path';\n\ndescribe('utilities', () => {\n  it('should be return delay default time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay();\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n\n  it('should be return delay custom time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay(60);\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 60);\n  });\n\n  it('should be return a join of paths', async () => {\n    const filePath = pathJoin(__dirname, 'join');\n    expect(filePath).toBe(path.join(__dirname, 'join'));\n  });\n});\n",
              "err": {},
              "uuid": "cb620b8e-4e67-401e-af9e-687aa72bac34",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "utilities > should be return a join of paths",
              "fullTitle": "should be return a join of paths",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { delay, pathJoin } from '../utilities';\nimport path from 'path';\n\ndescribe('utilities', () => {\n  it('should be return delay default time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay();\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n\n  it('should be return delay custom time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay(60);\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 60);\n  });\n\n  it('should be return a join of paths', async () => {\n    const filePath = pathJoin(__dirname, 'join');\n    expect(filePath).toBe(path.join(__dirname, 'join'));\n  });\n});\n",
              "err": {},
              "uuid": "af60210b-117d-46f2-886a-8a47b11e6ceb",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Config > baseConfig > should be return config",
              "fullTitle": "should be return config",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { config, dynamicConfig } from '../config/index';\nimport { appConfigBase } from '../fixtures';\n\ndescribe('Config', () => {\n  describe('baseConfig', () => {\n    it('should be return config', async () => {\n      expect(config()).toBeDefined();\n      expect(config()).not.toBe(null);\n      expect(typeof config()).toBe('object');\n      expect(config()).toEqual(appConfigBase);\n    });\n  });\n\n  describe('dynamicConfig', () => {\n    it('should be return config with args', async () => {\n      const args = {\n        httOptions: {\n          timeout: 5000,\n          maxRedirects: 5,\n        },\n      };\n\n      expect(dynamicConfig(args)()).toBeDefined();\n      expect(dynamicConfig(args)()).not.toBe(null);\n      expect(typeof dynamicConfig(args)()).toBe('object');\n      expect(dynamicConfig(args)()).toEqual({ ...appConfigBase, ...args });\n    });\n\n    it('should be return config without args', async () => {\n      expect(dynamicConfig()()).toBeDefined();\n      expect(dynamicConfig()()).not.toBe(null);\n      expect(typeof dynamicConfig()()).toBe('object');\n      expect(dynamicConfig()()).toEqual(appConfigBase);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "2157086d-3f49-49d4-8927-bdcfaaa1b81f",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Config > baseConfig > should be return config with args",
              "fullTitle": "should be return config with args",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { config, dynamicConfig } from '../config/index';\nimport { appConfigBase } from '../fixtures';\n\ndescribe('Config', () => {\n  describe('baseConfig', () => {\n    it('should be return config', async () => {\n      expect(config()).toBeDefined();\n      expect(config()).not.toBe(null);\n      expect(typeof config()).toBe('object');\n      expect(config()).toEqual(appConfigBase);\n    });\n  });\n\n  describe('dynamicConfig', () => {\n    it('should be return config with args', async () => {\n      const args = {\n        httOptions: {\n          timeout: 5000,\n          maxRedirects: 5,\n        },\n      };\n\n      expect(dynamicConfig(args)()).toBeDefined();\n      expect(dynamicConfig(args)()).not.toBe(null);\n      expect(typeof dynamicConfig(args)()).toBe('object');\n      expect(dynamicConfig(args)()).toEqual({ ...appConfigBase, ...args });\n    });\n\n    it('should be return config without args', async () => {\n      expect(dynamicConfig()()).toBeDefined();\n      expect(dynamicConfig()()).not.toBe(null);\n      expect(typeof dynamicConfig()()).toBe('object');\n      expect(dynamicConfig()()).toEqual(appConfigBase);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "358d0742-44fd-46e2-bbd4-7e065649f635",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Config > baseConfig > should be return config without args",
              "fullTitle": "should be return config without args",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { config, dynamicConfig } from '../config/index';\nimport { appConfigBase } from '../fixtures';\n\ndescribe('Config', () => {\n  describe('baseConfig', () => {\n    it('should be return config', async () => {\n      expect(config()).toBeDefined();\n      expect(config()).not.toBe(null);\n      expect(typeof config()).toBe('object');\n      expect(config()).toEqual(appConfigBase);\n    });\n  });\n\n  describe('dynamicConfig', () => {\n    it('should be return config with args', async () => {\n      const args = {\n        httOptions: {\n          timeout: 5000,\n          maxRedirects: 5,\n        },\n      };\n\n      expect(dynamicConfig(args)()).toBeDefined();\n      expect(dynamicConfig(args)()).not.toBe(null);\n      expect(typeof dynamicConfig(args)()).toBe('object');\n      expect(dynamicConfig(args)()).toEqual({ ...appConfigBase, ...args });\n    });\n\n    it('should be return config without args', async () => {\n      expect(dynamicConfig()()).toBeDefined();\n      expect(dynamicConfig()()).not.toBe(null);\n      expect(typeof dynamicConfig()()).toBe('object');\n      expect(dynamicConfig()()).toEqual(appConfigBase);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "de49e216-30bf-4293-8f90-40a5ed43f8ab",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fixtures > appConfigBase > should be return appBaseConfig",
              "fullTitle": "should be return appBaseConfig",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "9c2d2b5f-e52f-49e7-8b64-8cd5fec41696",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fixtures > appConfigBase > should be return appBaseConfig",
              "fullTitle": "should be return appBaseConfig",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "09cad24f-c44d-4c41-b4a2-da4f93e647e1",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fixtures > appConfigBase > should be define Redis options",
              "fullTitle": "should be define Redis options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "3a130847-5385-4eb3-85a6-165925350bb3",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fixtures > appConfigBase > should be define DynamoDB options",
              "fullTitle": "should be define DynamoDB options",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "8e6af97c-9928-4699-90cd-cef5986ca573",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fixtures > appConfigBase > should be define MongoDB options",
              "fullTitle": "should be define MongoDB options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "bdc8e3f1-c5f8-4010-815e-2f712323901c",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fixtures > appConfigBase > should be define MySql options",
              "fullTitle": "should be define MySql options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "c1934b7b-a7c4-46f0-abbb-40b0748712dd",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fixtures > appConfigBase > should be define Postgres options",
              "fullTitle": "should be define Postgres options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "aaaf7f06-78f0-4e22-b781-91ecf50302b9",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fixtures > appConfigBase > should be define ElasticSearch options",
              "fullTitle": "should be define ElasticSearch options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "06d45412-ff19-46c6-94fe-c39931aa49b5",
              "parentUUID": "105a70cc-d8c7-48b3-a85e-e960b6f8a47c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c0a2aaa-e766-4065-a7db-40c341bd7a1a",
            "f4c08a58-4300-4aea-88c5-a1586b87713d",
            "d3b37916-070e-40f6-b0d4-5999856bf9c9",
            "739d5696-aa7f-4c14-afaf-49f476e1953b",
            "b3fc1a17-58c8-4e83-98fb-55b13ee4d706",
            "62c9c1c0-09f1-44b9-b562-b254e1520836",
            "2a99554e-6b2a-495c-909f-26a19e044cfb",
            "fd3d95cf-650e-4e16-86ba-a09c850f9048",
            "cc445aae-e736-4824-a594-0dc626a13ede",
            "4710b0c8-2490-47d9-85d5-193ab174e878",
            "c2871fea-a5a5-4ad3-bc5d-f229de685be9",
            "4de477ad-ba17-4f88-96c1-369c1e59f9c9",
            "e6e04b29-9f71-4ff5-b9b5-cacb4e085c60",
            "762c7e99-b213-4ba7-8352-13331d3e2ffe",
            "78f6ed8b-0586-427c-a226-e7229082fb59",
            "3b0da5d3-155b-4106-8827-23d85d4c682a",
            "63e135d8-55eb-4e95-954e-bd43603cbaa0",
            "cb620b8e-4e67-401e-af9e-687aa72bac34",
            "af60210b-117d-46f2-886a-8a47b11e6ceb",
            "2157086d-3f49-49d4-8927-bdcfaaa1b81f",
            "358d0742-44fd-46e2-bbd4-7e065649f635",
            "de49e216-30bf-4293-8f90-40a5ed43f8ab",
            "9c2d2b5f-e52f-49e7-8b64-8cd5fec41696",
            "09cad24f-c44d-4c41-b4a2-da4f93e647e1",
            "3a130847-5385-4eb3-85a6-165925350bb3",
            "8e6af97c-9928-4699-90cd-cef5986ca573",
            "bdc8e3f1-c5f8-4010-815e-2f712323901c",
            "c1934b7b-a7c4-46f0-abbb-40b0748712dd",
            "aaaf7f06-78f0-4e22-b781-91ecf50302b9",
            "06d45412-ff19-46c6-94fe-c39931aa49b5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 48177,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "5e8caeef-42f5-4f24-982b-e70cbbfdf551",
      "title": "@tresdoce-nestjs-toolkit/typeorm",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aa48275a-ecfe-479d-827b-818f5da7ed26",
          "title": "@tresdoce-nestjs-toolkit/typeorm",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TypeOrm > Postgres > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 279,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "3787c19b-1888-4903-ae94-e69c89874a30",
              "parentUUID": "aa48275a-ecfe-479d-827b-818f5da7ed26",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TypeOrm > Postgres > should be return an array of post",
              "fullTitle": "should be return an array of post",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "adab2d60-51e5-419b-a4e2-1c96b919b206",
              "parentUUID": "aa48275a-ecfe-479d-827b-818f5da7ed26",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TypeOrm > Postgres > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "6eff803b-427f-40c2-a846-9d37b4df9fe8",
              "parentUUID": "aa48275a-ecfe-479d-827b-818f5da7ed26",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TypeOrm > Postgres > should be return an array of post",
              "fullTitle": "should be return an array of post",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "46384bf2-8dd2-4034-89e5-2ddc2a0af4b4",
              "parentUUID": "aa48275a-ecfe-479d-827b-818f5da7ed26",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TypeOrm > Postgres > should be defined",
              "fullTitle": "should be defined",
              "timedOut": false,
              "duration": 2284,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "4b5bb60f-9d8a-415f-bb8a-2540c5f07c34",
              "parentUUID": "aa48275a-ecfe-479d-827b-818f5da7ed26",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TypeOrm > Postgres > should be return an array of user",
              "fullTitle": "should be return an array of user",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "cc039d2d-d79e-4177-9c07-56da34ac4115",
              "parentUUID": "aa48275a-ecfe-479d-827b-818f5da7ed26",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3787c19b-1888-4903-ae94-e69c89874a30",
            "adab2d60-51e5-419b-a4e2-1c96b919b206",
            "6eff803b-427f-40c2-a846-9d37b4df9fe8",
            "46384bf2-8dd2-4034-89e5-2ddc2a0af4b4",
            "4b5bb60f-9d8a-415f-bb8a-2540c5f07c34",
            "cc039d2d-d79e-4177-9c07-56da34ac4115"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2895,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}
{
  "stats": {
    "suites": 13,
    "tests": 155,
    "passes": 155,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 155,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-11T01:02:07.488Z",
    "end": "2023-05-11T01:05:07.828Z",
    "duration": 180340
  },
  "results": [
    {
      "uuid": "76941e43-b937-400d-905d-f08c8677782b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1090ec0e-a1dd-41d3-b069-1dff4e69c697",
          "title": "@tresdoce-nestjs-toolkit/archetype",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eafd3f05-1f9b-4e4a-8a5a-f5daa581e14f",
              "title": "ArchetypeController",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/archetype/src/__test__/archetype.controller.spec.ts",
              "file": "archetype.controller.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "ArchetypeController should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', async () => {\n    expect(controller).toBeDefined();\n  }, 1000)",
                  "err": {},
                  "uuid": "34d2077b-291b-4350-a430-addbf5e35875",
                  "parentUUID": "eafd3f05-1f9b-4e4a-8a5a-f5daa581e14f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "ArchetypeController should be return manifest json",
                  "title": "should be return manifest json",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return manifest json', async () => {\n    expect(await controller.getArchetypeInfo()).toBeDefined();\n    expect(await controller.getArchetypeInfo()).toEqual(manifest);\n  })",
                  "err": {},
                  "uuid": "8f63bcf1-cd16-4586-bfce-7a26dd5daca9",
                  "parentUUID": "eafd3f05-1f9b-4e4a-8a5a-f5daa581e14f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34d2077b-291b-4350-a430-addbf5e35875",
                "8f63bcf1-cd16-4586-bfce-7a26dd5daca9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1c192d7c-e0f8-4c47-98f4-27a6751ab6e8",
              "title": "Constants",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/archetype/src/__test__/constants.spec.ts",
              "file": "constants.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "Constants should be return exclude to prefix global",
                  "title": "should be return exclude to prefix global",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return exclude to prefix global', async () => {\n    expect(manifestControllerExcludes).toEqual(expect.any(Array));\n    expect(manifestControllerExcludes).toMatchObject([\n      {\n        path: '/info',\n        method: RequestMethod.GET,\n      },\n    ]);\n  })",
                  "err": {},
                  "uuid": "675109a0-3f91-4db1-a9e1-3354b7ad5d35",
                  "parentUUID": "1c192d7c-e0f8-4c47-98f4-27a6751ab6e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "675109a0-3f91-4db1-a9e1-3354b7ad5d35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3d732666-e266-47ce-87cd-3e23fcd73fda",
              "title": "ArchetypeModule",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/archetype/src/__test__/archetype.module.spec.ts",
              "file": "archetype.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "ArchetypeModule should be define",
                  "title": "should be define",
                  "timedOut": false,
                  "duration": 358,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be define', async () => {\n    expect(app).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "1a7f33c4-a510-43b4-8aa8-588f4b8dacc5",
                  "parentUUID": "3d732666-e266-47ce-87cd-3e23fcd73fda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a7f33c4-a510-43b4-8aa8-588f4b8dacc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 358,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1bd92741-35d7-49b0-9722-7a0c61946bfc",
              "title": "ArchetypeService",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/archetype/src/__test__/archetype.service.spec.ts",
              "file": "archetype.service.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "ArchetypeService should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', () => {\n    expect(service).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "9e4729ae-f780-4953-ba9e-75c53e461de2",
                  "parentUUID": "1bd92741-35d7-49b0-9722-7a0c61946bfc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "ArchetypeService should be read package file",
                  "title": "should be read package file",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  })",
                  "err": {},
                  "uuid": "7154f99c-79ac-4f7d-8574-38922472c9d8",
                  "parentUUID": "1bd92741-35d7-49b0-9722-7a0c61946bfc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "ArchetypeService should be return archetype version",
                  "title": "should be return archetype version",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  })",
                  "err": {},
                  "uuid": "86a98430-9e64-4359-af96-707a548f2f25",
                  "parentUUID": "1bd92741-35d7-49b0-9722-7a0c61946bfc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "ArchetypeService should be return application info",
                  "title": "should be return application info",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  })",
                  "err": {},
                  "uuid": "780bf254-aa95-49c8-a766-ffb4a86c69fc",
                  "parentUUID": "1bd92741-35d7-49b0-9722-7a0c61946bfc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "ArchetypeService should be return manifest",
                  "title": "should be return manifest",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  })",
                  "err": {},
                  "uuid": "b0484edf-131e-4e5a-a8e7-70df87e89dd9",
                  "parentUUID": "1bd92741-35d7-49b0-9722-7a0c61946bfc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e4729ae-f780-4953-ba9e-75c53e461de2",
                "7154f99c-79ac-4f7d-8574-38922472c9d8",
                "86a98430-9e64-4359-af96-707a548f2f25",
                "780bf254-aa95-49c8-a766-ffb4a86c69fc",
                "b0484edf-131e-4e5a-a8e7-70df87e89dd9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 77,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "ae45de6a-e149-4ac0-8609-cc3023f56ca8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a08ff1da-4577-4050-a492-c4283ce91883",
          "title": "@tresdoce-nestjs-toolkit/camunda",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d72bd556-7acf-483a-9c43-09121348ea2a",
              "title": "CamundaModule",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/camunda/src/__test__/camunda.module.spec.ts",
              "file": "camunda.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "CamundaModule should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 275,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', () => {\n    expect(app).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "bdecc497-16a7-4e39-ab79-d28286e265af",
                  "parentUUID": "d72bd556-7acf-483a-9c43-09121348ea2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "CamundaModule should be Subscription decorator is defined with options",
                  "title": "should be Subscription decorator is defined with options",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be Subscription decorator is defined with options', async () => {\n    const decorator = Subscription('test-topic', { lockDuration: 500 });\n    console.log(decorator);\n    expect(decorator).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "15e3ded4-05eb-4130-8170-8d88cf2476be",
                  "parentUUID": "d72bd556-7acf-483a-9c43-09121348ea2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bdecc497-16a7-4e39-ab79-d28286e265af",
                "15e3ded4-05eb-4130-8170-8d88cf2476be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 284,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "7f633265-7b3d-4528-943e-673db43006ad",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e9d5c9d9-bb3b-4b08-a7aa-c3adf333be1f",
          "title": "@tresdoce-nestjs-toolkit/commons",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cbc32f0b-54c3-4080-a43b-860cb3d292f4",
              "title": "build-config",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/commons/src/__test__/build-config.spec.ts",
              "file": "build-config.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "build-config should be return jest config is build",
                  "title": "should be return jest config is build",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return jest config is build', () => {\n    process.env.NODE_ENV = 'build';\n    const config = buildConfig({ output: {}, optimization: {} });\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.mode).toEqual('production');\n  })",
                  "err": {},
                  "uuid": "566aef52-74fc-4c39-95ef-76d43c414547",
                  "parentUUID": "cbc32f0b-54c3-4080-a43b-860cb3d292f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "build-config should be return jest config not is build",
                  "title": "should be return jest config not is build",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return jest config not is build', () => {\n    process.env.NODE_ENV = 'dev';\n    const config = buildConfig({ output: {}, optimization: {} });\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.mode).toEqual('none');\n  })",
                  "err": {},
                  "uuid": "04953bec-ab16-493c-a264-b2e115dc3734",
                  "parentUUID": "cbc32f0b-54c3-4080-a43b-860cb3d292f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "566aef52-74fc-4c39-95ef-76d43c414547",
                "04953bec-ab16-493c-a264-b2e115dc3734"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c19c1c73-0d77-4d8b-8aa2-331f2d9f2b17",
              "title": "eslint-config",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/commons/src/__test__/eslint-config.spec.ts",
              "file": "eslint-config.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "eslint-config should be return jest config",
                  "title": "should be return jest config",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return jest config', () => {\n    const config = eslintConfig();\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "a19e1d5a-75ad-43a9-840b-09d3d420eac0",
                  "parentUUID": "c19c1c73-0d77-4d8b-8aa2-331f2d9f2b17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a19e1d5a-75ad-43a9-840b-09d3d420eac0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f784320a-9822-4630-aa56-039e66fb3119",
              "title": "testing-library",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/commons/src/__test__/testing-library.spec.ts",
              "file": "testing-library.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "testing-library should be return jest config",
                  "title": "should be return jest config",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return jest config', () => {\n    const config = jestConfig();\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "b5c6779e-d14b-4aae-a75b-d136df5aa09d",
                  "parentUUID": "f784320a-9822-4630-aa56-039e66fb3119",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5c6779e-d14b-4aae-a75b-d136df5aa09d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "29ad9f73-52a1-4544-817e-a0ea8f71c663",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0aedc6c0-4738-4f55-ac47-302c1efb57a2",
          "title": "@tresdoce-nestjs-toolkit/core",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5c9adf2d-28c0-4e74-abc4-38d02ab6f79d",
              "title": "commons",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/core/src/__test__/commons.spec.ts",
              "file": "commons.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "fb3f8bb0-7951-4772-a0a8-33d930ce4e3b",
                  "title": "with env context",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/core/src/__test__/commons.spec.ts",
                  "file": "commons.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "commons with env context should be return commons exclude paths with context",
                      "title": "should be return commons exclude paths with context",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    })",
                      "err": {},
                      "uuid": "6d0401f9-9048-441e-b74a-8356dc38862b",
                      "parentUUID": "fb3f8bb0-7951-4772-a0a8-33d930ce4e3b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "commons with env context should be return array of exclude paths with context",
                      "title": "should be return array of exclude paths with context",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    })",
                      "err": {},
                      "uuid": "013effe8-fef3-444b-8f31-e790318c4986",
                      "parentUUID": "fb3f8bb0-7951-4772-a0a8-33d930ce4e3b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6d0401f9-9048-441e-b74a-8356dc38862b",
                    "013effe8-fef3-444b-8f31-e790318c4986"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "cb9861f7-5451-41db-838e-98fc51e2200a",
                  "title": "without env context",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/core/src/__test__/commons.spec.ts",
                  "file": "commons.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "commons without env context should be return commons exclude paths without context",
                      "title": "should be return commons exclude paths without context",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    })",
                      "err": {},
                      "uuid": "87a24f8c-6ac1-4ce2-835c-f815fa3ab9ef",
                      "parentUUID": "cb9861f7-5451-41db-838e-98fc51e2200a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "commons without env context should be return array of exclude paths without context",
                      "title": "should be return array of exclude paths without context",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    })",
                      "err": {},
                      "uuid": "afe89cc0-09e7-4bfd-bd5a-0c0217b286d9",
                      "parentUUID": "cb9861f7-5451-41db-838e-98fc51e2200a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "87a24f8c-6ac1-4ce2-835c-f815fa3ab9ef",
                    "afe89cc0-09e7-4bfd-bd5a-0c0217b286d9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "05584b13-9bc3-4dcf-b93b-39466a94d382",
              "title": "Public decorator",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/core/src/__test__/public.decorator.spec.ts",
              "file": "public.decorator.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "Public decorator should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', async () => {\n    expect(Public()).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "0c6cefec-9286-42a2-904e-8f3c35e78268",
                  "parentUUID": "05584b13-9bc3-4dcf-b93b-39466a94d382",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "Public decorator should be return key",
                  "title": "should be return key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return key', async () => {\n    expect(IS_PUBLIC_KEY).toBe('isPublic');\n  })",
                  "err": {},
                  "uuid": "af0ced71-76fa-4033-acbe-bc8754ef2889",
                  "parentUUID": "05584b13-9bc3-4dcf-b93b-39466a94d382",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c6cefec-9286-42a2-904e-8f3c35e78268",
                "af0ced71-76fa-4033-acbe-bc8754ef2889"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1f361c28-2b64-46d5-852b-d8aa2465203f",
              "title": "https-certificate",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/core/src/__test__/https-certificate.spec.ts",
              "file": "https-certificate.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "https-certificate should be return https certificate config",
                  "title": "should be return https certificate config",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return https certificate config', () => {\n    const crtPath = path.resolve(__dirname, './utils/localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).not.toEqual('');\n    expect(config.key).not.toEqual('');\n  })",
                  "err": {},
                  "uuid": "78104b08-164e-45dc-b436-5f6fa1f820ac",
                  "parentUUID": "1f361c28-2b64-46d5-852b-d8aa2465203f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "https-certificate should be return https certificate config empty",
                  "title": "should be return https certificate config empty",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return https certificate config empty', () => {\n    const crtPath = path.resolve(__dirname, './utils/my-localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/my-localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).toEqual('');\n    expect(config.key).toEqual('');\n  })",
                  "err": {},
                  "uuid": "0ef17a98-7e7e-4e1d-a354-7c260555b3e0",
                  "parentUUID": "1f361c28-2b64-46d5-852b-d8aa2465203f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78104b08-164e-45dc-b436-5f6fa1f820ac",
                "0ef17a98-7e7e-4e1d-a354-7c260555b3e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "7d96d9a3-7d65-406f-9253-e5a97e2b8468",
              "title": "Public decorator",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/core/src/__test__/roles.decorator.spec.ts",
              "file": "roles.decorator.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "Public decorator should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', async () => {\n    expect(Roles('admin')).toBeDefined();\n    expect(Roles('admin', 'user')).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "1461890e-9182-41d6-b832-1d675e5bcae1",
                  "parentUUID": "7d96d9a3-7d65-406f-9253-e5a97e2b8468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "Public decorator should be return key",
                  "title": "should be return key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return key', async () => {\n    expect(ROLES_KEY).toBe('roles');\n  })",
                  "err": {},
                  "uuid": "9f043c00-e1ec-416b-a794-077376990748",
                  "parentUUID": "7d96d9a3-7d65-406f-9253-e5a97e2b8468",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1461890e-9182-41d6-b832-1d675e5bcae1",
                "9f043c00-e1ec-416b-a794-077376990748"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "de6d65c5-67f7-4c5e-b780-32f17aa3c8b6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9df829a6-0105-49c9-8484-663ec0a2b23e",
          "title": "@tresdoce-nestjs-toolkit/elk",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a685fdc5-37f2-454e-b6e9-362c16121a34",
              "title": "ElkModule",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/elk/src/__test__/elk.module.spec.ts",
              "file": "elk.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a9c47848-02eb-4419-9ed2-e01da6a4e426",
                  "title": "forRoot",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/elk/src/__test__/elk.module.spec.ts",
                  "file": "elk.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "ElkModule forRoot should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1205,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "87f69f52-2cef-463d-8f35-e1252af4a326",
                      "parentUUID": "a9c47848-02eb-4419-9ed2-e01da6a4e426",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "87f69f52-2cef-463d-8f35-e1252af4a326"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1205,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "3322794b-9a07-40b9-a82e-aac80d5dc662",
                  "title": "Interceptor",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/elk/src/__test__/elk.module.spec.ts",
                  "file": "elk.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "ElkModule Interceptor should be an ElkInterceptor instance to be defined",
                      "title": "should be an ElkInterceptor instance to be defined",
                      "timedOut": false,
                      "duration": 1013,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "13ff59f1-e76b-4882-92d2-d815fac7aa59",
                      "parentUUID": "3322794b-9a07-40b9-a82e-aac80d5dc662",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "ElkModule Interceptor should be create document in elasticsearch when return success string",
                      "title": "should be create document in elasticsearch when return success string",
                      "timedOut": false,
                      "duration": 1016,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    })",
                      "err": {},
                      "uuid": "ab03d449-a32c-4d46-b0a3-6e29c6d00c84",
                      "parentUUID": "3322794b-9a07-40b9-a82e-aac80d5dc662",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "ElkModule Interceptor should be create document in elasticsearch when return success object",
                      "title": "should be create document in elasticsearch when return success object",
                      "timedOut": false,
                      "duration": 1012,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    })",
                      "err": {},
                      "uuid": "e767b40b-8f69-412c-94d9-a04f3c4acaa9",
                      "parentUUID": "3322794b-9a07-40b9-a82e-aac80d5dc662",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "ElkModule Interceptor should be create document in elasticsearch when return success with parameters",
                      "title": "should be create document in elasticsearch when return success with parameters",
                      "timedOut": false,
                      "duration": 1013,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    })",
                      "err": {},
                      "uuid": "a9f94782-8cf8-4ec7-b23a-77e68a1cc67f",
                      "parentUUID": "3322794b-9a07-40b9-a82e-aac80d5dc662",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "ElkModule Interceptor should be create document in elasticsearch when return exception",
                      "title": "should be create document in elasticsearch when return exception",
                      "timedOut": false,
                      "duration": 1011,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    })",
                      "err": {},
                      "uuid": "0e613bd2-7aa5-44c8-8d16-990a5e168f6a",
                      "parentUUID": "3322794b-9a07-40b9-a82e-aac80d5dc662",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "ElkModule Interceptor should be create document in elasticsearch when return exception http",
                      "title": "should be create document in elasticsearch when return exception http",
                      "timedOut": false,
                      "duration": 1010,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    })",
                      "err": {},
                      "uuid": "296f0a8e-c484-4f4e-a236-3f84202fff7f",
                      "parentUUID": "3322794b-9a07-40b9-a82e-aac80d5dc662",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "13ff59f1-e76b-4882-92d2-d815fac7aa59",
                    "ab03d449-a32c-4d46-b0a3-6e29c6d00c84",
                    "e767b40b-8f69-412c-94d9-a04f3c4acaa9",
                    "a9f94782-8cf8-4ec7-b23a-77e68a1cc67f",
                    "0e613bd2-7aa5-44c8-8d16-990a5e168f6a",
                    "296f0a8e-c484-4f4e-a236-3f84202fff7f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6075,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f75d180a-c660-4ec0-8ae2-894a6c2ebc30",
                  "title": "Register",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/elk/src/__test__/elk.module.spec.ts",
                  "file": "elk.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "ElkModule Register should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1008,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "cc4983c3-fe1e-4481-a9cf-cc0b9b51bc5f",
                      "parentUUID": "f75d180a-c660-4ec0-8ae2-894a6c2ebc30",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cc4983c3-fe1e-4481-a9cf-cc0b9b51bc5f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1008,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "f471e369-484f-4720-b2a4-0c28c797e7dd",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9c8c88eb-eb2e-4e9d-acbe-6afedf7d0fe9",
          "title": "@tresdoce-nestjs-toolkit/filters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "867d1991-87f9-4d11-9afd-f98ac9132b16",
              "title": "filters",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
              "file": "exceptions.filter.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "14430bfb-8413-4796-a984-5361846578f6",
                  "title": "code exception",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                  "file": "exceptions.filter.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "filters code exception should map a regular code exception",
                      "title": "should map a regular code exception",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    })",
                      "err": {},
                      "uuid": "8caf335d-5923-41c7-abe1-a7d3098e219c",
                      "parentUUID": "14430bfb-8413-4796-a984-5361846578f6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8caf335d-5923-41c7-abe1-a7d3098e219c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "bb38bb12-ae98-4185-b2a6-6991079046b7",
                  "title": "HttpExceptions",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                  "file": "exceptions.filter.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "4706f446-e455-4cba-a167-fda655fdad7a",
                      "title": "Default HttpExceptions",
                      "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                      "file": "exceptions.filter.spec.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "fullTitle": "filters HttpExceptions Default HttpExceptions should map default exception when thrown with not parameters",
                          "title": "should map default exception when thrown with not parameters",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    })",
                          "err": {},
                          "uuid": "a84af9e9-fc45-4e87-a553-45a44fc0c66f",
                          "parentUUID": "4706f446-e455-4cba-a167-fda655fdad7a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Default HttpExceptions should map default exception when thrown with error details",
                          "title": "should map default exception when thrown with error details",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map default exception when thrown with error details', () => {\n        const status = HttpStatus.FORBIDDEN;\n        const message = 'not pass!';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n          detail: HttpStatus[status],\n        };\n        filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "dde0e5fe-5fd5-4c8b-ad4e-8d2bee1ce27b",
                          "parentUUID": "4706f446-e455-4cba-a167-fda655fdad7a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Default HttpExceptions should map default exception when thrown with error details and description",
                          "title": "should map default exception when thrown with error details and description",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map default exception when thrown with error details and description', () => {\n        const status = HttpStatus.FORBIDDEN;\n        const message = 'passing?';\n        const details = 'not pass!';\n\n        const expectation: IProblemDetail = {\n          message,\n          detail: details,\n          status,\n          code: HttpStatus[status],\n        };\n        filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "9ebf1908-c9f4-4ce1-8165-fd4c0703fda1",
                          "parentUUID": "4706f446-e455-4cba-a167-fda655fdad7a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Default HttpExceptions should map HttpException response when called with an object",
                          "title": "should map HttpException response when called with an object",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "fdfb7251-c665-4adb-8492-d683fd79733a",
                          "parentUUID": "4706f446-e455-4cba-a167-fda655fdad7a",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a84af9e9-fc45-4e87-a553-45a44fc0c66f",
                        "dde0e5fe-5fd5-4c8b-ad4e-8d2bee1ce27b",
                        "9ebf1908-c9f4-4ce1-8165-fd4c0703fda1",
                        "fdfb7251-c665-4adb-8492-d683fd79733a"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 4,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 5000
                    },
                    {
                      "uuid": "58ae164d-6e3f-4499-a10b-d993bc105bcc",
                      "title": "Generic HttpException",
                      "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                      "file": "exceptions.filter.spec.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "fullTitle": "filters HttpExceptions Generic HttpException should map HttpException response when called with a string",
                          "title": "should map HttpException response when called with a string",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "f90446eb-7a92-4387-b3d2-139bbdf1f99a",
                          "parentUUID": "58ae164d-6e3f-4499-a10b-d993bc105bcc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Generic HttpException should map HttpException response when called with an object",
                          "title": "should map HttpException response when called with an object",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "735e5432-68e8-4964-a6a8-a675d2622abd",
                          "parentUUID": "58ae164d-6e3f-4499-a10b-d993bc105bcc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Generic HttpException should map HttpException response when called with an object with empty message",
                          "title": "should map HttpException response when called with an object with empty message",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "9d4b535b-3af3-496a-b036-1f4533668012",
                          "parentUUID": "58ae164d-6e3f-4499-a10b-d993bc105bcc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "fullTitle": "filters HttpExceptions Generic HttpException should map HttpException response when called with an array",
                          "title": "should map HttpException response when called with an array",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      })",
                          "err": {},
                          "uuid": "57fe92d8-4dd8-4993-9577-cdb6efc8cf21",
                          "parentUUID": "58ae164d-6e3f-4499-a10b-d993bc105bcc",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f90446eb-7a92-4387-b3d2-139bbdf1f99a",
                        "735e5432-68e8-4964-a6a8-a675d2622abd",
                        "9d4b535b-3af3-496a-b036-1f4533668012",
                        "57fe92d8-4dd8-4993-9577-cdb6efc8cf21"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 5,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 5000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "eda5e886-b60b-42d5-97a0-7ba0eb40530a",
                  "title": "when used outside a module",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                  "file": "exceptions.filter.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "filters when used outside a module should map default exception when thrown with not parameters",
                      "title": "should map default exception when thrown with not parameters",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    })",
                      "err": {},
                      "uuid": "e5edbbd4-b2ab-4b9c-9325-e70126df2ada",
                      "parentUUID": "eda5e886-b60b-42d5-97a0-7ba0eb40530a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e5edbbd4-b2ab-4b9c-9325-e70126df2ada"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "b638bb26-bbd4-4fa5-a810-241b4163a4bc",
                  "title": "configuration is defined with values",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/exceptions.filter.spec.ts",
                  "file": "exceptions.filter.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "filters configuration is defined with values should be return application info",
                      "title": "should be return application info",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    })",
                      "err": {},
                      "uuid": "8cb2eb25-ee5c-49f2-9615-c041f66f2d59",
                      "parentUUID": "b638bb26-bbd4-4fa5-a810-241b4163a4bc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8cb2eb25-ee5c-49f2-9615-c041f66f2d59"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "5d7c10c4-6db4-4a13-844c-8c1ae98d473f",
              "title": "error.utils",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/filters/src/__test__/error.utils.spec.ts",
              "file": "error.utils.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "error.utils should be return code in string",
                  "title": "should be return code in string",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return code in string', () => {\n    const code = getCode({ error: HttpStatus['TEST_ERROR'] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  })",
                  "err": {},
                  "uuid": "c1d2c79f-ca2a-4845-b728-b8f44cbcf49b",
                  "parentUUID": "5d7c10c4-6db4-4a13-844c-8c1ae98d473f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "error.utils should be return code in string obj",
                  "title": "should be return code in string obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return code in string obj', () => {\n    const code = getCode({ error: HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  })",
                  "err": {},
                  "uuid": "da6d8da0-b729-4bd7-8813-8725a3c975f3",
                  "parentUUID": "5d7c10c4-6db4-4a13-844c-8c1ae98d473f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "error.utils should be return code in string",
                  "title": "should be return code in string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return code in string', () => {\n    const code = getCode({ error: HttpStatus['TEST_ERROR'] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  })",
                  "err": {},
                  "uuid": "995d5e2b-6d4e-489c-97ed-a6d3b462dc8b",
                  "parentUUID": "5d7c10c4-6db4-4a13-844c-8c1ae98d473f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1d2c79f-ca2a-4845-b728-b8f44cbcf49b",
                "da6d8da0-b729-4bd7-8813-8725a3c975f3",
                "995d5e2b-6d4e-489c-97ed-a6d3b462dc8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "271dd0a4-b551-4974-958c-0702f3320059",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "442d6836-3143-491b-b476-ede11991d14e",
          "title": "@tresdoce-nestjs-toolkit/health",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "53017b3a-a0d3-4cb3-8a0b-e154b4397bbf",
              "title": "Health",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/health/src/__test__/readiness.controller.spec.ts",
              "file": "readiness.controller.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "19309844-8611-4510-b59f-01b53dd7c3ee",
                  "title": "Ready controller - extend config",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/health/src/__test__/readiness.controller.spec.ts",
                  "file": "readiness.controller.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Health Ready controller - extend config should be defined with extend config",
                      "title": "should be defined with extend config",
                      "timedOut": false,
                      "duration": 1014,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "1c73855c-7374-4dad-84fb-4385d07e57cf",
                      "parentUUID": "19309844-8611-4510-b59f-01b53dd7c3ee",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Health Ready controller - extend config should be return up services with extend config",
                      "title": "should be return up services with extend config",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    })",
                      "err": {},
                      "uuid": "5bd8bb98-a306-4dda-bf68-0e7b0b28d2ee",
                      "parentUUID": "19309844-8611-4510-b59f-01b53dd7c3ee",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1c73855c-7374-4dad-84fb-4385d07e57cf",
                    "5bd8bb98-a306-4dda-bf68-0e7b0b28d2ee"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1020,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "b82b81ba-0870-47b7-9b07-4081addd0117",
                  "title": "Ready controller - simple config",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/health/src/__test__/readiness.controller.spec.ts",
                  "file": "readiness.controller.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Health Ready controller - simple config should be defined with simple config",
                      "title": "should be defined with simple config",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "76a10f42-e26f-458c-994e-8079bde64056",
                      "parentUUID": "b82b81ba-0870-47b7-9b07-4081addd0117",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Health Ready controller - simple config should be return up services with simple config",
                      "title": "should be return up services with simple config",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    })",
                      "err": {},
                      "uuid": "085e8f84-e08d-4837-b9fd-12576de7b5e5",
                      "parentUUID": "b82b81ba-0870-47b7-9b07-4081addd0117",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "76a10f42-e26f-458c-994e-8079bde64056",
                    "085e8f84-e08d-4837-b9fd-12576de7b5e5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 9,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ecc52ac2-775d-4bee-9f8d-1deca9ae4bcd",
              "title": "HealthModule",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/health/src/__test__/health.module.spec.ts",
              "file": "health.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "HealthModule should be define",
                  "title": "should be define",
                  "timedOut": false,
                  "duration": 531,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be define', async () => {\n    expect(app).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "11fa2900-a6ca-44bc-9d47-6e3a75958760",
                  "parentUUID": "ecc52ac2-775d-4bee-9f8d-1deca9ae4bcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "HealthModule should be return status up",
                  "title": "should be return status up",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return status up', async () => {\n    expect(livenessController.getLiveness()).toEqual({ status: 'up' });\n  })",
                  "err": {},
                  "uuid": "55539232-b248-4bb9-b218-99d8b67bc7e3",
                  "parentUUID": "ecc52ac2-775d-4bee-9f8d-1deca9ae4bcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "HealthModule should be return readiness services",
                  "title": "should be return readiness services",
                  "timedOut": false,
                  "duration": 1319,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return readiness services', async () => {\n    const result = await readinessController.check();\n    expect(result).toHaveProperty('details');\n    expect(result).toHaveProperty('error');\n    expect(result).toHaveProperty('info');\n    expect(result).toHaveProperty('status');\n  })",
                  "err": {},
                  "uuid": "3652dcf9-5775-4fce-a00b-e9a5db50ca92",
                  "parentUUID": "ecc52ac2-775d-4bee-9f8d-1deca9ae4bcd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11fa2900-a6ca-44bc-9d47-6e3a75958760",
                "55539232-b248-4bb9-b218-99d8b67bc7e3",
                "3652dcf9-5775-4fce-a00b-e9a5db50ca92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1862,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "2a0a0102-e944-4e4e-babf-11dba7a0038e",
              "title": "Health - Live controller",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/health/src/__test__/liveness.controller.spec.ts",
              "file": "liveness.controller.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "Health - Live controller should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', () => {\n    expect(controller).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "196ed044-6776-46bd-8cb0-39f7c2fb1753",
                  "parentUUID": "2a0a0102-e944-4e4e-babf-11dba7a0038e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "Health - Live controller should be return up liveness",
                  "title": "should be return up liveness",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return up liveness', () => {\n    expect(controller.getLiveness()).toEqual({ status: 'up' });\n  })",
                  "err": {},
                  "uuid": "d3c634c9-76e1-4585-a3aa-6d5314c659b5",
                  "parentUUID": "2a0a0102-e944-4e4e-babf-11dba7a0038e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "196ed044-6776-46bd-8cb0-39f7c2fb1753",
                "d3c634c9-76e1-4585-a3aa-6d5314c659b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "83a5b072-4bf3-4b8a-bf3e-2f9b47602e3c",
              "title": "healthConstants",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/health/src/__test__/constants.spec.ts",
              "file": "constants.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "healthConstants should be return exclude to prefix global",
                  "title": "should be return exclude to prefix global",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return exclude to prefix global', async () => {\n    expect(controllersExcludes).toEqual(expect.any(Array));\n    expect(controllersExcludes).toMatchObject([\n      {\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      },\n      {\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      },\n    ]);\n  })",
                  "err": {},
                  "uuid": "2d0ff38e-66ac-454d-a010-676a23fb978f",
                  "parentUUID": "83a5b072-4bf3-4b8a-bf3e-2f9b47602e3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d0ff38e-66ac-454d-a010-676a23fb978f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "a11649cd-90b7-4446-9606-e9e452b871ff",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "16cb5026-df32-485b-abf5-2d21ca90063c",
          "title": "@tresdoce-nestjs-toolkit/http-client",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "530ab61c-d2e3-4550-834c-315f58b0b7be",
              "title": "HttpService",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/http-client/src/__test__/http.service.spec.ts",
              "file": "http.service.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "HttpService should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 143,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  })",
                  "err": {},
                  "uuid": "365edcd0-05fe-4e63-885a-9992fd8f27c1",
                  "parentUUID": "530ab61c-d2e3-4550-834c-315f58b0b7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "HttpService should be return status 200 - request",
                  "title": "should be return status 200 - request",
                  "timedOut": false,
                  "duration": 1276,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  })",
                  "err": {},
                  "uuid": "85db2f5d-7466-47d4-aabb-54ae3374ac51",
                  "parentUUID": "530ab61c-d2e3-4550-834c-315f58b0b7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "HttpService should be return status 200 - get",
                  "title": "should be return status 200 - get",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  })",
                  "err": {},
                  "uuid": "3fa874ec-42b8-447e-ac9b-e0d3ac524f0e",
                  "parentUUID": "530ab61c-d2e3-4550-834c-315f58b0b7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "HttpService should be return status 201 - post",
                  "title": "should be return status 201 - post",
                  "timedOut": false,
                  "duration": 487,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  })",
                  "err": {},
                  "uuid": "cf6efc07-34f7-429b-951c-a23153331e1f",
                  "parentUUID": "530ab61c-d2e3-4550-834c-315f58b0b7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "HttpService should be return status 200 - get by id",
                  "title": "should be return status 200 - get by id",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  })",
                  "err": {},
                  "uuid": "5c53d1f1-99a4-4499-8249-66de8c6c94e8",
                  "parentUUID": "530ab61c-d2e3-4550-834c-315f58b0b7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "HttpService should be return status 200 - put",
                  "title": "should be return status 200 - put",
                  "timedOut": false,
                  "duration": 412,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  })",
                  "err": {},
                  "uuid": "479373cd-1995-4d1e-971b-ade7a6f0d6b0",
                  "parentUUID": "530ab61c-d2e3-4550-834c-315f58b0b7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "HttpService should be return status 200 - delete",
                  "title": "should be return status 200 - delete",
                  "timedOut": false,
                  "duration": 416,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  })",
                  "err": {},
                  "uuid": "9f2fd838-e8eb-4540-bf66-acc379b2e66b",
                  "parentUUID": "530ab61c-d2e3-4550-834c-315f58b0b7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "HttpService should be return status 200 - patch",
                  "title": "should be return status 200 - patch",
                  "timedOut": false,
                  "duration": 505,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  })",
                  "err": {},
                  "uuid": "b541faf5-48e0-4123-aae4-73f2b7c6c83f",
                  "parentUUID": "530ab61c-d2e3-4550-834c-315f58b0b7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "HttpService should be return status 200 - head",
                  "title": "should be return status 200 - head",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  })",
                  "err": {},
                  "uuid": "fd4918d4-b801-4be5-8c7b-1f66894c6d7a",
                  "parentUUID": "530ab61c-d2e3-4550-834c-315f58b0b7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "HttpService should be return error",
                  "title": "should be return error",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  })",
                  "err": {},
                  "uuid": "cde938fc-e68e-4355-908d-ff34e28a55d0",
                  "parentUUID": "530ab61c-d2e3-4550-834c-315f58b0b7be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "365edcd0-05fe-4e63-885a-9992fd8f27c1",
                "85db2f5d-7466-47d4-aabb-54ae3374ac51",
                "3fa874ec-42b8-447e-ac9b-e0d3ac524f0e",
                "cf6efc07-34f7-429b-951c-a23153331e1f",
                "5c53d1f1-99a4-4499-8249-66de8c6c94e8",
                "479373cd-1995-4d1e-971b-ade7a6f0d6b0",
                "9f2fd838-e8eb-4540-bf66-acc379b2e66b",
                "b541faf5-48e0-4123-aae4-73f2b7c6c83f",
                "fd4918d4-b801-4be5-8c7b-1f66894c6d7a",
                "cde938fc-e68e-4355-908d-ff34e28a55d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3618,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ba1079c7-bfda-4923-8e41-36e9ceae3950",
              "title": "HttpModule",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/http-client/src/__test__/http.module.spec.ts",
              "file": "http.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "f66b09aa-55cd-4772-ad90-153545ce25de",
                  "title": "registerAsync useFactory",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/http-client/src/__test__/http.module.spec.ts",
                  "file": "http.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "HttpModule registerAsync useFactory should be define",
                      "title": "should be define",
                      "timedOut": false,
                      "duration": 71,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define', async () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "d22344ab-edd0-4a50-a2b2-500febdcf22b",
                      "parentUUID": "f66b09aa-55cd-4772-ad90-153545ce25de",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d22344ab-edd0-4a50-a2b2-500febdcf22b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 71,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "a482f47b-ffbe-4cb2-ad00-5a97afc544aa",
                  "title": "registerAsync useClass",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/http-client/src/__test__/http.module.spec.ts",
                  "file": "http.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "HttpModule registerAsync useClass should be define",
                      "title": "should be define",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define', async () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "9b498459-93c7-4cd8-b2a3-2b615113c1b0",
                      "parentUUID": "a482f47b-ffbe-4cb2-ad00-5a97afc544aa",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9b498459-93c7-4cd8-b2a3-2b615113c1b0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 8,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f29dd3ac-130a-4735-941d-9940d733a2e0",
                  "title": "registerAsync useExisting",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/http-client/src/__test__/http.module.spec.ts",
                  "file": "http.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "HttpModule registerAsync useExisting should be define",
                      "title": "should be define",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define', async () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "d5686916-50cc-4411-be72-994e759044dc",
                      "parentUUID": "f29dd3ac-130a-4735-941d-9940d733a2e0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d5686916-50cc-4411-be72-994e759044dc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "72ad376d-a918-43d4-a710-909982182962",
                  "title": "register",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/http-client/src/__test__/http.module.spec.ts",
                  "file": "http.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "HttpModule register should be define",
                      "title": "should be define",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define', async () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "b23a0335-1b74-41bb-a161-fd8f995468fa",
                      "parentUUID": "72ad376d-a918-43d4-a710-909982182962",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b23a0335-1b74-41bb-a161-fd8f995468fa"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "12fcf928-3cb6-45a9-9088-29919a46ba20",
              "title": "HttpInterceptor",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/http-client/src/__test__/http.interceptor.spec.ts",
              "file": "http.interceptor.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "HttpInterceptor should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 65,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "0b9d4ab4-e9a3-40d3-8dbb-f6aeb15f860c",
                  "parentUUID": "12fcf928-3cb6-45a9-9088-29919a46ba20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "HttpInterceptor should be intercept and pass headers",
                  "title": "should be intercept and pass headers",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be intercept and pass headers', async () => {\n    await interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n  })",
                  "err": {},
                  "uuid": "6e3963de-b0d9-45ae-af76-e25ea548fbfc",
                  "parentUUID": "12fcf928-3cb6-45a9-9088-29919a46ba20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b9d4ab4-e9a3-40d3-8dbb-f6aeb15f860c",
                "6e3963de-b0d9-45ae-af76-e25ea548fbfc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 70,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "00f3071b-5245-4453-8b27-695f34081ebe",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "65787d00-4c91-4e0f-aafa-76906ccdf552",
          "title": "@tresdoce-nestjs-toolkit/mailer",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f177cdde-45ab-4eec-a969-c9dd5a912210",
              "title": "MailerService",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/mailer/src/__test__/mailer.service.spec.ts",
              "file": "mailer.service.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "MailerService should not be defined if a transport is not provided",
                  "title": "should not be defined if a transport is not provided",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  })",
                  "err": {},
                  "uuid": "2dbd11d7-8f7e-4fa6-a514-4ca074af3efa",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should accept a smtp transport string",
                  "title": "should accept a smtp transport string",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  })",
                  "err": {},
                  "uuid": "acbc4d14-46e6-48db-a1ae-055482451f69",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should accept a smtp transports string",
                  "title": "should accept a smtp transports string",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  })",
                  "err": {},
                  "uuid": "5591c889-6b00-4ef9-8bea-81ddcc5a4d2e",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should accept smtp transport options",
                  "title": "should accept smtp transport options",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  })",
                  "err": {},
                  "uuid": "a19b91e9-2b81-4e3e-a105-ec85bfc6e49a",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should accept a smtp transport instance",
                  "title": "should accept a smtp transport instance",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  })",
                  "err": {},
                  "uuid": "e35b00d9-e066-45f3-9691-71a004b17974",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should send emails with nodemailer",
                  "title": "should send emails with nodemailer",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  })",
                  "err": {},
                  "uuid": "c62a3cdd-a018-4b5a-b8f1-cb001b549c85",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should send emails with nodemailer transports",
                  "title": "should send emails with nodemailer transports",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  })",
                  "err": {},
                  "uuid": "172a2b2d-361e-4513-a67f-90eb32c0009f",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should send emails with nodemailer with different transports name",
                  "title": "should send emails with nodemailer with different transports name",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  })",
                  "err": {},
                  "uuid": "975f0fba-904b-4149-90e0-39da0284f7b3",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should send emails with nodemailer without transports",
                  "title": "should send emails with nodemailer without transports",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  })",
                  "err": {},
                  "uuid": "8704ce9f-aa40-426e-861c-6275ead271a2",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should use mailerOptions.defaults when send emails",
                  "title": "should use mailerOptions.defaults when send emails",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  })",
                  "err": {},
                  "uuid": "de1d6644-e008-4017-8b8d-c3d30172799b",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should use custom transport to send mail",
                  "title": "should use custom transport to send mail",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  })",
                  "err": {},
                  "uuid": "9fdac0dc-6c64-487e-9ecb-1e003bd62c36",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter",
                  "title": "should compile template with the handlebars adapter",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "b69ca98d-a700-4d14-8d56-47fe0a58838a",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter with relative path",
                  "title": "should compile template with the handlebars adapter with relative path",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "770b655c-159f-4e00-8e43-ff19ab4ee9e1",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter with error template path",
                  "title": "should compile template with the handlebars adapter with error template path",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  })",
                  "err": {},
                  "uuid": "cfd66f23-dd98-497f-a05d-16f30a6ee8ef",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter with disabled inline-css",
                  "title": "should compile template with the handlebars adapter with disabled inline-css",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "b1af0b10-3947-4afd-9fa9-8b7607eed075",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the handlebars adapter with enabled inline-css and media query",
                  "title": "should compile template with the handlebars adapter with enabled inline-css and media query",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "c5db53fb-00e5-494d-9f0d-16170dd45e44",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the pug adapter",
                  "title": "should compile template with the pug adapter",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "98e5c72a-89ef-4920-b083-730b7ce84aa4",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the pug adapter with relative path",
                  "title": "should compile template with the pug adapter with relative path",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "c0814411-6b05-4354-8459-8f9d78965229",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the pug adapter with error to read template",
                  "title": "should compile template with the pug adapter with error to read template",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  })",
                  "err": {},
                  "uuid": "d26a30df-bd23-457d-bc8c-9eff2e255223",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the pug adapter without inline css",
                  "title": "should compile template with the pug adapter without inline css",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  })",
                  "err": {},
                  "uuid": "c7adcd5f-369e-434b-84b1-7a2e6aca7d53",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter",
                  "title": "should compile template with the ejs adapter",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "c6e0144a-44c1-4520-82a3-df451cee7c26",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter with error to read template",
                  "title": "should compile template with the ejs adapter with error to read template",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  })",
                  "err": {},
                  "uuid": "cddf7586-6128-499a-aabe-8ee26fac5739",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter read template relative url",
                  "title": "should compile template with the ejs adapter read template relative url",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "53db73e2-0525-43c1-9040-c5b0d2bd8866",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter without css inline",
                  "title": "should compile template with the ejs adapter without css inline",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  })",
                  "err": {},
                  "uuid": "a5de1b48-e70d-46c9-8161-b140bbe7bd8f",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "MailerService should compile template with the ejs adapter with css inline",
                  "title": "should compile template with the ejs adapter with css inline",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  })",
                  "err": {},
                  "uuid": "113b3826-8ba0-43f4-af99-ecd6667a65f5",
                  "parentUUID": "f177cdde-45ab-4eec-a969-c9dd5a912210",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2dbd11d7-8f7e-4fa6-a514-4ca074af3efa",
                "acbc4d14-46e6-48db-a1ae-055482451f69",
                "5591c889-6b00-4ef9-8bea-81ddcc5a4d2e",
                "a19b91e9-2b81-4e3e-a105-ec85bfc6e49a",
                "e35b00d9-e066-45f3-9691-71a004b17974",
                "c62a3cdd-a018-4b5a-b8f1-cb001b549c85",
                "172a2b2d-361e-4513-a67f-90eb32c0009f",
                "975f0fba-904b-4149-90e0-39da0284f7b3",
                "8704ce9f-aa40-426e-861c-6275ead271a2",
                "de1d6644-e008-4017-8b8d-c3d30172799b",
                "9fdac0dc-6c64-487e-9ecb-1e003bd62c36",
                "b69ca98d-a700-4d14-8d56-47fe0a58838a",
                "770b655c-159f-4e00-8e43-ff19ab4ee9e1",
                "cfd66f23-dd98-497f-a05d-16f30a6ee8ef",
                "b1af0b10-3947-4afd-9fa9-8b7607eed075",
                "c5db53fb-00e5-494d-9f0d-16170dd45e44",
                "98e5c72a-89ef-4920-b083-730b7ce84aa4",
                "c0814411-6b05-4354-8459-8f9d78965229",
                "d26a30df-bd23-457d-bc8c-9eff2e255223",
                "c7adcd5f-369e-434b-84b1-7a2e6aca7d53",
                "c6e0144a-44c1-4520-82a3-df451cee7c26",
                "cddf7586-6128-499a-aabe-8ee26fac5739",
                "53db73e2-0525-43c1-9040-c5b0d2bd8866",
                "a5de1b48-e70d-46c9-8161-b140bbe7bd8f",
                "113b3826-8ba0-43f4-af99-ecd6667a65f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 162,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a65f5095-e1c5-4b89-a4df-e8303ec01ea4",
              "title": "MailerModule",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/mailer/src/__test__/mailer.module.spec.ts",
              "file": "mailer.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "6691dfda-db17-43bf-b119-2b79ca761cf5",
                  "title": "forRoot",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/mailer/src/__test__/mailer.module.spec.ts",
                  "file": "mailer.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "MailerModule forRoot should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 177,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "16efecef-6962-4eb8-a982-1a57368d3343",
                      "parentUUID": "6691dfda-db17-43bf-b119-2b79ca761cf5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "16efecef-6962-4eb8-a982-1a57368d3343"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 177,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "8b0128f8-2370-472a-a5bd-7b18ef0556c4",
                  "title": "forRootAsync",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/mailer/src/__test__/mailer.module.spec.ts",
                  "file": "mailer.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "MailerModule forRootAsync should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(app).toBeDefined();\n    })",
                      "err": {},
                      "uuid": "fdf8cec3-3d15-4d01-b672-2858d6614e7e",
                      "parentUUID": "8b0128f8-2370-472a-a5bd-7b18ef0556c4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fdf8cec3-3d15-4d01-b672-2858d6614e7e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 8,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "7d29f424-7e66-4c1f-ae3e-8da4168c37c2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "075e3eb8-98aa-4f8f-9569-4de4de495a28",
          "title": "@tresdoce-nestjs-toolkit/redis",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
              "title": "RedisService",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.service.spec.ts",
              "file": "redis.service.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "RedisService should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 169,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000)",
                  "err": {},
                  "uuid": "3e5462a7-4bb9-4f22-8117-49015f1c8cd2",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return echo",
                  "title": "should be return echo",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  })",
                  "err": {},
                  "uuid": "2a0a12ba-938f-46d5-9ee4-367d2f8e8476",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return false if key dont exist in redis",
                  "title": "should be return false if key dont exist in redis",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  })",
                  "err": {},
                  "uuid": "1275c3fa-293c-4b65-9b5d-ea247ed2efa4",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return OK when set value in redis",
                  "title": "should be return OK when set value in redis",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  })",
                  "err": {},
                  "uuid": "6f0658fd-e12a-4d00-8e57-ec2b1fd99574",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return value of key",
                  "title": "should be return value of key",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  })",
                  "err": {},
                  "uuid": "f3040472-b1ea-4d14-87bf-2273fad6aea6",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return true if key exist in redis",
                  "title": "should be return true if key exist in redis",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  })",
                  "err": {},
                  "uuid": "841efc08-d4b0-4e41-86b8-c43daa2bd99d",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be set value in redis with expiration date",
                  "title": "should be set value in redis with expiration date",
                  "timedOut": false,
                  "duration": 3014,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  })",
                  "err": {},
                  "uuid": "19511ddd-47ed-4a48-b044-2834e167ad83",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return true when copy key",
                  "title": "should be return true when copy key",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  })",
                  "err": {},
                  "uuid": "a587064b-5ed1-4ed4-938d-5c0743e0d13f",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return false when copy key",
                  "title": "should be return false when copy key",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  })",
                  "err": {},
                  "uuid": "ca0bbb14-1c40-4457-b704-4fcee13c5f0d",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be rename a key",
                  "title": "should be rename a key",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  })",
                  "err": {},
                  "uuid": "ccf2a28f-92e0-4e40-aaed-9481031bc5b2",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return false when delete a key",
                  "title": "should be return false when delete a key",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  })",
                  "err": {},
                  "uuid": "eea902e8-11b0-4ae0-b807-dcf4c44a6892",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be return true when delete a key",
                  "title": "should be return true when delete a key",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  })",
                  "err": {},
                  "uuid": "70221c71-30a5-4fe5-81ea-80291c902ed5",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "RedisService should be flush all",
                  "title": "should be flush all",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  })",
                  "err": {},
                  "uuid": "26630d59-72c8-4ed9-98f3-d21be6f607d3",
                  "parentUUID": "785af45a-0f6f-4dd0-b45f-22c155c2bc36",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e5462a7-4bb9-4f22-8117-49015f1c8cd2",
                "2a0a12ba-938f-46d5-9ee4-367d2f8e8476",
                "1275c3fa-293c-4b65-9b5d-ea247ed2efa4",
                "6f0658fd-e12a-4d00-8e57-ec2b1fd99574",
                "f3040472-b1ea-4d14-87bf-2273fad6aea6",
                "841efc08-d4b0-4e41-86b8-c43daa2bd99d",
                "19511ddd-47ed-4a48-b044-2834e167ad83",
                "a587064b-5ed1-4ed4-938d-5c0743e0d13f",
                "ca0bbb14-1c40-4457-b704-4fcee13c5f0d",
                "ccf2a28f-92e0-4e40-aaed-9481031bc5b2",
                "eea902e8-11b0-4ae0-b807-dcf4c44a6892",
                "70221c71-30a5-4fe5-81ea-80291c902ed5",
                "26630d59-72c8-4ed9-98f3-d21be6f607d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3298,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c5978fa4-757a-43fa-9a7e-808db698c869",
              "title": "RedisModule",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
              "file": "redis.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "6f35c6b1-4959-44e5-9a70-2a21c7e01be9",
                  "title": "with auth",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
                  "file": "redis.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "25f3c125-3013-4841-9f34-8994f04684a1",
                      "title": "forRootAsync",
                      "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
                      "file": "redis.module.spec.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "fullTitle": "RedisModule with auth forRootAsync should be defined",
                          "title": "should be defined",
                          "timedOut": false,
                          "duration": 91,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000)",
                          "err": {},
                          "uuid": "08293038-6c36-4eff-9906-f9044610c2b1",
                          "parentUUID": "25f3c125-3013-4841-9f34-8994f04684a1",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "08293038-6c36-4eff-9906-f9044610c2b1"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 91,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 5000
                    },
                    {
                      "uuid": "03b58148-79eb-4794-ba4f-f6175065e085",
                      "title": "register",
                      "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
                      "file": "redis.module.spec.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "fullTitle": "RedisModule with auth register should be defined",
                          "title": "should be defined",
                          "timedOut": false,
                          "duration": 10,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000)",
                          "err": {},
                          "uuid": "35dfb94c-a4ee-4e31-aab3-9a73d0678893",
                          "parentUUID": "03b58148-79eb-4794-ba4f-f6175065e085",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "35dfb94c-a4ee-4e31-aab3-9a73d0678893"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 10,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 5000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "2de9781b-3fa5-46a1-8ff4-56221e3fd908",
                  "title": "without auth",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/redis/src/__test__/redis.module.spec.ts",
                  "file": "redis.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "RedisModule without auth should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000)",
                      "err": {},
                      "uuid": "871e108f-a5fc-4b22-810d-2d6f0640022f",
                      "parentUUID": "2de9781b-3fa5-46a1-8ff4-56221e3fd908",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "871e108f-a5fc-4b22-810d-2d6f0640022f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 9,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "b3c6094a-e03e-4938-8ae3-ab9109ae3827",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a553d777-2b01-4b5d-881b-3a30f86f12fd",
          "title": "@tresdoce-nestjs-toolkit/response-parser",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "57df9db0-2d8a-406e-86f9-9ac918a10494",
              "title": "ResponseInterceptor",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/response-parser/src/__test__/response.interceptor.spec.ts",
              "file": "response.interceptor.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "ResponseInterceptor should be defined",
                  "title": "should be defined",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  })",
                  "err": {},
                  "uuid": "b3278012-fdad-460e-85e2-b6a6b24dd7d5",
                  "parentUUID": "57df9db0-2d8a-406e-86f9-9ac918a10494",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "ResponseInterceptor should return an ResponseInterceptor instance simple entity",
                  "title": "should return an ResponseInterceptor instance simple entity",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should return an ResponseInterceptor instance simple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserResponse)),\n    };\n\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject(fixtureUserResponse);\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  })",
                  "err": {},
                  "uuid": "60954ece-afc9-47be-bb4c-9fe214156b41",
                  "parentUUID": "57df9db0-2d8a-406e-86f9-9ac918a10494",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "ResponseInterceptor should return an ResponseInterceptor instance multiple entity",
                  "title": "should return an ResponseInterceptor instance multiple entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should return an ResponseInterceptor instance multiple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserArrayResponse)),\n    };\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject({ data: fixtureUserArrayResponse });\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  })",
                  "err": {},
                  "uuid": "f7eed4e6-8ea8-4d26-9d01-2027f05e398e",
                  "parentUUID": "57df9db0-2d8a-406e-86f9-9ac918a10494",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3278012-fdad-460e-85e2-b6a6b24dd7d5",
                "60954ece-afc9-47be-bb4c-9fe214156b41",
                "f7eed4e6-8ea8-4d26-9d01-2027f05e398e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "1d2afc1d-8ff7-4adb-9dec-f7464ebac8bd",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f5531549-1035-4931-abd9-8c036767e32e",
          "title": "@tresdoce-nestjs-toolkit/test-utils",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7d92cb82-e6ca-4971-a3b1-a3cd8e392d7d",
              "title": "globalTestContainers",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/globalTestContainers.spec.ts",
              "file": "globalTestContainers.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "globalTestContainers should be initialize service from docker-compose.yml",
                  "title": "should be initialize service from docker-compose.yml",
                  "timedOut": false,
                  "duration": 12433,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be initialize service from docker-compose.yml', async () => {\n    const services = ['mongo'];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  })",
                  "err": {},
                  "uuid": "32f1c5a7-12cb-4d1b-82c3-8a7d1c492c86",
                  "parentUUID": "7d92cb82-e6ca-4971-a3b1-a3cd8e392d7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "globalTestContainers should be initialize all services from docker-compose.yml",
                  "title": "should be initialize all services from docker-compose.yml",
                  "timedOut": false,
                  "duration": 13389,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be initialize all services from docker-compose.yml', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  })",
                  "err": {},
                  "uuid": "140d8e43-1600-445d-a837-7db47964bdf7",
                  "parentUUID": "7d92cb82-e6ca-4971-a3b1-a3cd8e392d7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "globalTestContainers should be initialize services from docker-compose.yml in default path and filename",
                  "title": "should be initialize services from docker-compose.yml in default path and filename",
                  "timedOut": false,
                  "duration": 11866,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be initialize services from docker-compose.yml in default path and filename', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(services)();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  })",
                  "err": {},
                  "uuid": "ca37d420-c5d4-493f-abd5-18fd1ef439ef",
                  "parentUUID": "7d92cb82-e6ca-4971-a3b1-a3cd8e392d7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32f1c5a7-12cb-4d1b-82c3-8a7d1c492c86",
                "140d8e43-1600-445d-a837-7db47964bdf7",
                "ca37d420-c5d4-493f-abd5-18fd1ef439ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 37688,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3a557e70-51db-49da-b599-544dc84189b4",
              "title": "TestContainers",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
              "file": "testcontainer.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "d2d45b5c-1f18-4651-b316-39680f7fcfe7",
                  "title": "Redis",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers Redis should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "5426ceed-a45d-4d55-9eb8-e6ed8a5370c5",
                      "parentUUID": "d2d45b5c-1f18-4651-b316-39680f7fcfe7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return exception of instance",
                      "title": "should be return exception of instance",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    })",
                      "err": {},
                      "uuid": "3a3d2b3d-f4df-4dfd-b5b1-3b6ec0d9f247",
                      "parentUUID": "d2d45b5c-1f18-4651-b316-39680f7fcfe7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be get instance of test container",
                      "title": "should be get instance of test container",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "e6673d25-b341-4081-b0da-dcc6ffd2b021",
                      "parentUUID": "d2d45b5c-1f18-4651-b316-39680f7fcfe7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return envs of instance",
                      "title": "should be return envs of instance",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    })",
                      "err": {},
                      "uuid": "57ec5c5c-f878-4978-adbb-ff113f5aea72",
                      "parentUUID": "d2d45b5c-1f18-4651-b316-39680f7fcfe7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return container instance",
                      "title": "should be return container instance",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    })",
                      "err": {},
                      "uuid": "a7468be0-c2a1-428d-b115-b3308bd69d3b",
                      "parentUUID": "d2d45b5c-1f18-4651-b316-39680f7fcfe7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return host of container instance",
                      "title": "should be return host of container instance",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    })",
                      "err": {},
                      "uuid": "a610b125-574a-44d8-904b-34de09a397ec",
                      "parentUUID": "d2d45b5c-1f18-4651-b316-39680f7fcfe7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return name of container instance",
                      "title": "should be return name of container instance",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    })",
                      "err": {},
                      "uuid": "35a49654-f817-46ea-9dd4-c0a8058904cd",
                      "parentUUID": "d2d45b5c-1f18-4651-b316-39680f7fcfe7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TestContainers Redis should be return mapped port",
                      "title": "should be return mapped port",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    })",
                      "err": {},
                      "uuid": "f78ac095-faa7-4ced-a77a-6d46e54fee52",
                      "parentUUID": "d2d45b5c-1f18-4651-b316-39680f7fcfe7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5426ceed-a45d-4d55-9eb8-e6ed8a5370c5",
                    "3a3d2b3d-f4df-4dfd-b5b1-3b6ec0d9f247",
                    "e6673d25-b341-4081-b0da-dcc6ffd2b021",
                    "57ec5c5c-f878-4978-adbb-ff113f5aea72",
                    "a7468be0-c2a1-428d-b115-b3308bd69d3b",
                    "a610b125-574a-44d8-904b-34de09a397ec",
                    "35a49654-f817-46ea-9dd4-c0a8058904cd",
                    "f78ac095-faa7-4ced-a77a-6d46e54fee52"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "35729774-bef3-4ab3-b278-b800cbf20106",
                  "title": "DynamoDB",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers DynamoDB should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "d43c7ffc-9833-4657-b633-2497aa29a12b",
                      "parentUUID": "35729774-bef3-4ab3-b278-b800cbf20106",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d43c7ffc-9833-4657-b633-2497aa29a12b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "b4205370-3207-43ed-b52a-2c3ae7955682",
                  "title": "MongoDB",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers MongoDB should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "966f191a-9aca-4e55-8c65-81b389e385a1",
                      "parentUUID": "b4205370-3207-43ed-b52a-2c3ae7955682",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "966f191a-9aca-4e55-8c65-81b389e385a1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "940c1685-c15b-486b-b6c0-c6b94b40b9ac",
                  "title": "MySql",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers MySql should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "320262d5-6186-4eaf-a2b8-7045c58fe423",
                      "parentUUID": "940c1685-c15b-486b-b6c0-c6b94b40b9ac",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "320262d5-6186-4eaf-a2b8-7045c58fe423"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "67709d79-b932-4d9f-b8d1-53fe92c4028c",
                  "title": "Postgres",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers Postgres should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "97879e57-8628-4a71-bfdf-f0994c1664b3",
                      "parentUUID": "67709d79-b932-4d9f-b8d1-53fe92c4028c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "97879e57-8628-4a71-bfdf-f0994c1664b3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7c80a19f-7a92-4b2f-8361-6f8922a3c003",
                  "title": "ElasticSearch",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/testcontainer.spec.ts",
                  "file": "testcontainer.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TestContainers ElasticSearch should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    })",
                      "err": {},
                      "uuid": "ae4a3501-1be3-4a18-9a0e-80d99cfd6782",
                      "parentUUID": "7c80a19f-7a92-4b2f-8361-6f8922a3c003",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ae4a3501-1be3-4a18-9a0e-80d99cfd6782"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "bbdf0839-d1c7-458a-8775-9efcf1dd58af",
              "title": "utilities",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/utils.spec.ts",
              "file": "utils.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "fullTitle": "utilities should be return delay default time",
                  "title": "should be return delay default time",
                  "timedOut": false,
                  "duration": 10007,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return delay default time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay();\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  })",
                  "err": {},
                  "uuid": "489829c0-ff06-44e8-846d-10b2dff0a5ce",
                  "parentUUID": "bbdf0839-d1c7-458a-8775-9efcf1dd58af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "utilities should be return delay custom time",
                  "title": "should be return delay custom time",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return delay custom time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay(60);\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 60);\n  })",
                  "err": {},
                  "uuid": "1c90a6b6-e154-45ee-98c3-1dfd49909681",
                  "parentUUID": "bbdf0839-d1c7-458a-8775-9efcf1dd58af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "fullTitle": "utilities should be return a join of paths",
                  "title": "should be return a join of paths",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "it('should be return a join of paths', async () => {\n    const filePath = pathJoin(__dirname, 'join');\n    expect(filePath).toBe(path.join(__dirname, 'join'));\n  })",
                  "err": {},
                  "uuid": "ce0f5d78-c647-433f-a06f-67b754611cbc",
                  "parentUUID": "bbdf0839-d1c7-458a-8775-9efcf1dd58af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "489829c0-ff06-44e8-846d-10b2dff0a5ce",
                "1c90a6b6-e154-45ee-98c3-1dfd49909681",
                "ce0f5d78-c647-433f-a06f-67b754611cbc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10070,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0a756ff0-a385-44dc-b410-a2c9920bef3c",
              "title": "Config",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/config.spec.ts",
              "file": "config.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "9550c3db-d8d7-491d-8f28-5c3834dbc3f6",
                  "title": "baseConfig",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/config.spec.ts",
                  "file": "config.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Config baseConfig should be return config",
                      "title": "should be return config",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return config', async () => {\n      expect(config()).toBeDefined();\n      expect(config()).not.toBe(null);\n      expect(typeof config()).toBe('object');\n      expect(config()).toEqual(appConfigBase);\n    })",
                      "err": {},
                      "uuid": "0af2c136-a0f8-4cb2-9d27-cd7c520e5ec4",
                      "parentUUID": "9550c3db-d8d7-491d-8f28-5c3834dbc3f6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0af2c136-a0f8-4cb2-9d27-cd7c520e5ec4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f1628329-15d9-490e-9f9f-6ceaab8bc284",
                  "title": "dynamicConfig",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/config.spec.ts",
                  "file": "config.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Config dynamicConfig should be return config with args",
                      "title": "should be return config with args",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return config with args', async () => {\n      const args = {\n        httOptions: {\n          timeout: 5000,\n          maxRedirects: 5,\n        },\n      };\n\n      expect(dynamicConfig(args)()).toBeDefined();\n      expect(dynamicConfig(args)()).not.toBe(null);\n      expect(typeof dynamicConfig(args)()).toBe('object');\n      expect(dynamicConfig(args)()).toEqual({ ...appConfigBase, ...args });\n    })",
                      "err": {},
                      "uuid": "311f3f24-2894-4145-a82e-73d2b3a47ed4",
                      "parentUUID": "f1628329-15d9-490e-9f9f-6ceaab8bc284",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Config dynamicConfig should be return config without args",
                      "title": "should be return config without args",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return config without args', async () => {\n      expect(dynamicConfig()()).toBeDefined();\n      expect(dynamicConfig()()).not.toBe(null);\n      expect(typeof dynamicConfig()()).toBe('object');\n      expect(dynamicConfig()()).toEqual(appConfigBase);\n    })",
                      "err": {},
                      "uuid": "8b28be34-0f79-4b71-b62d-fa361d04229a",
                      "parentUUID": "f1628329-15d9-490e-9f9f-6ceaab8bc284",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "311f3f24-2894-4145-a82e-73d2b3a47ed4",
                    "8b28be34-0f79-4b71-b62d-fa361d04229a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "90871f3c-5bc2-4d9e-b23f-61143a651850",
              "title": "Fixtures",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/fixtures.spec.ts",
              "file": "fixtures.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "666c6745-565e-4feb-844d-6f139dbe741f",
                  "title": "appConfigBase",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/fixtures.spec.ts",
                  "file": "fixtures.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Fixtures appConfigBase should be return appBaseConfig",
                      "title": "should be return appBaseConfig",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    })",
                      "err": {},
                      "uuid": "72e5f139-c9a8-475f-869e-62dbf2b7a887",
                      "parentUUID": "666c6745-565e-4feb-844d-6f139dbe741f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "72e5f139-c9a8-475f-869e-62dbf2b7a887"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "075e7212-2520-4c83-9d4c-b7b2d6d8cc04",
                  "title": "manifest",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/fixtures.spec.ts",
                  "file": "fixtures.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Fixtures manifest should be return appBaseConfig",
                      "title": "should be return appBaseConfig",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    })",
                      "err": {},
                      "uuid": "a54a0204-75aa-42f6-9858-838897f020ec",
                      "parentUUID": "075e7212-2520-4c83-9d4c-b7b2d6d8cc04",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a54a0204-75aa-42f6-9858-838897f020ec"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "5b81f349-eba7-4bec-ab34-64def1514e6f",
                  "title": "TestContainers options",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/test-utils/src/__test__/fixtures.spec.ts",
                  "file": "fixtures.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "Fixtures TestContainers options should be define Redis options",
                      "title": "should be define Redis options",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "4ee1c66b-41cc-48f1-93dc-3ca37615e4e7",
                      "parentUUID": "5b81f349-eba7-4bec-ab34-64def1514e6f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define DynamoDB options",
                      "title": "should be define DynamoDB options",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "475becd1-225b-4e1e-b9f8-170f2e8e3879",
                      "parentUUID": "5b81f349-eba7-4bec-ab34-64def1514e6f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define MongoDB options",
                      "title": "should be define MongoDB options",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "06316263-1d70-4cf8-8671-5a52e4f5bb66",
                      "parentUUID": "5b81f349-eba7-4bec-ab34-64def1514e6f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define MySql options",
                      "title": "should be define MySql options",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "621a5f8f-3f67-4261-8e5d-ca5f1014bb93",
                      "parentUUID": "5b81f349-eba7-4bec-ab34-64def1514e6f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define Postgres options",
                      "title": "should be define Postgres options",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "e6b26788-e365-4988-9829-d55d4f4aa9c6",
                      "parentUUID": "5b81f349-eba7-4bec-ab34-64def1514e6f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "Fixtures TestContainers options should be define ElasticSearch options",
                      "title": "should be define ElasticSearch options",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    })",
                      "err": {},
                      "uuid": "b2971615-9723-434f-92f7-495ad0f51251",
                      "parentUUID": "5b81f349-eba7-4bec-ab34-64def1514e6f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4ee1c66b-41cc-48f1-93dc-3ca37615e4e7",
                    "475becd1-225b-4e1e-b9f8-170f2e8e3879",
                    "06316263-1d70-4cf8-8671-5a52e4f5bb66",
                    "621a5f8f-3f67-4261-8e5d-ca5f1014bb93",
                    "e6b26788-e365-4988-9829-d55d4f4aa9c6",
                    "b2971615-9723-434f-92f7-495ad0f51251"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "17cc875d-735b-42cb-850e-e48a70f62bdd",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f9f55e3e-dfb1-4d88-9570-a9f103b17149",
          "title": "@tresdoce-nestjs-toolkit/typeorm",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a0eedde3-bdbd-4d84-90e8-f073855af073",
              "title": "TypeOrm",
              "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/typeorm/src/__test__/typeorm.module.spec.ts",
              "file": "typeorm.module.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "577ed780-6965-4b5e-bcbb-8885864aacac",
                  "title": "Postgres",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/typeorm/src/__test__/typeorm.module.spec.ts",
                  "file": "typeorm.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TypeOrm Postgres should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 468,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000)",
                      "err": {},
                      "uuid": "a40d09f8-f0b2-4a7a-b4de-6ed4bff28721",
                      "parentUUID": "577ed780-6965-4b5e-bcbb-8885864aacac",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TypeOrm Postgres should be return an array of post",
                      "title": "should be return an array of post",
                      "timedOut": false,
                      "duration": 122,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    })",
                      "err": {},
                      "uuid": "32bc3e1f-ce48-48f9-8553-f6d81a4c3a35",
                      "parentUUID": "577ed780-6965-4b5e-bcbb-8885864aacac",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a40d09f8-f0b2-4a7a-b4de-6ed4bff28721",
                    "32bc3e1f-ce48-48f9-8553-f6d81a4c3a35"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 590,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "68f611b5-ec13-4cd4-bf42-98ae105a662a",
                  "title": "MySql",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/typeorm/src/__test__/typeorm.module.spec.ts",
                  "file": "typeorm.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TypeOrm MySql should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 135,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000)",
                      "err": {},
                      "uuid": "37185b42-714b-4393-926f-fcbddecb2fb7",
                      "parentUUID": "68f611b5-ec13-4cd4-bf42-98ae105a662a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TypeOrm MySql should be return an array of post",
                      "title": "should be return an array of post",
                      "timedOut": false,
                      "duration": 61,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    })",
                      "err": {},
                      "uuid": "d4679617-6b0b-49f3-8a52-64beb0fb1818",
                      "parentUUID": "68f611b5-ec13-4cd4-bf42-98ae105a662a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "37185b42-714b-4393-926f-fcbddecb2fb7",
                    "d4679617-6b0b-49f3-8a52-64beb0fb1818"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 196,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "1db2cf24-ce88-49ec-b181-a85cb8f05d27",
                  "title": "Mongo",
                  "fullFile": "/Users/maximilianodelgado/Projects/Mex/tresdoce-nestjs-toolkit/packages/typeorm/src/__test__/typeorm.module.spec.ts",
                  "file": "typeorm.module.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "fullTitle": "TypeOrm Mongo should be defined",
                      "title": "should be defined",
                      "timedOut": false,
                      "duration": 2277,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000)",
                      "err": {},
                      "uuid": "54704691-3643-46cf-8749-285b5178dbf4",
                      "parentUUID": "1db2cf24-ce88-49ec-b181-a85cb8f05d27",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "fullTitle": "TypeOrm Mongo should be return an array of user",
                      "title": "should be return an array of user",
                      "timedOut": false,
                      "duration": 53,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    })",
                      "err": {},
                      "uuid": "37eb47da-80bb-42da-b044-fe3c8f6f8363",
                      "parentUUID": "1db2cf24-ce88-49ec-b181-a85cb8f05d27",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "54704691-3643-46cf-8749-285b5178dbf4",
                    "37eb47da-80bb-42da-b044-fe3c8f6f8363"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2330,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}
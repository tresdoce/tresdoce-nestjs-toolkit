{
  "stats": {
    "suites": 13,
    "tests": 155,
    "passes": 155,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 155,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-02T17:33:52.352Z",
    "end": "2023-05-02T17:36:47.186Z",
    "duration": 174834
  },
  "results": [
    {
      "uuid": "ad6a6467-141a-47a4-8e99-24090568cc68",
      "title": "@tresdoce-nestjs-toolkit/archetype",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1845d611-f57e-4c89-b75e-b4fe6d4da642",
          "title": "@tresdoce-nestjs-toolkit/archetype",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "Constants > should be return exclude to prefix global",
              "title": "Constants > should be return exclude to prefix global",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { RequestMethod } from '@nestjs/common';\nimport { manifestControllerExcludes } from '../archetype/constants/archetype.constants';\n\ndescribe('Constants', () => {\n  it('should be return exclude to prefix global', async () => {\n    expect(manifestControllerExcludes).toEqual(expect.any(Array));\n    expect(manifestControllerExcludes).toMatchObject([\n      {\n        path: '/info',\n        method: RequestMethod.GET,\n      },\n    ]);\n  });\n});\n",
              "err": {},
              "uuid": "00959ff8-c638-4c31-910f-16601d1b8b30",
              "parentUUID": "1845d611-f57e-4c89-b75e-b4fe6d4da642",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeService > should be defined",
              "title": "ArchetypeService > should be defined",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "5ac8ca66-0639-407d-9dde-eddfb5631aac",
              "parentUUID": "1845d611-f57e-4c89-b75e-b4fe6d4da642",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeService > should be read package file",
              "title": "ArchetypeService > should be read package file",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "31e34281-be7f-4fa9-a682-b3397e79660f",
              "parentUUID": "1845d611-f57e-4c89-b75e-b4fe6d4da642",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeService > should be return archetype version",
              "title": "ArchetypeService > should be return archetype version",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "3268f24b-7c20-4f31-8035-c40b59b2d75b",
              "parentUUID": "1845d611-f57e-4c89-b75e-b4fe6d4da642",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeService > should be return application info",
              "title": "ArchetypeService > should be return application info",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "17b17ccd-a208-4ed7-b830-f9d484b2b7fe",
              "parentUUID": "1845d611-f57e-4c89-b75e-b4fe6d4da642",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeService > should be return manifest",
              "title": "ArchetypeService > should be return manifest",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeService', () => {\n  let service: ArchetypeService;\n  /*const archetypeService = {\n      readFile: jest.fn(() => manifest),\n      getArchetypeVersion: jest.fn(() => ({ archetypeVersion: manifest.archetypeVersion })),\n      getApplicationInfo: jest.fn(() => ({\n        name: manifest.name,\n        version: manifest.version,\n        description: manifest.description,\n        author: manifest.author,\n        repository: manifest.repository,\n        homepage: manifest.homepage,\n        dependencies: manifest.dependencies,\n        devDependencies: manifest.devDependencies,\n      })),\n      generateManifest: jest.fn(() => manifest),\n    };*/\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      providers: [ArchetypeService],\n    }).compile();\n\n    service = module.get<ArchetypeService>(ArchetypeService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should be read package file', async () => {\n    const packageFile = await service.readFile(__dirname, '../../package.json');\n    expect(packageFile).toBeDefined();\n    expect(packageFile).toEqual(expect.any(Object));\n  });\n\n  it('should be return archetype version', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({ version: manifest.archetypeVersion }));\n\n    expect(await service.getArchetypeVersion()).toEqual({\n      archetypeVersion: manifest.archetypeVersion,\n    });\n  });\n\n  it('should be return application info', async () => {\n    service.readFile = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.getApplicationInfo()).toEqual({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: {\n        '@tresdoce-nestjs-toolkit/archetype': '0.0.1',\n        '@tresdoce-nestjs-toolkit/health': '0.0.1',\n        '@tresdoce-nestjs-toolkit/http-client': '0.0.1',\n        '@nestjs/class-transformer': '^0.4.0',\n        '@nestjs/class-validator': '^0.13.3',\n        '@nestjs/common': '^9.2.1',\n        '@nestjs/config': '^2.2.0',\n        '@nestjs/core': '^8.2.5',\n        '@nestjs/platform-express': '^8.2.5',\n        '@nestjs/swagger': '^5.1.5',\n      },\n      devDependencies: {\n        '@tresdoce-nestjs-toolkit/commons': '0.0.1',\n        '@nestjs/cli': '^9.1.8',\n        '@nestjs/schematics': '^9.1.0',\n        '@nestjs/testing': '^9.4.0',\n      },\n    });\n  });\n\n  it('should be return manifest', async () => {\n    service.getArchetypeVersion = jest.fn().mockImplementation(() => ({\n      archetypeVersion: manifest.archetypeVersion,\n    }));\n\n    service.getApplicationInfo = jest.fn().mockImplementation(() => ({\n      apiPrefix: manifest.apiPrefix,\n      name: manifest.name,\n      version: manifest.version,\n      description: manifest.description,\n      author: manifest.author,\n      repository: manifest.repository,\n      homepage: manifest.homepage,\n      dependencies: manifest.dependencies,\n      devDependencies: manifest.devDependencies,\n    }));\n\n    expect(await service.generateManifest()).toEqual({ ...manifest });\n  });\n});\n",
              "err": {},
              "uuid": "578597ef-3fbb-437e-9c95-05ee7e3c7956",
              "parentUUID": "1845d611-f57e-4c89-b75e-b4fe6d4da642",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeModule > should be define",
              "title": "ArchetypeModule > should be define",
              "timedOut": false,
              "duration": 225,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\n\ndescribe('ArchetypeModule', () => {\n  let app: INestApplication;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n    }).compile();\n\n    app = module.createNestApplication();\n    await app.init();\n  });\n\n  it('should be define', async () => {\n    expect(app).toBeDefined();\n  });\n});\n",
              "err": {},
              "uuid": "d3eb5299-a82b-4f27-9eba-927aa3a115a8",
              "parentUUID": "1845d611-f57e-4c89-b75e-b4fe6d4da642",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeController > should be defined",
              "title": "ArchetypeController > should be defined",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeController } from '../archetype/controllers/archetype.controller';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeController', () => {\n  let controller: ArchetypeController;\n  const archetypeService = {\n    generateManifest: () => manifest,\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      controllers: [ArchetypeController],\n      providers: [ArchetypeService],\n    })\n      .overrideProvider(ArchetypeService)\n      .useValue(archetypeService)\n      .compile();\n\n    controller = module.get<ArchetypeController>(ArchetypeController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should be return manifest json', async () => {\n    expect(await controller.getArchetypeInfo()).toBeDefined();\n    expect(await controller.getArchetypeInfo()).toEqual(manifest);\n  });\n});\n",
              "err": {},
              "uuid": "9b874edc-80f7-4432-8cd0-2a047f1111b3",
              "parentUUID": "1845d611-f57e-4c89-b75e-b4fe6d4da642",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ArchetypeController > should be return manifest json",
              "title": "ArchetypeController > should be return manifest json",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { config, manifest } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { ArchetypeModule } from '../archetype/archetype.module';\nimport { ArchetypeController } from '../archetype/controllers/archetype.controller';\nimport { ArchetypeService } from '../archetype/services/archetype.service';\n\ndescribe('ArchetypeController', () => {\n  let controller: ArchetypeController;\n  const archetypeService = {\n    generateManifest: () => manifest,\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        ArchetypeModule,\n      ],\n      controllers: [ArchetypeController],\n      providers: [ArchetypeService],\n    })\n      .overrideProvider(ArchetypeService)\n      .useValue(archetypeService)\n      .compile();\n\n    controller = module.get<ArchetypeController>(ArchetypeController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should be return manifest json', async () => {\n    expect(await controller.getArchetypeInfo()).toBeDefined();\n    expect(await controller.getArchetypeInfo()).toEqual(manifest);\n  });\n});\n",
              "err": {},
              "uuid": "3a5a137e-d4fa-4d80-9928-d97b28b3d25a",
              "parentUUID": "1845d611-f57e-4c89-b75e-b4fe6d4da642",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00959ff8-c638-4c31-910f-16601d1b8b30",
            "5ac8ca66-0639-407d-9dde-eddfb5631aac",
            "31e34281-be7f-4fa9-a682-b3397e79660f",
            "3268f24b-7c20-4f31-8035-c40b59b2d75b",
            "17b17ccd-a208-4ed7-b830-f9d484b2b7fe",
            "578597ef-3fbb-437e-9c95-05ee7e3c7956",
            "d3eb5299-a82b-4f27-9eba-927aa3a115a8",
            "9b874edc-80f7-4432-8cd0-2a047f1111b3",
            "3a5a137e-d4fa-4d80-9928-d97b28b3d25a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 281,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "dddc16d4-cae9-47bc-9223-562de190ee13",
      "title": "@tresdoce-nestjs-toolkit/camunda",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "34cde751-9781-4255-a295-e8b67efb55ce",
          "title": "@tresdoce-nestjs-toolkit/camunda",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "CamundaModule > should be defined",
              "title": "CamundaModule > should be defined",
              "timedOut": false,
              "duration": 194,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { CamundaModule } from '../camunda/camunda.module';\nimport { dynamicConfig, tcName, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Subscription } from '../camunda/decorators/camunda.decorator';\nimport { CamundaTaskConnector } from '../camunda/providers/camunda.provider';\n\ndescribe('CamundaModule', () => {\n  let app: INestApplication;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    container = await new testContainers('camunda/camunda-bpm-platform:7.17.0', {\n      ports: [\n        {\n          container: 8080,\n          host: 8080,\n        },\n      ],\n      containerName: `${tcName}-camunda-bpm`,\n      reuse: true,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              camunda: {\n                baseUrl: 'http://localhost:8080/engine-rest',\n              },\n            }),\n          ],\n        }),\n        CamundaModule,\n      ],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    app.connectMicroservice({\n      strategy: app.get(CamundaTaskConnector),\n    });\n    await app.startAllMicroservices();\n    await app.init();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be Subscription decorator is defined with options', async () => {\n    const decorator = Subscription('test-topic', { lockDuration: 500 });\n    console.log(decorator);\n    expect(decorator).toBeDefined();\n  });\n});\n",
              "err": {},
              "uuid": "02edb1ce-9e83-4b13-8808-213194aaefeb",
              "parentUUID": "34cde751-9781-4255-a295-e8b67efb55ce",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "CamundaModule > should be Subscription decorator is defined with options",
              "title": "CamundaModule > should be Subscription decorator is defined with options",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { CamundaModule } from '../camunda/camunda.module';\nimport { dynamicConfig, tcName, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Subscription } from '../camunda/decorators/camunda.decorator';\nimport { CamundaTaskConnector } from '../camunda/providers/camunda.provider';\n\ndescribe('CamundaModule', () => {\n  let app: INestApplication;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    container = await new testContainers('camunda/camunda-bpm-platform:7.17.0', {\n      ports: [\n        {\n          container: 8080,\n          host: 8080,\n        },\n      ],\n      containerName: `${tcName}-camunda-bpm`,\n      reuse: true,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              camunda: {\n                baseUrl: 'http://localhost:8080/engine-rest',\n              },\n            }),\n          ],\n        }),\n        CamundaModule,\n      ],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    app.connectMicroservice({\n      strategy: app.get(CamundaTaskConnector),\n    });\n    await app.startAllMicroservices();\n    await app.init();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be Subscription decorator is defined with options', async () => {\n    const decorator = Subscription('test-topic', { lockDuration: 500 });\n    console.log(decorator);\n    expect(decorator).toBeDefined();\n  });\n});\n",
              "err": {},
              "uuid": "dbd3b3e5-3c6d-4ce9-aee9-124c4f64045f",
              "parentUUID": "34cde751-9781-4255-a295-e8b67efb55ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02edb1ce-9e83-4b13-8808-213194aaefeb",
            "dbd3b3e5-3c6d-4ce9-aee9-124c4f64045f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 203,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "933487c5-e71c-418e-9965-0be0df884f45",
      "title": "@tresdoce-nestjs-toolkit/commons",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2877e1b1-ad4f-4b5a-8ca5-6a0520f5bbbe",
          "title": "@tresdoce-nestjs-toolkit/commons",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "build-config > should be return jest config is build",
              "title": "build-config > should be return jest config is build",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { buildConfig } from '../index';\ndescribe('build-config', () => {\n  const INIT_ENVS = process.env;\n\n  beforeEach(() => {\n    jest.resetModules();\n    process.env = { ...INIT_ENVS };\n  });\n\n  afterAll(() => {\n    process.env = INIT_ENVS;\n  });\n\n  it('should be return jest config is build', () => {\n    process.env.NODE_ENV = 'build';\n    const config = buildConfig({ output: {}, optimization: {} });\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.mode).toEqual('production');\n  });\n\n  it('should be return jest config not is build', () => {\n    process.env.NODE_ENV = 'dev';\n    const config = buildConfig({ output: {}, optimization: {} });\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.mode).toEqual('none');\n  });\n});\n",
              "err": {},
              "uuid": "b7654651-d25a-47a5-aadd-fd5983b45d71",
              "parentUUID": "2877e1b1-ad4f-4b5a-8ca5-6a0520f5bbbe",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "build-config > should be return jest config not is build",
              "title": "build-config > should be return jest config not is build",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { buildConfig } from '../index';\ndescribe('build-config', () => {\n  const INIT_ENVS = process.env;\n\n  beforeEach(() => {\n    jest.resetModules();\n    process.env = { ...INIT_ENVS };\n  });\n\n  afterAll(() => {\n    process.env = INIT_ENVS;\n  });\n\n  it('should be return jest config is build', () => {\n    process.env.NODE_ENV = 'build';\n    const config = buildConfig({ output: {}, optimization: {} });\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.mode).toEqual('production');\n  });\n\n  it('should be return jest config not is build', () => {\n    process.env.NODE_ENV = 'dev';\n    const config = buildConfig({ output: {}, optimization: {} });\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.mode).toEqual('none');\n  });\n});\n",
              "err": {},
              "uuid": "07f875ba-9788-4ce6-b21a-3cfcf31649ee",
              "parentUUID": "2877e1b1-ad4f-4b5a-8ca5-6a0520f5bbbe",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "testing-library > should be return jest config",
              "title": "testing-library > should be return jest config",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { jestConfig } from '../index';\n\ndescribe('testing-library', () => {\n  it('should be return jest config', () => {\n    const config = jestConfig();\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n  });\n});\n",
              "err": {},
              "uuid": "73845bcb-72d8-49b5-8f87-db9b0b09c7d1",
              "parentUUID": "2877e1b1-ad4f-4b5a-8ca5-6a0520f5bbbe",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "eslint-config > should be return jest config",
              "title": "eslint-config > should be return jest config",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { eslintConfig } from '../index';\ndescribe('eslint-config', () => {\n  it('should be return jest config', () => {\n    const config = eslintConfig();\n    expect(config).not.toBe(null);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n  });\n});\n",
              "err": {},
              "uuid": "36b95fbb-74ee-4d45-b2e6-f0fb249f907f",
              "parentUUID": "2877e1b1-ad4f-4b5a-8ca5-6a0520f5bbbe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7654651-d25a-47a5-aadd-fd5983b45d71",
            "07f875ba-9788-4ce6-b21a-3cfcf31649ee",
            "73845bcb-72d8-49b5-8f87-db9b0b09c7d1",
            "36b95fbb-74ee-4d45-b2e6-f0fb249f907f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "b1b02c01-7d61-498c-a4e7-5cbc40b91095",
      "title": "@tresdoce-nestjs-toolkit/core",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3bfeaea2-db48-4bd1-b187-b7a4d246a007",
          "title": "@tresdoce-nestjs-toolkit/core",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "commons > with env context > should be return commons exclude paths with context",
              "title": "commons > with env context > should be return commons exclude paths with context",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "6eca2b50-c919-406b-8541-e269e84cc9b0",
              "parentUUID": "3bfeaea2-db48-4bd1-b187-b7a4d246a007",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "commons > with env context > should be return array of exclude paths with context",
              "title": "commons > with env context > should be return array of exclude paths with context",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "8195d8bd-a3bb-4cc3-8644-b649a9a26ab5",
              "parentUUID": "3bfeaea2-db48-4bd1-b187-b7a4d246a007",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "commons > with env context > should be return commons exclude paths without context",
              "title": "commons > with env context > should be return commons exclude paths without context",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "fe1c6b11-4818-447f-875b-24df1dcac362",
              "parentUUID": "3bfeaea2-db48-4bd1-b187-b7a4d246a007",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "commons > with env context > should be return array of exclude paths without context",
              "title": "commons > with env context > should be return array of exclude paths without context",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { corePathsExcludes, excludePaths } from '../index';\nimport { RequestMethod } from '@nestjs/common';\n\ndescribe('commons', () => {\n  describe('with env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = 'v1/api-test';\n    });\n\n    it('should be return commons exclude paths with context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/liveness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/health/readiness`,\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: `/v1/api-test/info`,\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths with context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual([\n        `/v1/api-test/health/liveness`,\n        `/v1/api-test/health/readiness`,\n        `/v1/api-test/info`,\n      ]);\n    });\n  });\n\n  describe('without env context', () => {\n    beforeEach(() => {\n      process.env.CONTEXT = '';\n    });\n\n    it('should be return commons exclude paths without context', () => {\n      expect(corePathsExcludes()).not.toBe(null);\n      expect(corePathsExcludes()).toBeDefined();\n      expect(corePathsExcludes()).toBeInstanceOf(Array);\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      });\n\n      expect(corePathsExcludes()).toContainObject({\n        path: '/info',\n        method: RequestMethod.GET,\n      });\n    });\n\n    it('should be return array of exclude paths without context', () => {\n      expect(excludePaths()).not.toBe(null);\n      expect(excludePaths()).toBeDefined();\n      expect(excludePaths()).toBeInstanceOf(Array);\n      expect(excludePaths()).toEqual(['/health/liveness', '/health/readiness', '/info']);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "bad7b6ff-30c6-4cf8-b00f-7d690ebb59a7",
              "parentUUID": "3bfeaea2-db48-4bd1-b187-b7a4d246a007",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "https-certificate > should be return https certificate config",
              "title": "https-certificate > should be return https certificate config",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { setHttpsOptions } from '../index';\nimport * as path from 'path';\ndescribe('https-certificate', () => {\n  it('should be return https certificate config', () => {\n    const crtPath = path.resolve(__dirname, './utils/localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).not.toEqual('');\n    expect(config.key).not.toEqual('');\n  });\n\n  it('should be return https certificate config empty', () => {\n    const crtPath = path.resolve(__dirname, './utils/my-localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/my-localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).toEqual('');\n    expect(config.key).toEqual('');\n  });\n});\n",
              "err": {},
              "uuid": "a72e10d7-3842-4e0f-9733-3bb0b13bf958",
              "parentUUID": "3bfeaea2-db48-4bd1-b187-b7a4d246a007",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "https-certificate > should be return https certificate config empty",
              "title": "https-certificate > should be return https certificate config empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { setHttpsOptions } from '../index';\nimport * as path from 'path';\ndescribe('https-certificate', () => {\n  it('should be return https certificate config', () => {\n    const crtPath = path.resolve(__dirname, './utils/localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).not.toEqual('');\n    expect(config.key).not.toEqual('');\n  });\n\n  it('should be return https certificate config empty', () => {\n    const crtPath = path.resolve(__dirname, './utils/my-localhost.crt');\n    const keyPath = path.resolve(__dirname, './utils/my-localhost.key');\n\n    const config = setHttpsOptions(crtPath, keyPath);\n    expect(typeof config).toBe('object');\n    expect(config).toBeDefined();\n    expect(config.cert).toEqual('');\n    expect(config.key).toEqual('');\n  });\n});\n",
              "err": {},
              "uuid": "ed305b77-d799-4721-9d34-6477bb695d3c",
              "parentUUID": "3bfeaea2-db48-4bd1-b187-b7a4d246a007",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Public decorator > should be defined",
              "title": "Public decorator > should be defined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Public, IS_PUBLIC_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Public()).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(IS_PUBLIC_KEY).toBe('isPublic');\n  });\n});\n",
              "err": {},
              "uuid": "da66c5d7-1066-4591-92f8-40ff7ab231d9",
              "parentUUID": "3bfeaea2-db48-4bd1-b187-b7a4d246a007",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Public decorator > should be return key",
              "title": "Public decorator > should be return key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Public, IS_PUBLIC_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Public()).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(IS_PUBLIC_KEY).toBe('isPublic');\n  });\n});\n",
              "err": {},
              "uuid": "9b8e97a1-353e-441b-802f-e58ac1f1ccf6",
              "parentUUID": "3bfeaea2-db48-4bd1-b187-b7a4d246a007",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Public decorator > should be defined",
              "title": "Public decorator > should be defined",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Roles, ROLES_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Roles('admin')).toBeDefined();\n    expect(Roles('admin', 'user')).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(ROLES_KEY).toBe('roles');\n  });\n});\n",
              "err": {},
              "uuid": "6bf9241f-c423-4402-8ff6-6041edef2820",
              "parentUUID": "3bfeaea2-db48-4bd1-b187-b7a4d246a007",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Public decorator > should be return key",
              "title": "Public decorator > should be return key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Roles, ROLES_KEY } from '../index';\n\ndescribe('Public decorator', () => {\n  it('should be defined', async () => {\n    expect(Roles('admin')).toBeDefined();\n    expect(Roles('admin', 'user')).toBeDefined();\n  });\n\n  it('should be return key', async () => {\n    expect(ROLES_KEY).toBe('roles');\n  });\n});\n",
              "err": {},
              "uuid": "265cbe3c-efd7-4a46-9f7c-6ea3f1512aa7",
              "parentUUID": "3bfeaea2-db48-4bd1-b187-b7a4d246a007",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6eca2b50-c919-406b-8541-e269e84cc9b0",
            "8195d8bd-a3bb-4cc3-8644-b649a9a26ab5",
            "fe1c6b11-4818-447f-875b-24df1dcac362",
            "bad7b6ff-30c6-4cf8-b00f-7d690ebb59a7",
            "a72e10d7-3842-4e0f-9733-3bb0b13bf958",
            "ed305b77-d799-4721-9d34-6477bb695d3c",
            "da66c5d7-1066-4591-92f8-40ff7ab231d9",
            "9b8e97a1-353e-441b-802f-e58ac1f1ccf6",
            "6bf9241f-c423-4402-8ff6-6041edef2820",
            "265cbe3c-efd7-4a46-9f7c-6ea3f1512aa7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "add5682c-1ebc-45b6-92e4-fc75b6bf86ce",
      "title": "@tresdoce-nestjs-toolkit/elk",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3bdb07b6-e8d7-42cb-ad8e-c2d87c398145",
          "title": "@tresdoce-nestjs-toolkit/elk",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "ElkModule > should be defined",
              "title": "ElkModule > should be defined",
              "timedOut": false,
              "duration": 1294,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "c2ebd403-e501-4350-ad3c-0bc9f88c22d4",
              "parentUUID": "3bdb07b6-e8d7-42cb-ad8e-c2d87c398145",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ElkModule > should be an ElkInterceptor instance to be defined",
              "title": "ElkModule > should be an ElkInterceptor instance to be defined",
              "timedOut": false,
              "duration": 1010,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "54e4b7ea-b647-47b3-bb63-9087f9742c5f",
              "parentUUID": "3bdb07b6-e8d7-42cb-ad8e-c2d87c398145",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ElkModule > should be create document in elasticsearch when return success string",
              "title": "ElkModule > should be create document in elasticsearch when return success string",
              "timedOut": false,
              "duration": 1012,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "16709cd5-7dd8-4a4e-be74-225ce4dc6419",
              "parentUUID": "3bdb07b6-e8d7-42cb-ad8e-c2d87c398145",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ElkModule > should be create document in elasticsearch when return success object",
              "title": "ElkModule > should be create document in elasticsearch when return success object",
              "timedOut": false,
              "duration": 1011,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "c161e211-63ac-42d0-9625-650d8bb41380",
              "parentUUID": "3bdb07b6-e8d7-42cb-ad8e-c2d87c398145",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ElkModule > should be create document in elasticsearch when return success with parameters",
              "title": "ElkModule > should be create document in elasticsearch when return success with parameters",
              "timedOut": false,
              "duration": 1009,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "e711d9c0-0259-41c2-87fe-abc0efdbc54e",
              "parentUUID": "3bdb07b6-e8d7-42cb-ad8e-c2d87c398145",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ElkModule > should be create document in elasticsearch when return exception",
              "title": "ElkModule > should be create document in elasticsearch when return exception",
              "timedOut": false,
              "duration": 1012,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "6ed03dee-46ac-44e7-88d8-a198d089c12f",
              "parentUUID": "3bdb07b6-e8d7-42cb-ad8e-c2d87c398145",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ElkModule > should be create document in elasticsearch when return exception http",
              "title": "ElkModule > should be create document in elasticsearch when return exception http",
              "timedOut": false,
              "duration": 1010,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "1f20646a-088d-4abb-adc0-50c1a1704bcc",
              "parentUUID": "3bdb07b6-e8d7-42cb-ad8e-c2d87c398145",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ElkModule > should be defined",
              "title": "ElkModule > should be defined",
              "timedOut": false,
              "duration": 1013,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpException, INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  dynamicConfig,\n  fixtureUserResponse,\n  TCElasticSearchOptions,\n  tcName,\n  testContainers,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpConnection } from '@elastic/elasticsearch';\nimport { URL } from 'url';\n\nimport { ElkModule } from '../elk/elk.module';\nimport { ElkInterceptor } from '../elk/interceptors/elk.interceptor';\nimport { ElkService } from '../elk/services/elk.service';\n\nlet executionContext: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: {},\n      query: {},\n      body: {},\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\nlet executionContextParams: any = {\n  switchToHttp: jest.fn(() => ({\n    getRequest: () => ({\n      path: '/test',\n      method: 'GET',\n      params: { name: 'juan' },\n      query: { name: 'juan' },\n      body: { name: 'juan' },\n      headers: {\n        'Content-Type': 'application/json',\n        apiKey: 'abcdefg12345',\n      },\n    }),\n    getResponse: () => ({\n      getHeaders: jest.fn().mockReturnValue({\n        'Content-Type': 'application/json',\n        my_header: 'test-header',\n      }),\n      json: [fixtureUserResponse],\n    }),\n  })),\n  getType: jest.fn(() => 'http'),\n  getClass: jest.fn(() => 'testController'),\n  getHandler: jest.fn(() => 'handlerElk'),\n};\n\n/*const callHandler: any = {\n  handle: jest.fn(() => ({\n    pipe: jest.fn(() => ({\n      tap: jest.fn(() => ({\n        next: jest.fn(),\n        error: jest.fn(),\n      })),\n    })),\n  })),\n};*/\n\njest.setTimeout(70000);\ndescribe('ElkModule', () => {\n  let app: INestApplication;\n  let elkService: ElkService;\n  let interceptor: ElkInterceptor<any>;\n  let container: testContainers;\n\n  beforeAll(async () => {\n    //'elasticsearch:8.3.3'\n    //docker.elastic.co/elasticsearch/elasticsearch:8.3.3\n\n    container = await new testContainers('elasticsearch:8.3.3', {\n      ...TCElasticSearchOptions,\n      containerName: `${tcName}-elasticsearch-interceptor`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            dynamicConfig({\n              elasticsearch: {\n                name: 'test-elk-index',\n                node: {\n                  url: new URL(`http://${container.getHost()}:9200`),\n                },\n                maxRetries: 10,\n                requestTimeout: 60000,\n                sniffOnStart: true,\n                Connection: HttpConnection,\n              },\n            }),\n          ],\n        }),\n        ElkModule,\n      ],\n    }).compile();\n    app = moduleFixture.createNestApplication();\n    interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n    app.useGlobalInterceptors(interceptor);\n    elkService = moduleFixture.get<ElkService>(ElkService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  describe('ElkInterceptor', () => {\n    it('should be an ElkInterceptor instance to be defined', async () => {\n      expect(new ElkInterceptor(elkService)).toBeDefined();\n    });\n\n    it('should be create document in elasticsearch when return success string', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of('this is a test')),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success object', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, response, false);\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContext,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return success with parameters', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const callHandler: any = {\n        handle: jest.fn(() => of([fixtureUserResponse])),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContextParams, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: (response) => {\n          elkService.serializeResponseInterceptor(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n          expect(interceptorServiceSpy).toBeCalledWith(\n            timeRequest,\n            executionContextParams,\n            response,\n            false,\n          );\n        },\n        error: () => {},\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new Error(`User #$1 not found`);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n\n    it('should be create document in elasticsearch when return exception http', async () => {\n      const interceptorServiceSpy = jest.spyOn(elkService, 'serializeResponseInterceptor');\n      const timeRequest = Date.now();\n\n      const error = new HttpException('not found', 404);\n\n      const callHandler: any = {\n        handle: jest.fn(() => throwError(error)),\n      };\n\n      const obs: Observable<any> = interceptor.intercept(executionContext, callHandler);\n      expect(callHandler.handle).toBeCalledTimes(1);\n\n      obs.subscribe({\n        next: () => {},\n        error: (error) => {\n          elkService.serializeResponseInterceptor(timeRequest, executionContext, error, true);\n          expect(interceptorServiceSpy).toBeCalledWith(timeRequest, executionContext, error, true);\n        },\n      });\n    });\n  });\n\n  describe('ElkModule - Register', () => {\n    let app: INestApplication;\n    let elkService: ElkService;\n    let interceptor: ElkInterceptor<any>;\n\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ElkModule.register({\n            name: 'test-elk-index',\n            node: {\n              url: new URL(`http://${container.getHost()}:9200`),\n            },\n            maxRetries: 10,\n            requestTimeout: 60000,\n            sniffOnStart: true,\n            Connection: HttpConnection,\n          }),\n        ],\n      }).compile();\n      app = moduleFixture.createNestApplication();\n      interceptor = new ElkInterceptor(app.get<ElkService>(ElkService));\n      app.useGlobalInterceptors(interceptor);\n      elkService = moduleFixture.get<ElkService>(ElkService);\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "3f3119e9-cce5-4538-94fa-8588c33d2b90",
              "parentUUID": "3bdb07b6-e8d7-42cb-ad8e-c2d87c398145",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c2ebd403-e501-4350-ad3c-0bc9f88c22d4",
            "54e4b7ea-b647-47b3-bb63-9087f9742c5f",
            "16709cd5-7dd8-4a4e-be74-225ce4dc6419",
            "c161e211-63ac-42d0-9625-650d8bb41380",
            "e711d9c0-0259-41c2-87fe-abc0efdbc54e",
            "6ed03dee-46ac-44e7-88d8-a198d089c12f",
            "1f20646a-088d-4abb-adc0-50c1a1704bcc",
            "3f3119e9-cce5-4538-94fa-8588c33d2b90"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8371,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "3602c6e4-78d7-4195-88b2-052ee09e611b",
      "title": "@tresdoce-nestjs-toolkit/filters",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d7065228-3344-48ac-837d-7611ee81b85b",
          "title": "@tresdoce-nestjs-toolkit/filters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "filters > code exception > should map a regular code exception",
              "title": "filters > code exception > should map a regular code exception",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "04fab21f-d227-4baa-b8af-930f0a8c37a1",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "filters > code exception > should map default exception when thrown with not parameters",
              "title": "filters > code exception > should map default exception when thrown with not parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "559d4be1-687a-402a-9710-4fa34e8be823",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "filters > code exception > should map default exception when thrown with error details",
              "title": "filters > code exception > should map default exception when thrown with error details",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "4ef06f15-655a-46c6-bfe3-7c543eaa9688",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "filters > code exception > should map default exception when thrown with error details and description",
              "title": "filters > code exception > should map default exception when thrown with error details and description",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "c4cb8c62-beb7-4265-b095-bd9a91c65d35",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "filters > code exception > should map HttpException response when called with a string",
              "title": "filters > code exception > should map HttpException response when called with a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "d93a7833-9ea0-43d3-9446-ce2b6687cb82",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "filters > code exception > should map HttpException response when called with an object",
              "title": "filters > code exception > should map HttpException response when called with an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "2d7aa6fb-cb28-4413-85d0-727578624d86",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "filters > code exception > should map HttpException response when called with an object with empty message",
              "title": "filters > code exception > should map HttpException response when called with an object with empty message",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "a53e96d3-b7b9-43eb-a409-9c7bf9f4e698",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "filters > code exception > should map HttpException response when called with an array",
              "title": "filters > code exception > should map HttpException response when called with an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "a2a29330-6eb5-443a-b1db-e9d90279fb99",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "filters > code exception > should map HttpException response when called with an object",
              "title": "filters > code exception > should map HttpException response when called with an object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "031d1c3a-fc58-481a-b6a3-5816b1fc6767",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "filters > code exception > should map default exception when thrown with not parameters",
              "title": "filters > code exception > should map default exception when thrown with not parameters",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "3f58a3bf-6763-4972-b1f5-eb40cb68107a",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "filters > code exception > should be return application info",
              "title": "filters > code exception > should be return application info",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { BadRequestException, ForbiddenException, HttpException, HttpStatus } from '@nestjs/common';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { ExceptionsFilter, PROBLEM_CONTENT_TYPE, IErrorDetail, IProblemDetail } from '../';\n\nconst mockJson = jest.fn();\n\nconst mockStatus = jest.fn().mockImplementation(() => ({\n  json: mockJson,\n}));\n\nconst mockType = jest.fn().mockImplementation(() => ({\n  status: mockStatus,\n}));\n\nconst mockGetResponse = jest.fn().mockImplementation(() => ({\n  type: mockType,\n}));\n\nconst mockUrl = jest.fn().mockImplementation(() => ({\n  url: mockJson,\n}));\n\nconst mockGetRequest = jest.fn().mockImplementation(() => ({\n  type: mockUrl,\n}));\n\nconst mockHttpArgumentsHost = jest.fn().mockImplementation(() => ({\n  getResponse: mockGetResponse,\n  getRequest: mockGetRequest,\n}));\n\nconst mockArgumentsHost = {\n  switchToHttp: mockHttpArgumentsHost,\n  getArgByIndex: jest.fn(),\n  getArgs: jest.fn(),\n  getType: jest.fn(),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n};\n\ndescribe('filters', () => {\n  describe('code exception', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map a regular code exception', () => {\n      const status = HttpStatus.INTERNAL_SERVER_ERROR;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n      try {\n        const linea: any = undefined;\n        linea.split('');\n      } catch (error) {\n        filter.catch(error, mockArgumentsHost);\n        assertResponse(status, expectation);\n      }\n    });\n  });\n\n  describe('default Http exceptions', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        status,\n        code: HttpStatus[status],\n        detail: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    it('should map default exception when thrown with error details and description', () => {\n      const status = HttpStatus.FORBIDDEN;\n      const message = 'passing?';\n      const details = 'not pass!';\n\n      const expectation: IProblemDetail = {\n        message,\n        detail: details,\n        status,\n        code: HttpStatus[status],\n      };\n      filter.catch(new ForbiddenException(message, details), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n\n    describe('the generic HttpException', () => {\n      it('should map HttpException response when called with a string', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const message = 'Not passing';\n\n        const expectation: IProblemDetail = {\n          message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(message, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: 'some message',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an object with empty message', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject: IErrorDetail = {\n          message: '',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.message,\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n        assertResponse(status, expectation);\n      });\n\n      it('should map HttpException response when called with an array', () => {\n        const status = HttpStatus.SEE_OTHER;\n        const errorObject = {\n          message: ['some message', 'some message 2'],\n          error: 'Bad Request',\n        };\n\n        const expectation: IProblemDetail = {\n          message: errorObject.error,\n          detail: [{ message: errorObject.message[0] }, { message: errorObject.message[1] }],\n          status,\n          code: HttpStatus[status],\n        };\n\n        filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n        assertResponse(status, expectation);\n      });\n    });\n\n    it('should map HttpException response when called with an object', () => {\n      const errorObject: IErrorDetail = {\n        message: 'some message',\n        error: {\n          instance: 'instance',\n          type: 'some-problem-detail',\n        },\n      };\n\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: errorObject.message,\n        detail: errorObject.error,\n        status,\n        instance: errorObject.error.instance,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new HttpException(errorObject, status), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('when used outside a module', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n    it('should map default exception when thrown with not parameters', () => {\n      const status = HttpStatus.BAD_REQUEST;\n      const expectation: IProblemDetail = {\n        message: HttpStatus[status],\n        status,\n        code: HttpStatus[status],\n      };\n\n      filter.catch(new BadRequestException(), mockArgumentsHost);\n\n      assertResponse(status, expectation);\n    });\n  });\n\n  describe('configuration is defined with values', () => {\n    const appConfig = config();\n    const filter = new ExceptionsFilter(appConfig);\n\n    it('should be return application info', async () => {\n      expect(appConfig.project.apiPrefix).toEqual('API-TEST');\n    });\n\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n\n    assertResponse(status, expectation);\n  });\n\n  describe('configuration is undefined', () => {\n    const appConfig = undefined;\n    const filter = new ExceptionsFilter(appConfig);\n    const status = HttpStatus.BAD_REQUEST;\n    const expectation: IProblemDetail = {\n      message: HttpStatus[status],\n      status,\n      code: HttpStatus[status],\n    };\n\n    filter.catch(new BadRequestException(), mockArgumentsHost);\n    assertResponse(status, expectation);\n  });\n});\n\nfunction assertResponse(expectedStatus: number, expectedJson: IProblemDetail) {\n  expect(mockType).toHaveBeenCalledWith(PROBLEM_CONTENT_TYPE);\n  expect(mockStatus).toHaveBeenCalledWith(expectedStatus);\n}\n",
              "err": {},
              "uuid": "3f199dc2-a2ca-4fb1-9569-301f8b8aeed4",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "error.utils > should be return code in string",
              "title": "error.utils > should be return code in string",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { getCode } from '../';\nimport { HttpStatus } from '@nestjs/common';\n\ndescribe('error.utils', () => {\n  it('should be return code in string', () => {\n    const code = getCode(HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR]);\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n\n  it('should be return code in string obj', () => {\n    const code = getCode({ error: HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n\n  it('should be return code in string', () => {\n    const code = getCode({ error: HttpStatus['TEST_ERROR'] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n});\n",
              "err": {},
              "uuid": "c90ae447-274a-4d54-b70e-617727d123ed",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "error.utils > should be return code in string obj",
              "title": "error.utils > should be return code in string obj",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { getCode } from '../';\nimport { HttpStatus } from '@nestjs/common';\n\ndescribe('error.utils', () => {\n  it('should be return code in string', () => {\n    const code = getCode(HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR]);\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n\n  it('should be return code in string obj', () => {\n    const code = getCode({ error: HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n\n  it('should be return code in string', () => {\n    const code = getCode({ error: HttpStatus['TEST_ERROR'] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n});\n",
              "err": {},
              "uuid": "ee4af86e-4aca-4f0f-94f6-ae3db421c30a",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "error.utils > should be return code in string",
              "title": "error.utils > should be return code in string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { getCode } from '../';\nimport { HttpStatus } from '@nestjs/common';\n\ndescribe('error.utils', () => {\n  it('should be return code in string', () => {\n    const code = getCode(HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR]);\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n\n  it('should be return code in string obj', () => {\n    const code = getCode({ error: HttpStatus[HttpStatus.INTERNAL_SERVER_ERROR] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n\n  it('should be return code in string', () => {\n    const code = getCode({ error: HttpStatus['TEST_ERROR'] });\n    expect(code).toEqual('INTERNAL_SERVER_ERROR');\n  });\n});\n",
              "err": {},
              "uuid": "e8804c3d-3564-4cbe-996a-b89317e85810",
              "parentUUID": "d7065228-3344-48ac-837d-7611ee81b85b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "04fab21f-d227-4baa-b8af-930f0a8c37a1",
            "559d4be1-687a-402a-9710-4fa34e8be823",
            "4ef06f15-655a-46c6-bfe3-7c543eaa9688",
            "c4cb8c62-beb7-4265-b095-bd9a91c65d35",
            "d93a7833-9ea0-43d3-9446-ce2b6687cb82",
            "2d7aa6fb-cb28-4413-85d0-727578624d86",
            "a53e96d3-b7b9-43eb-a409-9c7bf9f4e698",
            "a2a29330-6eb5-443a-b1db-e9d90279fb99",
            "031d1c3a-fc58-481a-b6a3-5816b1fc6767",
            "3f58a3bf-6763-4972-b1f5-eb40cb68107a",
            "3f199dc2-a2ca-4fb1-9569-301f8b8aeed4",
            "c90ae447-274a-4d54-b70e-617727d123ed",
            "ee4af86e-4aca-4f0f-94f6-ae3db421c30a",
            "e8804c3d-3564-4cbe-996a-b89317e85810"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "58a78f90-da1b-44a1-8c64-1c047a89d24d",
      "title": "@tresdoce-nestjs-toolkit/health",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fe6fc284-511b-40a6-8198-ef370b74029b",
          "title": "@tresdoce-nestjs-toolkit/health",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "Health > Ready controller - extend config > should be defined with extend config",
              "title": "Health > Ready controller - extend config > should be defined with extend config",
              "timedOut": false,
              "duration": 386,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TerminusModule,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ReadinessController } from '../health/controllers/readiness.controller';\nimport { CONFIG_OPTIONS } from '../health/constants';\n\nconst mockedConfig = {\n  services: {\n    myService: {\n      url: 'http://localhost:8082',\n      timeout: 3000,\n    },\n    demoApi: {\n      url: 'https://nestjs-starter.up.railway.app',\n      timeout: 3000,\n      healthPath: '/v1/health/liveness',\n    },\n  },\n  database: {\n    typeorm: {\n      type: 'postgres',\n    },\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379,\n  },\n  elasticsearch: {\n    name: 'test-app',\n    node: 'http://localhost:9200',\n  },\n  camunda: {\n    baseUrl: 'http://localhost:8080/engine-rest',\n  },\n};\n\nconst mockExpectReadiness = {\n  status: 'ok',\n  info: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n  error: {},\n  details: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n};\n\nconst mockExpectReadinessDown = {\n  myService: {\n    status: 'down',\n    message: 'connect ECONNREFUSED 127.0.0.1:8082',\n  },\n};\n\nconst simpleConfig = {\n  services: {\n    myService: { url: 'http://localhost:8082' },\n  },\n};\n\ndescribe('Health', () => {\n  describe('Ready controller - extend config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: mockedConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n\n  describe('Ready controller - simple config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: simpleConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "9cb1fa71-337f-40dd-b869-43bcf0578e30",
              "parentUUID": "fe6fc284-511b-40a6-8198-ef370b74029b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Health > Ready controller - extend config > should be return up services with extend config",
              "title": "Health > Ready controller - extend config > should be return up services with extend config",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TerminusModule,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ReadinessController } from '../health/controllers/readiness.controller';\nimport { CONFIG_OPTIONS } from '../health/constants';\n\nconst mockedConfig = {\n  services: {\n    myService: {\n      url: 'http://localhost:8082',\n      timeout: 3000,\n    },\n    demoApi: {\n      url: 'https://nestjs-starter.up.railway.app',\n      timeout: 3000,\n      healthPath: '/v1/health/liveness',\n    },\n  },\n  database: {\n    typeorm: {\n      type: 'postgres',\n    },\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379,\n  },\n  elasticsearch: {\n    name: 'test-app',\n    node: 'http://localhost:9200',\n  },\n  camunda: {\n    baseUrl: 'http://localhost:8080/engine-rest',\n  },\n};\n\nconst mockExpectReadiness = {\n  status: 'ok',\n  info: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n  error: {},\n  details: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n};\n\nconst mockExpectReadinessDown = {\n  myService: {\n    status: 'down',\n    message: 'connect ECONNREFUSED 127.0.0.1:8082',\n  },\n};\n\nconst simpleConfig = {\n  services: {\n    myService: { url: 'http://localhost:8082' },\n  },\n};\n\ndescribe('Health', () => {\n  describe('Ready controller - extend config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: mockedConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n\n  describe('Ready controller - simple config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: simpleConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "4b45646c-15bb-4f1f-9083-2e96c03cd5cc",
              "parentUUID": "fe6fc284-511b-40a6-8198-ef370b74029b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Health > Ready controller - extend config > should be defined with simple config",
              "title": "Health > Ready controller - extend config > should be defined with simple config",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TerminusModule,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ReadinessController } from '../health/controllers/readiness.controller';\nimport { CONFIG_OPTIONS } from '../health/constants';\n\nconst mockedConfig = {\n  services: {\n    myService: {\n      url: 'http://localhost:8082',\n      timeout: 3000,\n    },\n    demoApi: {\n      url: 'https://nestjs-starter.up.railway.app',\n      timeout: 3000,\n      healthPath: '/v1/health/liveness',\n    },\n  },\n  database: {\n    typeorm: {\n      type: 'postgres',\n    },\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379,\n  },\n  elasticsearch: {\n    name: 'test-app',\n    node: 'http://localhost:9200',\n  },\n  camunda: {\n    baseUrl: 'http://localhost:8080/engine-rest',\n  },\n};\n\nconst mockExpectReadiness = {\n  status: 'ok',\n  info: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n  error: {},\n  details: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n};\n\nconst mockExpectReadinessDown = {\n  myService: {\n    status: 'down',\n    message: 'connect ECONNREFUSED 127.0.0.1:8082',\n  },\n};\n\nconst simpleConfig = {\n  services: {\n    myService: { url: 'http://localhost:8082' },\n  },\n};\n\ndescribe('Health', () => {\n  describe('Ready controller - extend config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: mockedConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n\n  describe('Ready controller - simple config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: simpleConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "fa8b3e36-8cbd-4c70-b6ba-b4f13a9d1d64",
              "parentUUID": "fe6fc284-511b-40a6-8198-ef370b74029b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Health > Ready controller - extend config > should be return up services with simple config",
              "title": "Health > Ready controller - extend config > should be return up services with simple config",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TerminusModule,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ReadinessController } from '../health/controllers/readiness.controller';\nimport { CONFIG_OPTIONS } from '../health/constants';\n\nconst mockedConfig = {\n  services: {\n    myService: {\n      url: 'http://localhost:8082',\n      timeout: 3000,\n    },\n    demoApi: {\n      url: 'https://nestjs-starter.up.railway.app',\n      timeout: 3000,\n      healthPath: '/v1/health/liveness',\n    },\n  },\n  database: {\n    typeorm: {\n      type: 'postgres',\n    },\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379,\n  },\n  elasticsearch: {\n    name: 'test-app',\n    node: 'http://localhost:9200',\n  },\n  camunda: {\n    baseUrl: 'http://localhost:8080/engine-rest',\n  },\n};\n\nconst mockExpectReadiness = {\n  status: 'ok',\n  info: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n  error: {},\n  details: {\n    myService: {\n      status: 'up',\n    },\n    typeOrm: {\n      status: 'up',\n    },\n    redis: {\n      status: 'up',\n    },\n    elasticsearch: {\n      status: 'up',\n    },\n    camunda: {\n      status: 'up',\n    },\n  },\n};\n\nconst mockExpectReadinessDown = {\n  myService: {\n    status: 'down',\n    message: 'connect ECONNREFUSED 127.0.0.1:8082',\n  },\n};\n\nconst simpleConfig = {\n  services: {\n    myService: { url: 'http://localhost:8082' },\n  },\n};\n\ndescribe('Health', () => {\n  describe('Ready controller - extend config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: mockedConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with extend config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with extend config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n\n  describe('Ready controller - simple config', () => {\n    let controller: ReadinessController;\n    let health: HealthCheckService;\n    let http: HttpHealthIndicator;\n    let typeOrm: TypeOrmHealthIndicator;\n    let redis: MicroserviceHealthIndicator;\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [TerminusModule, HttpModule],\n        controllers: [ReadinessController],\n        providers: [\n          {\n            provide: CONFIG_OPTIONS,\n            useValue: simpleConfig,\n          },\n        ],\n      }).compile();\n\n      controller = module.get<ReadinessController>(ReadinessController);\n      health = await module.resolve<HealthCheckService>(HealthCheckService);\n      http = await module.resolve<HttpHealthIndicator>(HttpHealthIndicator as any);\n      typeOrm = await module.resolve<TypeOrmHealthIndicator>(TypeOrmHealthIndicator);\n      redis = await module.resolve<MicroserviceHealthIndicator>(MicroserviceHealthIndicator);\n    });\n\n    it('should be defined with simple config', () => {\n      expect(controller).toBeDefined();\n    });\n\n    it('should be return up services with simple config', async () => {\n      http.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      typeOrm.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      redis.pingCheck = jest.fn().mockImplementation(() => mockExpectReadiness.info);\n      health.check = jest.fn().mockImplementation(() => mockExpectReadiness);\n\n      const readinessData = await controller.check();\n      expect(readinessData).toEqual(mockExpectReadiness);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "c03d27f4-1541-449a-84df-a926ec05eda4",
              "parentUUID": "fe6fc284-511b-40a6-8198-ef370b74029b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HealthModule > should be define",
              "title": "HealthModule > should be define",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { HealthModule } from '../health/health.module';\nimport { LivenessController } from '../health/controllers/liveness.controller';\nimport { ReadinessController } from '../health/controllers/readiness.controller';\n\ndescribe('HealthModule', () => {\n  let app: INestApplication;\n  let livenessController: LivenessController;\n  let readinessController: ReadinessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HealthModule,\n      ],\n    }).compile();\n\n    app = module.createNestApplication();\n    livenessController = module.get<LivenessController>(LivenessController);\n    readinessController = module.get<ReadinessController>(ReadinessController);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await Promise.all([app.close()]);\n  });\n\n  it('should be define', async () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be return status up', async () => {\n    expect(livenessController.getLiveness()).toEqual({ status: 'up' });\n  });\n\n  it('should be return readiness services', async () => {\n    const result = await readinessController.check();\n    expect(result).toHaveProperty('details');\n    expect(result).toHaveProperty('error');\n    expect(result).toHaveProperty('info');\n    expect(result).toHaveProperty('status');\n  });\n});\n",
              "err": {},
              "uuid": "5a7e947e-b0cc-4880-b989-3d176a5f9212",
              "parentUUID": "fe6fc284-511b-40a6-8198-ef370b74029b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HealthModule > should be return status up",
              "title": "HealthModule > should be return status up",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { HealthModule } from '../health/health.module';\nimport { LivenessController } from '../health/controllers/liveness.controller';\nimport { ReadinessController } from '../health/controllers/readiness.controller';\n\ndescribe('HealthModule', () => {\n  let app: INestApplication;\n  let livenessController: LivenessController;\n  let readinessController: ReadinessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HealthModule,\n      ],\n    }).compile();\n\n    app = module.createNestApplication();\n    livenessController = module.get<LivenessController>(LivenessController);\n    readinessController = module.get<ReadinessController>(ReadinessController);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await Promise.all([app.close()]);\n  });\n\n  it('should be define', async () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be return status up', async () => {\n    expect(livenessController.getLiveness()).toEqual({ status: 'up' });\n  });\n\n  it('should be return readiness services', async () => {\n    const result = await readinessController.check();\n    expect(result).toHaveProperty('details');\n    expect(result).toHaveProperty('error');\n    expect(result).toHaveProperty('info');\n    expect(result).toHaveProperty('status');\n  });\n});\n",
              "err": {},
              "uuid": "f5e9d10a-7188-4b7d-897b-e830d3127036",
              "parentUUID": "fe6fc284-511b-40a6-8198-ef370b74029b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HealthModule > should be return readiness services",
              "title": "HealthModule > should be return readiness services",
              "timedOut": false,
              "duration": 878,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { config } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { HealthModule } from '../health/health.module';\nimport { LivenessController } from '../health/controllers/liveness.controller';\nimport { ReadinessController } from '../health/controllers/readiness.controller';\n\ndescribe('HealthModule', () => {\n  let app: INestApplication;\n  let livenessController: LivenessController;\n  let readinessController: ReadinessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HealthModule,\n      ],\n    }).compile();\n\n    app = module.createNestApplication();\n    livenessController = module.get<LivenessController>(LivenessController);\n    readinessController = module.get<ReadinessController>(ReadinessController);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await Promise.all([app.close()]);\n  });\n\n  it('should be define', async () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should be return status up', async () => {\n    expect(livenessController.getLiveness()).toEqual({ status: 'up' });\n  });\n\n  it('should be return readiness services', async () => {\n    const result = await readinessController.check();\n    expect(result).toHaveProperty('details');\n    expect(result).toHaveProperty('error');\n    expect(result).toHaveProperty('info');\n    expect(result).toHaveProperty('status');\n  });\n});\n",
              "err": {},
              "uuid": "3512180f-1644-4225-af3c-f87e69610819",
              "parentUUID": "fe6fc284-511b-40a6-8198-ef370b74029b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Health - Live controller > should be defined",
              "title": "Health - Live controller > should be defined",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { LivenessController } from '../health/controllers/liveness.controller';\n\ndescribe('Health - Live controller', () => {\n  let controller: LivenessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [LivenessController],\n    }).compile();\n\n    controller = module.get<LivenessController>(LivenessController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should be return up liveness', () => {\n    expect(controller.getLiveness()).toEqual({ status: 'up' });\n  });\n});\n",
              "err": {},
              "uuid": "878c299a-944a-4866-8c19-10655bbd8a69",
              "parentUUID": "fe6fc284-511b-40a6-8198-ef370b74029b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Health - Live controller > should be return up liveness",
              "title": "Health - Live controller > should be return up liveness",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { LivenessController } from '../health/controllers/liveness.controller';\n\ndescribe('Health - Live controller', () => {\n  let controller: LivenessController;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [LivenessController],\n    }).compile();\n\n    controller = module.get<LivenessController>(LivenessController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should be return up liveness', () => {\n    expect(controller.getLiveness()).toEqual({ status: 'up' });\n  });\n});\n",
              "err": {},
              "uuid": "d5918ec1-7452-4e9f-8859-ad023f435613",
              "parentUUID": "fe6fc284-511b-40a6-8198-ef370b74029b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "healthConstants > should be return exclude to prefix global",
              "title": "healthConstants > should be return exclude to prefix global",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { RequestMethod } from '@nestjs/common';\nimport { controllersExcludes } from '../health/constants';\n\ndescribe('healthConstants', () => {\n  it('should be return exclude to prefix global', async () => {\n    expect(controllersExcludes).toEqual(expect.any(Array));\n    expect(controllersExcludes).toMatchObject([\n      {\n        path: '/health/liveness',\n        method: RequestMethod.GET,\n      },\n      {\n        path: '/health/readiness',\n        method: RequestMethod.GET,\n      },\n    ]);\n  });\n});\n",
              "err": {},
              "uuid": "523d6b44-b684-47d1-bfc1-3f41c530e172",
              "parentUUID": "fe6fc284-511b-40a6-8198-ef370b74029b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9cb1fa71-337f-40dd-b869-43bcf0578e30",
            "4b45646c-15bb-4f1f-9083-2e96c03cd5cc",
            "fa8b3e36-8cbd-4c70-b6ba-b4f13a9d1d64",
            "c03d27f4-1541-449a-84df-a926ec05eda4",
            "5a7e947e-b0cc-4880-b989-3d176a5f9212",
            "f5e9d10a-7188-4b7d-897b-e830d3127036",
            "3512180f-1644-4225-af3c-f87e69610819",
            "878c299a-944a-4866-8c19-10655bbd8a69",
            "d5918ec1-7452-4e9f-8859-ad023f435613",
            "523d6b44-b684-47d1-bfc1-3f41c530e172"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1709,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "e43ef524-5409-4f3c-b856-6b6192692c77",
      "title": "@tresdoce-nestjs-toolkit/http-client",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "184d157e-bbd5-42f2-96a4-0c554014140a",
          "title": "@tresdoce-nestjs-toolkit/http-client",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "HttpService > should be defined",
              "title": "HttpService > should be defined",
              "timedOut": false,
              "duration": 137,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "85ca8d9e-f26f-43ff-9257-3be04e4fea64",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpService > should be return status 200 - request",
              "title": "HttpService > should be return status 200 - request",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "e4525dd4-b445-47c3-82c4-94aca74dde88",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpService > should be return status 200 - get",
              "title": "HttpService > should be return status 200 - get",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "44e65d0d-3451-4daf-8f79-6099cf207aef",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpService > should be return status 201 - post",
              "title": "HttpService > should be return status 201 - post",
              "timedOut": false,
              "duration": 524,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "b1753f20-04c8-46c3-9ba2-1afde4624bb2",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpService > should be return status 200 - get by id",
              "title": "HttpService > should be return status 200 - get by id",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "8f7fe226-b338-4a7f-9d2e-480e0c271228",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpService > should be return status 200 - put",
              "title": "HttpService > should be return status 200 - put",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "d2ebd7ec-485e-42d0-9b81-05efa4cc09cb",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpService > should be return status 200 - delete",
              "title": "HttpService > should be return status 200 - delete",
              "timedOut": false,
              "duration": 448,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "e7ebf872-27a6-4ac8-90c1-fcdf66c45b2a",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpService > should be return status 200 - patch",
              "title": "HttpService > should be return status 200 - patch",
              "timedOut": false,
              "duration": 497,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "8d60ed16-d583-4a83-8a63-f451fd71a376",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpService > should be return status 200 - head",
              "title": "HttpService > should be return status 200 - head",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "0f79561b-0c46-49ea-89ae-01c15198fd24",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpService > should be return error",
              "title": "HttpService > should be return error",
              "timedOut": false,
              "duration": 513,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst API_NESTJS_STARTER = 'https://jsonplaceholder.typicode.com';\n\nconst mockRequestBody = {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto',\n};\n\ndescribe('HttpService', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) =>\n            configService.get('config.httpOptions'),\n          inject: [ConfigService],\n        }),\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n    service = module.get<HttpClientService>(HttpClientService);\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(HttpClientService);\n    expect(service.axiosRef).not.toBeNull();\n  });\n\n  it('should be return status 200 - request', async () => {\n    const { status, data } = await service.request({\n      url: `${API_NESTJS_STARTER}/posts`,\n      method: 'GET',\n    });\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 200 - get', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(data.length).toBeGreaterThan(0);\n  });\n\n  it('should be return status 201 - post', async () => {\n    const { status, data } = await service.post(`${API_NESTJS_STARTER}/posts`, {\n      data: mockRequestBody,\n    });\n    expect(status).toBe(201);\n    expect(data).toEqual({\n      ...mockRequestBody,\n      id: 101,\n    });\n  });\n\n  it('should be return status 200 - get by id', async () => {\n    const { status, data } = await service.get(`${API_NESTJS_STARTER}/posts/1`);\n    expect(status).toBe(200);\n    expect(data).toEqual(mockRequestBody);\n  });\n\n  it('should be return status 200 - put', async () => {\n    const { status, data } = await service.put(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - delete', async () => {\n    const { status, data } = await service.delete(`${API_NESTJS_STARTER}/posts/2`);\n    expect(status).toBe(200);\n    expect(data).toEqual({});\n  });\n\n  it('should be return status 200 - patch', async () => {\n    const { status, data } = await service.patch(`${API_NESTJS_STARTER}/posts/1`, {\n      data: {\n        ...mockRequestBody,\n        title: 'mockito',\n      },\n    });\n    expect(status).toBe(200);\n    expect(data).toEqual({ ...mockRequestBody, id: 1, title: 'mockito' });\n  });\n\n  it('should be return status 200 - head', async () => {\n    const { status, headers } = await service.head(`${API_NESTJS_STARTER}/posts`);\n    expect(status).toBe(200);\n    expect(headers).toHaveProperty('etag');\n  });\n\n  it('should be return error', async () => {\n    try {\n      const { data } = await service.get(`${API_NESTJS_STARTER}/postss`);\n      expect(data).toBe(200);\n    } catch (error) {\n      expect(error.response.status).toBe(404);\n      expect(error.message).toBe('Request failed with status code 404');\n    }\n  });\n});\n",
              "err": {},
              "uuid": "eb72eb2e-f5fb-4899-9ef5-768b3b0309d1",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpModule > registerAsync useFactory > should be define",
              "title": "HttpModule > registerAsync useFactory > should be define",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\nimport { HttpModuleAsyncOptions } from '../http/interfaces/http-module.interface';\n\nclass MockedClass {\n  createHttpOptions() {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n\ndescribe('HttpModule', () => {\n  const mockedUseFactory: HttpModuleAsyncOptions = {\n    useFactory: async () => ({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  };\n\n  describe('registerAsync useFactory', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseFactory),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseClassOptions: HttpModuleAsyncOptions = {\n    useClass: MockedClass,\n  };\n\n  describe('registerAsync useClass', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseClassOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseExistingOptions: HttpModuleAsyncOptions = {\n    extraProviders: [MockedClass],\n    useExisting: MockedClass,\n  };\n\n  describe('registerAsync useExisting', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseExistingOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('register', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.register({ ...config().httOptions }),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "5d10391b-d146-49fd-a125-284f577396b4",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpModule > registerAsync useFactory > should be define",
              "title": "HttpModule > registerAsync useFactory > should be define",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\nimport { HttpModuleAsyncOptions } from '../http/interfaces/http-module.interface';\n\nclass MockedClass {\n  createHttpOptions() {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n\ndescribe('HttpModule', () => {\n  const mockedUseFactory: HttpModuleAsyncOptions = {\n    useFactory: async () => ({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  };\n\n  describe('registerAsync useFactory', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseFactory),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseClassOptions: HttpModuleAsyncOptions = {\n    useClass: MockedClass,\n  };\n\n  describe('registerAsync useClass', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseClassOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseExistingOptions: HttpModuleAsyncOptions = {\n    extraProviders: [MockedClass],\n    useExisting: MockedClass,\n  };\n\n  describe('registerAsync useExisting', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseExistingOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('register', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.register({ ...config().httOptions }),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "3ca93c7a-f07d-4015-aa23-37fc92c1bdad",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpModule > registerAsync useFactory > should be define",
              "title": "HttpModule > registerAsync useFactory > should be define",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\nimport { HttpModuleAsyncOptions } from '../http/interfaces/http-module.interface';\n\nclass MockedClass {\n  createHttpOptions() {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n\ndescribe('HttpModule', () => {\n  const mockedUseFactory: HttpModuleAsyncOptions = {\n    useFactory: async () => ({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  };\n\n  describe('registerAsync useFactory', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseFactory),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseClassOptions: HttpModuleAsyncOptions = {\n    useClass: MockedClass,\n  };\n\n  describe('registerAsync useClass', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseClassOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseExistingOptions: HttpModuleAsyncOptions = {\n    extraProviders: [MockedClass],\n    useExisting: MockedClass,\n  };\n\n  describe('registerAsync useExisting', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseExistingOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('register', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.register({ ...config().httOptions }),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "e737e9cf-4136-4c39-9ea9-6b9ceaf09458",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpModule > registerAsync useFactory > should be define",
              "title": "HttpModule > registerAsync useFactory > should be define",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\nimport { HttpModuleAsyncOptions } from '../http/interfaces/http-module.interface';\n\nclass MockedClass {\n  createHttpOptions() {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n\ndescribe('HttpModule', () => {\n  const mockedUseFactory: HttpModuleAsyncOptions = {\n    useFactory: async () => ({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  };\n\n  describe('registerAsync useFactory', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseFactory),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseClassOptions: HttpModuleAsyncOptions = {\n    useClass: MockedClass,\n  };\n\n  describe('registerAsync useClass', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseClassOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  const mockedUseExistingOptions: HttpModuleAsyncOptions = {\n    extraProviders: [MockedClass],\n    useExisting: MockedClass,\n  };\n\n  describe('registerAsync useExisting', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.registerAsync(mockedUseExistingOptions),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('register', () => {\n    let app: INestApplication;\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [config],\n          }),\n          HttpClientModule.register({ ...config().httOptions }),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      await app.init;\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be define', async () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "7f93c9fa-b8d4-4ea6-889e-f360dea69f21",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpInterceptor > should be defined",
              "title": "HttpInterceptor > should be defined",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientInterceptor } from '../http/interceptors/httpClient.interceptor';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst executionContext: any = {\n  switchToHttp: jest.fn().mockReturnThis(),\n  getRequest: jest.fn().mockReturnThis(),\n  getResponse: jest.fn().mockReturnThis(),\n};\n\nconst callHandler: any = {\n  handle: jest.fn(),\n};\n\ndescribe('HttpInterceptor', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n  let interceptor: HttpClientInterceptor<any>;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule,\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n\n    service = module.get<HttpClientService>(HttpClientService);\n    interceptor = new HttpClientInterceptor(service);\n  });\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('should be intercept and pass headers', async () => {\n    await interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n  });\n});\n",
              "err": {},
              "uuid": "bd3d3c1b-1b06-4841-a5c1-3661e4d5d26a",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "HttpInterceptor > should be intercept and pass headers",
              "title": "HttpInterceptor > should be intercept and pass headers",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { HttpClientService } from '../http/services/httpClient.service';\nimport { HttpClientInterceptor } from '../http/interceptors/httpClient.interceptor';\nimport { HttpClientModule } from '../http/httpClient.module';\nimport { config } from './utils';\n\nconst executionContext: any = {\n  switchToHttp: jest.fn().mockReturnThis(),\n  getRequest: jest.fn().mockReturnThis(),\n  getResponse: jest.fn().mockReturnThis(),\n};\n\nconst callHandler: any = {\n  handle: jest.fn(),\n};\n\ndescribe('HttpInterceptor', () => {\n  let app: INestApplication;\n  let service: HttpClientService;\n  let interceptor: HttpClientInterceptor<any>;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [config],\n        }),\n        HttpClientModule,\n      ],\n    }).compile();\n    app = module.createNestApplication();\n    await app.init;\n\n    service = module.get<HttpClientService>(HttpClientService);\n    interceptor = new HttpClientInterceptor(service);\n  });\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('should be intercept and pass headers', async () => {\n    await interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n  });\n});\n",
              "err": {},
              "uuid": "37b68441-3cdf-47eb-abe9-44d04a3d588b",
              "parentUUID": "184d157e-bbd5-42f2-96a4-0c554014140a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "85ca8d9e-f26f-43ff-9257-3be04e4fea64",
            "e4525dd4-b445-47c3-82c4-94aca74dde88",
            "44e65d0d-3451-4daf-8f79-6099cf207aef",
            "b1753f20-04c8-46c3-9ba2-1afde4624bb2",
            "8f7fe226-b338-4a7f-9d2e-480e0c271228",
            "d2ebd7ec-485e-42d0-9b81-05efa4cc09cb",
            "e7ebf872-27a6-4ac8-90c1-fcdf66c45b2a",
            "8d60ed16-d583-4a83-8a63-f451fd71a376",
            "0f79561b-0c46-49ea-89ae-01c15198fd24",
            "eb72eb2e-f5fb-4899-9ef5-768b3b0309d1",
            "5d10391b-d146-49fd-a125-284f577396b4",
            "3ca93c7a-f07d-4015-aa23-37fc92c1bdad",
            "e737e9cf-4136-4c39-9ea9-6b9ceaf09458",
            "7f93c9fa-b8d4-4ea6-889e-f360dea69f21",
            "bd3d3c1b-1b06-4841-a5c1-3661e4d5d26a",
            "37b68441-3cdf-47eb-abe9-44d04a3d588b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3089,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "f2c72ae7-5b88-43aa-a247-386184d23cad",
      "title": "@tresdoce-nestjs-toolkit/mailer",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b1a04cfe-3128-43b3-9132-382678f5e452",
          "title": "@tresdoce-nestjs-toolkit/mailer",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "MailerService > should not be defined if a transport is not provided",
              "title": "MailerService > should not be defined if a transport is not provided",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "4a63df7d-5ce9-4886-a9dd-19444f9246a7",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should accept a smtp transport string",
              "title": "MailerService > should accept a smtp transport string",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "698ca358-e87c-4e83-aacb-d04d9e2c9a23",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should accept a smtp transports string",
              "title": "MailerService > should accept a smtp transports string",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "53f4062d-5f8e-4163-bfeb-fee875dd40d9",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should accept smtp transport options",
              "title": "MailerService > should accept smtp transport options",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "6803df53-e89d-4cef-93db-4c7250b6ebc7",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should accept a smtp transport instance",
              "title": "MailerService > should accept a smtp transport instance",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "5fd6c9c7-a446-41b5-9e84-24116877265a",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should send emails with nodemailer",
              "title": "MailerService > should send emails with nodemailer",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "cace48ee-2c20-436c-96b8-2da77529f987",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should send emails with nodemailer transports",
              "title": "MailerService > should send emails with nodemailer transports",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "c70575f6-d7c8-4e77-ba0e-7c12e6ef6496",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should send emails with nodemailer with different transports name",
              "title": "MailerService > should send emails with nodemailer with different transports name",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "c49764f5-d89a-4447-9572-9e08aa8671f6",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should send emails with nodemailer without transports",
              "title": "MailerService > should send emails with nodemailer without transports",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "41e696d9-aa2d-40a2-9a1a-6354e953e329",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should use mailerOptions.defaults when send emails",
              "title": "MailerService > should use mailerOptions.defaults when send emails",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "03be2caf-c4f4-4572-9351-358d964cf6e0",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should use custom transport to send mail",
              "title": "MailerService > should use custom transport to send mail",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "93977e5f-412b-4db6-9a45-bdddf69b8e8b",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the handlebars adapter",
              "title": "MailerService > should compile template with the handlebars adapter",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "8ae9ddf6-d02d-42f8-a8dd-69471b61b1b0",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the handlebars adapter with relative path",
              "title": "MailerService > should compile template with the handlebars adapter with relative path",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "d80c8a47-a4e4-4836-b21d-32c373ef4964",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the handlebars adapter with error template path",
              "title": "MailerService > should compile template with the handlebars adapter with error template path",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "ab39bd17-cddc-44b0-a116-6935756c8915",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the handlebars adapter with disabled inline-css",
              "title": "MailerService > should compile template with the handlebars adapter with disabled inline-css",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "51c3d1db-1119-4031-a99d-1608fb184677",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the handlebars adapter with enabled inline-css and media query",
              "title": "MailerService > should compile template with the handlebars adapter with enabled inline-css and media query",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "03d6af7b-8ab9-44ef-8678-bffbc1b96404",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the pug adapter",
              "title": "MailerService > should compile template with the pug adapter",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "1c8b8b2a-9168-4780-923c-3d8b5ba52beb",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the pug adapter with relative path",
              "title": "MailerService > should compile template with the pug adapter with relative path",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "dc03dc9a-7fa5-4902-9a61-d18f95ce0a38",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the pug adapter with error to read template",
              "title": "MailerService > should compile template with the pug adapter with error to read template",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "d6f7cd42-2b8f-49df-a4e3-7971072b5251",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the pug adapter without inline css",
              "title": "MailerService > should compile template with the pug adapter without inline css",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "b6eef981-a133-4e59-be5d-b4d62da17643",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the ejs adapter",
              "title": "MailerService > should compile template with the ejs adapter",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "ff5797e4-a900-4f50-96b7-674acdb12843",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the ejs adapter with error to read template",
              "title": "MailerService > should compile template with the ejs adapter with error to read template",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "ce9981ea-79f4-4b40-bf42-969c71431379",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the ejs adapter read template relative url",
              "title": "MailerService > should compile template with the ejs adapter read template relative url",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "683a1948-eb2e-4ba3-a408-4ab4c3006b6a",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the ejs adapter without css inline",
              "title": "MailerService > should compile template with the ejs adapter without css inline",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "bc4a2c3d-35c1-4c6d-b920-174852cbb546",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerService > should compile template with the ejs adapter with css inline",
              "title": "MailerService > should compile template with the ejs adapter with css inline",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { pathJoin } from '@tresdoce-nestjs-toolkit/test-utils';\nimport * as nodemailerMock from 'nodemailer-mock';\nimport MailMessage from 'nodemailer/lib/mailer/mail-message';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\n\nimport { MAILER_OPTIONS, MAILER_TRANSPORT_FACTORY } from '../mailer/constants/mailer.constant';\n\nimport { MailerOptions, TransportType } from '../mailer/interfaces/mailer-options.interface';\nimport { MailerTransportFactory } from '../mailer/interfaces/mailer-transport-factory.interface';\n\nimport { HandlebarsAdapter } from '../mailer/adapters/handlebars.adapter';\nimport { PugAdapter } from '../mailer/adapters/pug.adapter';\nimport { EjsAdapter } from '../mailer/adapters/ejs.adapter';\n\nimport { MailerService } from '../mailer/services/mailer.service';\n\nconst template_path = pathJoin(__dirname, 'utils/test-templates');\n\nasync function getMailerServiceForOptions(options: MailerOptions): Promise<MailerService> {\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      MailerService,\n    ],\n  }).compile();\n\n  return module.get<MailerService>(MailerService);\n}\n\nfunction spyOnSmtpSend(onMail: (mail: MailMessage) => void) {\n  return jest\n    .spyOn(SMTPTransport.prototype, 'send')\n    .mockImplementation(function (\n      mail: MailMessage,\n      callback: (err: Error | null, info: SMTPTransport.SentMessageInfo) => void,\n    ): void {\n      onMail(mail);\n      callback(null, {\n        envelope: {\n          from: mail.data.from as string,\n          to: [mail.data.to as string],\n        },\n        messageId: 'ABCD',\n        accepted: [],\n        rejected: [],\n        pending: [],\n        response: 'ok',\n      });\n    });\n}\n\nasync function getMailerServiceWithCustomTransport(options: MailerOptions): Promise<MailerService> {\n  class TestTransportFactory implements MailerTransportFactory {\n    createTransport(options?: TransportType): any {\n      return nodemailerMock.createTransport({ host: 'localhost', port: -100 });\n    }\n  }\n\n  const module: TestingModule = await Test.createTestingModule({\n    providers: [\n      {\n        name: MAILER_OPTIONS,\n        provide: MAILER_OPTIONS,\n        useValue: options,\n      },\n      {\n        name: MAILER_TRANSPORT_FACTORY,\n        provide: MAILER_TRANSPORT_FACTORY,\n        useClass: TestTransportFactory,\n      },\n      MailerService,\n    ],\n  }).compile();\n  await module.init();\n\n  return module.get<MailerService>(MailerService);\n}\n\njest.setTimeout(70000);\ndescribe('MailerService', () => {\n  it('should not be defined if a transport is not provided', async () => {\n    await expect(getMailerServiceForOptions({})).rejects.toMatchInlineSnapshot(\n      `[Error: Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.]`,\n    );\n  });\n\n  it('should accept a smtp transport string', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transports string', async () => {\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    expect(service).toBeDefined();\n    (service as any).transporters.forEach((value, key) => {\n      expect(value.transporter).toBeInstanceOf(SMTPTransport);\n    });\n  });\n\n  it('should accept smtp transport options', async () => {\n    const service = await getMailerServiceForOptions({\n      transport: {\n        secure: true,\n        requireTLS: true,\n        auth: {\n          user: 'user@domain.com',\n          pass: 'pass',\n        },\n        options: {\n          host: 'smtp.domain.com',\n        },\n      },\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBeInstanceOf(SMTPTransport);\n  });\n\n  it('should accept a smtp transport instance', async () => {\n    const transport = new SMTPTransport({});\n    const service = await getMailerServiceForOptions({\n      transport: transport,\n    });\n\n    expect(service).toBeDefined();\n    expect((service as any).transporter.transporter).toBe(transport);\n  });\n\n  it('should send emails with nodemailer', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer transports', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transports: {\n        myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n      },\n    });\n\n    await service.sendMail({\n      transporterName: 'myDomain',\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.to).toBe('user2@example.test');\n    expect(lastMail.data.subject).toBe('Test');\n    expect(lastMail.data.html).toBe('This is test.');\n  });\n\n  it('should send emails with nodemailer with different transports name', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {\n          myDomain: 'smtps://user@domain.com:pass@smtp.domain.com',\n        },\n      });\n\n      await service.sendMail({\n        transporterName: 'testDomain',\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\"Transporters object doesn't have testDomain key\");\n    }\n  });\n\n  it('should send emails with nodemailer without transports', async () => {\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transports: {},\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        html: 'This is test.',\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe('Transporter object undefined');\n    }\n  });\n\n  it('should use mailerOptions.defaults when send emails', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n      defaults: {\n        from: 'user1@example.test',\n      },\n    });\n\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n  });\n\n  it('should use custom transport to send mail', async () => {\n    const service = await getMailerServiceWithCustomTransport({\n      transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n    });\n    await service.sendMail({\n      to: 'user2@example.test',\n      subject: 'Test',\n      html: 'This is test.',\n    });\n\n    expect(nodemailerMock.mock.getSentMail().length).toEqual(1);\n  });\n\n  it('should compile template with the handlebars adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(),\n        dir: `${template_path}`,\n      },\n      options: {\n        strict: true,\n        partials: {\n          dir: `${template_path}`,\n        },\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./handlebars-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Handlebars test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n\n  it('should compile template with the handlebars adapter with error template path', async () => {\n    let templatePath = pathJoin(template_path, '/handlebars-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new HandlebarsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.hbs'`,\n      );\n    }\n  });\n\n  it('should compile template with the handlebars adapter with disabled inline-css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    /*{\n      myHelper: (context, value) => {\n        console.log(context, value);\n      },\n    }*/\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, { inlineCssEnabled: false }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the handlebars adapter with enabled inline-css and media query', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new HandlebarsAdapter(undefined, {\n          inlineCssEnabled: true,\n          inlineCssOptions: { url: ' ', preserveMediaQueries: true },\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/handlebars-template-media-query`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toContain('@media only screen and (max-width:350px)');\n    expect(lastMail.data.html).toContain('<p>Handlebars test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the pug adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with relative path', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter(),\n        dir: template_path,\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Pug test template.</p><p>Hello World!</p></body></html>',\n    );\n  });\n\n  it('should compile template with the pug adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/pug-templates');\n\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new PugAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          world: 'World',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(`ENOENT: no such file or directory, open '${templatePath}.pug'`);\n    }\n  });\n\n  it('should compile template with the pug adapter without inline css', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new PugAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/pug-template`,\n      context: {\n        world: 'World',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Pug test template.</p><p>Hello World!</p>');\n  });\n\n  it('should compile template with the ejs adapter', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with error to read template', async () => {\n    let templatePath = pathJoin(template_path, '/ejs-templates');\n    try {\n      let lastMail: MailMessage;\n      const send = spyOnSmtpSend((mail: MailMessage) => {\n        lastMail = mail;\n      });\n\n      const service = await getMailerServiceForOptions({\n        transport: new SMTPTransport({}),\n        template: {\n          adapter: new EjsAdapter(),\n        },\n      });\n\n      await service.sendMail({\n        from: 'user1@example.test',\n        to: 'user2@example.test',\n        subject: 'Test',\n        template: `${templatePath}`,\n        context: {\n          MAILER: 'Nest-modules TM',\n        },\n      });\n\n      expect(send).toHaveBeenCalled();\n    } catch (error) {\n      expect(error.message).toBe(\n        `Error: ENOENT: no such file or directory, open '${templatePath}.ejs'`,\n      );\n    }\n  });\n\n  it('should compile template with the ejs adapter read template relative url', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        dir: template_path,\n        adapter: new EjsAdapter(),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `./ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter without css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: false,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe('<p>Ejs test template. by Nest-modules TM</p>');\n  });\n\n  it('should compile template with the ejs adapter with css inline', async () => {\n    let lastMail: MailMessage;\n    const send = spyOnSmtpSend((mail: MailMessage) => {\n      lastMail = mail;\n    });\n\n    const service = await getMailerServiceForOptions({\n      transport: new SMTPTransport({}),\n      template: {\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n      },\n    });\n\n    await service.sendMail({\n      from: 'user1@example.test',\n      to: 'user2@example.test',\n      subject: 'Test',\n      template: `${template_path}/ejs-template`,\n      context: {\n        MAILER: 'Nest-modules TM',\n      },\n    });\n\n    expect(send).toHaveBeenCalled();\n    expect(lastMail.data.from).toBe('user1@example.test');\n    expect(lastMail.data.html).toBe(\n      '<html><head></head><body><p>Ejs test template. by Nest-modules TM</p></body></html>',\n    );\n  });\n});\n",
              "err": {},
              "uuid": "9b680f3c-a53f-475a-b64c-282b04a806d1",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerModule > forRoot > should be defined",
              "title": "MailerModule > forRoot > should be defined",
              "timedOut": false,
              "duration": 142,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { MailerModule } from '../mailer/mailer.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { dynamicConfig } from '@tresdoce-nestjs-toolkit/test-utils';\n\ndescribe('MailerModule', () => {\n  let app: INestApplication;\n\n  describe('forRoot', () => {\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          MailerModule.forRoot({\n            transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n            defaults: {\n              from: '\"nest-modules\" <modules@nestjs.com>',\n            },\n          }),\n        ],\n      }).compile();\n\n      app = moduleFixture.createNestApplication();\n      await app.init();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('forRootAsync', () => {\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [\n              dynamicConfig({\n                mailer: {\n                  transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n                  defaults: {\n                    from: '\"nest-modules\" <modules@nestjs.com>',\n                  },\n                },\n              }),\n            ],\n          }),\n          MailerModule,\n        ],\n      }).compile();\n\n      app = moduleFixture.createNestApplication();\n      await app.init();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "80c19543-4b64-4db0-b6d4-e1a16c555543",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "MailerModule > forRoot > should be defined",
              "title": "MailerModule > forRoot > should be defined",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { MailerModule } from '../mailer/mailer.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { dynamicConfig } from '@tresdoce-nestjs-toolkit/test-utils';\n\ndescribe('MailerModule', () => {\n  let app: INestApplication;\n\n  describe('forRoot', () => {\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          MailerModule.forRoot({\n            transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n            defaults: {\n              from: '\"nest-modules\" <modules@nestjs.com>',\n            },\n          }),\n        ],\n      }).compile();\n\n      app = moduleFixture.createNestApplication();\n      await app.init();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n\n  describe('forRootAsync', () => {\n    beforeEach(async () => {\n      const moduleFixture: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [\n              dynamicConfig({\n                mailer: {\n                  transport: 'smtps://user@domain.com:pass@smtp.domain.com',\n                  defaults: {\n                    from: '\"nest-modules\" <modules@nestjs.com>',\n                  },\n                },\n              }),\n            ],\n          }),\n          MailerModule,\n        ],\n      }).compile();\n\n      app = moduleFixture.createNestApplication();\n      await app.init();\n    });\n\n    it('should be defined', () => {\n      expect(app).toBeDefined();\n    });\n  });\n});\n",
              "err": {},
              "uuid": "a6afa1d1-a563-41f6-8af2-9ec1bcd33b07",
              "parentUUID": "b1a04cfe-3128-43b3-9132-382678f5e452",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a63df7d-5ce9-4886-a9dd-19444f9246a7",
            "698ca358-e87c-4e83-aacb-d04d9e2c9a23",
            "53f4062d-5f8e-4163-bfeb-fee875dd40d9",
            "6803df53-e89d-4cef-93db-4c7250b6ebc7",
            "5fd6c9c7-a446-41b5-9e84-24116877265a",
            "cace48ee-2c20-436c-96b8-2da77529f987",
            "c70575f6-d7c8-4e77-ba0e-7c12e6ef6496",
            "c49764f5-d89a-4447-9572-9e08aa8671f6",
            "41e696d9-aa2d-40a2-9a1a-6354e953e329",
            "03be2caf-c4f4-4572-9351-358d964cf6e0",
            "93977e5f-412b-4db6-9a45-bdddf69b8e8b",
            "8ae9ddf6-d02d-42f8-a8dd-69471b61b1b0",
            "d80c8a47-a4e4-4836-b21d-32c373ef4964",
            "ab39bd17-cddc-44b0-a116-6935756c8915",
            "51c3d1db-1119-4031-a99d-1608fb184677",
            "03d6af7b-8ab9-44ef-8678-bffbc1b96404",
            "1c8b8b2a-9168-4780-923c-3d8b5ba52beb",
            "dc03dc9a-7fa5-4902-9a61-d18f95ce0a38",
            "d6f7cd42-2b8f-49df-a4e3-7971072b5251",
            "b6eef981-a133-4e59-be5d-b4d62da17643",
            "ff5797e4-a900-4f50-96b7-674acdb12843",
            "ce9981ea-79f4-4b40-bf42-969c71431379",
            "683a1948-eb2e-4ba3-a408-4ab4c3006b6a",
            "bc4a2c3d-35c1-4c6d-b920-174852cbb546",
            "9b680f3c-a53f-475a-b64c-282b04a806d1",
            "80c19543-4b64-4db0-b6d4-e1a16c555543",
            "a6afa1d1-a563-41f6-8af2-9ec1bcd33b07"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 290,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "f9eab347-f807-439b-9ec2-73c18ef6bd33",
      "title": "@tresdoce-nestjs-toolkit/redis",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "929264ce-4ab9-439c-b606-06d563008d6b",
          "title": "@tresdoce-nestjs-toolkit/redis",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "RedisService > should be defined",
              "title": "RedisService > should be defined",
              "timedOut": false,
              "duration": 168,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "11016586-3d55-4238-8aee-30a3aea30d59",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisService > should be return echo",
              "title": "RedisService > should be return echo",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "85870768-8fcf-403f-939b-e069eba870f0",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisService > should be return false if key dont exist in redis",
              "title": "RedisService > should be return false if key dont exist in redis",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "5c194763-de01-4cae-8a4f-b55fdf6950e8",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisService > should be return OK when set value in redis",
              "title": "RedisService > should be return OK when set value in redis",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "2c3fa769-2265-4bfc-a857-6737cc04964e",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisService > should be return value of key",
              "title": "RedisService > should be return value of key",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "1b6174bc-2d1f-410f-a395-24c2b7337b77",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisService > should be return true if key exist in redis",
              "title": "RedisService > should be return true if key exist in redis",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "6b7e76db-a285-4862-8489-eaa2790f1cd8",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisService > should be set value in redis with expiration date",
              "title": "RedisService > should be set value in redis with expiration date",
              "timedOut": false,
              "duration": 3015,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "b621a19f-7186-43ac-bcde-ea399faf1f28",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisService > should be return true when copy key",
              "title": "RedisService > should be return true when copy key",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "f943c223-213a-4189-aa73-01abd4acad1a",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisService > should be return false when copy key",
              "title": "RedisService > should be return false when copy key",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "af590eb5-968d-4e61-b1ce-4170bd1ed415",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisService > should be rename a key",
              "title": "RedisService > should be rename a key",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "084e060d-7db4-4069-8289-52426ace9a00",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisService > should be return false when delete a key",
              "title": "RedisService > should be return false when delete a key",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "b3198b7f-9007-472e-a2fe-d7712893ca02",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisService > should be return true when delete a key",
              "title": "RedisService > should be return true when delete a key",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "696d14d7-5958-4775-b422-e68428a5886d",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisService > should be flush all",
              "title": "RedisService > should be flush all",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { delay, tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\nimport { RedisModule } from '../redis/redis.module';\nimport { RedisService } from '../redis/services/redis.service';\n\ndescribe('RedisService', () => {\n  let app: INestApplication;\n  let container: testContainers;\n  let service: RedisService;\n\n  beforeAll(async () => {\n    container = await new testContainers('redis:6.2-alpine', {\n      ...TCRedisOptions,\n      command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n      containerName: `${tcName}-redis-service`,\n    });\n    await container.start();\n  });\n\n  afterAll(async () => {\n    await container.stop({ removeVolumes: true });\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        RedisModule.register({\n          name: 'test-redis-module',\n          username: encodeURIComponent('default'),\n          password: encodeURIComponent('123456'),\n          host: global.hostContainer,\n          port: parseInt('6379', 10),\n        }),\n      ],\n      providers: [RedisService],\n    }).compile();\n\n    app = module.createNestApplication();\n    service = module.get(RedisService);\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  it('should be defined', async () => {\n    await expect(app).toBeDefined();\n  }, 50000);\n\n  it('should be return echo', async () => {\n    const msg = 'hello world';\n    expect(await service.echo(msg)).toEqual(msg);\n  });\n\n  it('should be return false if key dont exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeFalsy();\n  });\n\n  it('should be return OK when set value in redis', async () => {\n    expect(await service.set('myKey', 'hello world')).toEqual('OK');\n  });\n\n  it('should be return value of key', async () => {\n    expect(await service.get('myKey')).toEqual('hello world');\n  });\n\n  it('should be return true if key exist in redis', async () => {\n    expect(await service.exists('myKey')).toBeTruthy();\n  });\n\n  it('should be set value in redis with expiration date', async () => {\n    expect(await service.set('myKeyEx', 'hello world', 2)).toEqual('OK');\n    expect(await service.exists('myKeyEx')).toBeTruthy();\n    await delay(3000);\n    expect(await service.exists('myKeyEx')).toBeFalsy();\n  });\n\n  it('should be return true when copy key', async () => {\n    expect(await service.copy('myKey', 'copyKey')).toBeTruthy();\n  });\n\n  it('should be return false when copy key', async () => {\n    expect(await service.copy('myKey2', 'copyKey')).toBeFalsy();\n  });\n\n  it('should be rename a key', async () => {\n    expect(await service.rename('copyKey', 'newKey')).toEqual('OK');\n  });\n\n  it('should be return false when delete a key', async () => {\n    expect(await service.del('testKey')).toBeFalsy();\n  });\n\n  it('should be return true when delete a key', async () => {\n    expect(await service.del('newKey')).toBeTruthy();\n  });\n\n  it('should be flush all', async () => {\n    expect(await service.flushAll()).toEqual('OK');\n    expect(await service.get('myKey')).toBeNull();\n  });\n});\n",
              "err": {},
              "uuid": "c697fbee-c187-452b-9182-a17077469f46",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisModule > with auth > forRootAsync > should be defined",
              "title": "RedisModule > with auth > forRootAsync > should be defined",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { RedisModule } from '../redis/redis.module';\nimport { config } from './utils';\n\njest.setTimeout(70000);\ndescribe('RedisModule', () => {\n  describe('with auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        containerName: `${tcName}-redis-module-with-auth`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    describe('forRootAsync', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            ConfigModule.forRoot({\n              isGlobal: true,\n              load: [config],\n            }),\n            RedisModule,\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n\n    describe('register', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            RedisModule.register({\n              name: 'test-redis-module',\n              username: encodeURIComponent('default'),\n              password: encodeURIComponent('123456'),\n              host: global.hostContainer,\n              port: parseInt('6379', 10),\n            }),\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n  });\n\n  describe('without auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        containerName: `${tcName}-redis-module-without-auth`,\n        envs: {},\n        ports: [\n          {\n            container: 6379,\n            host: 6380,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          RedisModule.register({\n            host: global.hostContainer,\n            port: parseInt('6380', 10),\n            database: 1,\n          }),\n        ],\n      }).compile();\n\n      app = module.createNestApplication();\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n  });\n});\n",
              "err": {},
              "uuid": "7399d563-9b92-4b5b-9f85-88ff3462f41f",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisModule > with auth > forRootAsync > should be defined",
              "title": "RedisModule > with auth > forRootAsync > should be defined",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { RedisModule } from '../redis/redis.module';\nimport { config } from './utils';\n\njest.setTimeout(70000);\ndescribe('RedisModule', () => {\n  describe('with auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        containerName: `${tcName}-redis-module-with-auth`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    describe('forRootAsync', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            ConfigModule.forRoot({\n              isGlobal: true,\n              load: [config],\n            }),\n            RedisModule,\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n\n    describe('register', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            RedisModule.register({\n              name: 'test-redis-module',\n              username: encodeURIComponent('default'),\n              password: encodeURIComponent('123456'),\n              host: global.hostContainer,\n              port: parseInt('6379', 10),\n            }),\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n  });\n\n  describe('without auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        containerName: `${tcName}-redis-module-without-auth`,\n        envs: {},\n        ports: [\n          {\n            container: 6379,\n            host: 6380,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          RedisModule.register({\n            host: global.hostContainer,\n            port: parseInt('6380', 10),\n            database: 1,\n          }),\n        ],\n      }).compile();\n\n      app = module.createNestApplication();\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n  });\n});\n",
              "err": {},
              "uuid": "4786c4d9-73a8-4f93-86a1-46c3f90b26ce",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "RedisModule > with auth > forRootAsync > should be defined",
              "title": "RedisModule > with auth > forRootAsync > should be defined",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { tcName, TCRedisOptions, testContainers } from '@tresdoce-nestjs-toolkit/test-utils';\n\nimport { RedisModule } from '../redis/redis.module';\nimport { config } from './utils';\n\njest.setTimeout(70000);\ndescribe('RedisModule', () => {\n  describe('with auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        containerName: `${tcName}-redis-module-with-auth`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    describe('forRootAsync', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            ConfigModule.forRoot({\n              isGlobal: true,\n              load: [config],\n            }),\n            RedisModule,\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n\n    describe('register', () => {\n      beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n          imports: [\n            RedisModule.register({\n              name: 'test-redis-module',\n              username: encodeURIComponent('default'),\n              password: encodeURIComponent('123456'),\n              host: global.hostContainer,\n              port: parseInt('6379', 10),\n            }),\n          ],\n        }).compile();\n\n        app = module.createNestApplication();\n        await app.init();\n      });\n\n      afterEach(async () => {\n        await app.close();\n      });\n\n      it('should be defined', async () => {\n        await expect(app).toBeDefined();\n      }, 50000);\n    });\n  });\n\n  describe('without auth', () => {\n    let app: INestApplication;\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        containerName: `${tcName}-redis-module-without-auth`,\n        envs: {},\n        ports: [\n          {\n            container: 6379,\n            host: 6380,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          RedisModule.register({\n            host: global.hostContainer,\n            port: parseInt('6380', 10),\n            database: 1,\n          }),\n        ],\n      }).compile();\n\n      app = module.createNestApplication();\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n  });\n});\n",
              "err": {},
              "uuid": "a1c0026e-1c0d-434c-96d7-81f3ec288790",
              "parentUUID": "929264ce-4ab9-439c-b606-06d563008d6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "11016586-3d55-4238-8aee-30a3aea30d59",
            "85870768-8fcf-403f-939b-e069eba870f0",
            "5c194763-de01-4cae-8a4f-b55fdf6950e8",
            "2c3fa769-2265-4bfc-a857-6737cc04964e",
            "1b6174bc-2d1f-410f-a395-24c2b7337b77",
            "6b7e76db-a285-4862-8489-eaa2790f1cd8",
            "b621a19f-7186-43ac-bcde-ea399faf1f28",
            "f943c223-213a-4189-aa73-01abd4acad1a",
            "af590eb5-968d-4e61-b1ce-4170bd1ed415",
            "084e060d-7db4-4069-8289-52426ace9a00",
            "b3198b7f-9007-472e-a2fe-d7712893ca02",
            "696d14d7-5958-4775-b422-e68428a5886d",
            "c697fbee-c187-452b-9182-a17077469f46",
            "7399d563-9b92-4b5b-9f85-88ff3462f41f",
            "4786c4d9-73a8-4f93-86a1-46c3f90b26ce",
            "a1c0026e-1c0d-434c-96d7-81f3ec288790"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3410,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "32efc9dd-077a-44a0-9782-3568b902ae45",
      "title": "@tresdoce-nestjs-toolkit/response-parser",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e7184df6-7222-4753-a93d-8fb218759ce3",
          "title": "@tresdoce-nestjs-toolkit/response-parser",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "ResponseInterceptor > should be defined",
              "title": "ResponseInterceptor > should be defined",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { ResponseInterceptor } from '../response/response.interceptor';\nimport {\n  JestFN,\n  fixtureUserResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { of } from 'rxjs';\n\nconst executionContext: any = JestFN.executionContext;\n\ndescribe('ResponseInterceptor', () => {\n  let interceptor = new ResponseInterceptor();\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('should return an ResponseInterceptor instance simple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserResponse)),\n    };\n\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject(fixtureUserResponse);\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  });\n\n  it('should return an ResponseInterceptor instance multiple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserArrayResponse)),\n    };\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject({ data: fixtureUserArrayResponse });\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  });\n});\n",
              "err": {},
              "uuid": "a6983541-34d6-491b-87e5-8c9487245d85",
              "parentUUID": "e7184df6-7222-4753-a93d-8fb218759ce3",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ResponseInterceptor > should return an ResponseInterceptor instance simple entity",
              "title": "ResponseInterceptor > should return an ResponseInterceptor instance simple entity",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { ResponseInterceptor } from '../response/response.interceptor';\nimport {\n  JestFN,\n  fixtureUserResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { of } from 'rxjs';\n\nconst executionContext: any = JestFN.executionContext;\n\ndescribe('ResponseInterceptor', () => {\n  let interceptor = new ResponseInterceptor();\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('should return an ResponseInterceptor instance simple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserResponse)),\n    };\n\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject(fixtureUserResponse);\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  });\n\n  it('should return an ResponseInterceptor instance multiple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserArrayResponse)),\n    };\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject({ data: fixtureUserArrayResponse });\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  });\n});\n",
              "err": {},
              "uuid": "5e5435f3-9267-45d2-9d76-a989b4e2f790",
              "parentUUID": "e7184df6-7222-4753-a93d-8fb218759ce3",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "ResponseInterceptor > should return an ResponseInterceptor instance multiple entity",
              "title": "ResponseInterceptor > should return an ResponseInterceptor instance multiple entity",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { ResponseInterceptor } from '../response/response.interceptor';\nimport {\n  JestFN,\n  fixtureUserResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { of } from 'rxjs';\n\nconst executionContext: any = JestFN.executionContext;\n\ndescribe('ResponseInterceptor', () => {\n  let interceptor = new ResponseInterceptor();\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('should return an ResponseInterceptor instance simple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserResponse)),\n    };\n\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject(fixtureUserResponse);\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  });\n\n  it('should return an ResponseInterceptor instance multiple entity', (done) => {\n    const callHandler: any = {\n      handle: jest.fn(() => of(fixtureUserArrayResponse)),\n    };\n    const obs = interceptor.intercept(executionContext, callHandler);\n    expect(callHandler.handle).toBeCalledTimes(1);\n\n    obs.subscribe({\n      next: (value) => {\n        expect(value).toMatchObject({ data: fixtureUserArrayResponse });\n      },\n      error: (error) => {\n        throw error;\n      },\n      complete: () => {\n        done();\n      },\n    });\n  });\n});\n",
              "err": {},
              "uuid": "78fb86ca-e1cd-4a81-8e02-9ab99c0011cd",
              "parentUUID": "e7184df6-7222-4753-a93d-8fb218759ce3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6983541-34d6-491b-87e5-8c9487245d85",
            "5e5435f3-9267-45d2-9d76-a989b4e2f790",
            "78fb86ca-e1cd-4a81-8e02-9ab99c0011cd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "59ffe15e-56ae-404c-a851-0be321a52c9d",
      "title": "@tresdoce-nestjs-toolkit/test-utils",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
          "title": "@tresdoce-nestjs-toolkit/test-utils",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "globalTestContainers > should be initialize service from docker-compose.yml",
              "title": "globalTestContainers > should be initialize service from docker-compose.yml",
              "timedOut": false,
              "duration": 12488,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { StartedDockerComposeEnvironment } from 'testcontainers';\nimport { closeDockerCompose, initDockerCompose } from '../testcontainers';\nimport path from 'path';\n\ndescribe('globalTestContainers', () => {\n  const composeFilePath = path.resolve(__dirname, '..', 'fixtures', 'docker-compose');\n  const composeFile = 'docker-compose.yml';\n\n  it('should be initialize service from docker-compose.yml', async () => {\n    const services = ['mongo'];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize all services from docker-compose.yml', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize services from docker-compose.yml in default path and filename', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(services)();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n});\n",
              "err": {},
              "uuid": "ae16261d-ac7f-470b-b5e2-5ecc5e756d51",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "globalTestContainers > should be initialize all services from docker-compose.yml",
              "title": "globalTestContainers > should be initialize all services from docker-compose.yml",
              "timedOut": false,
              "duration": 13320,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { StartedDockerComposeEnvironment } from 'testcontainers';\nimport { closeDockerCompose, initDockerCompose } from '../testcontainers';\nimport path from 'path';\n\ndescribe('globalTestContainers', () => {\n  const composeFilePath = path.resolve(__dirname, '..', 'fixtures', 'docker-compose');\n  const composeFile = 'docker-compose.yml';\n\n  it('should be initialize service from docker-compose.yml', async () => {\n    const services = ['mongo'];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize all services from docker-compose.yml', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize services from docker-compose.yml in default path and filename', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(services)();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n});\n",
              "err": {},
              "uuid": "422a7053-a3d7-4791-8059-07643da9e223",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "globalTestContainers > should be initialize services from docker-compose.yml in default path and filename",
              "title": "globalTestContainers > should be initialize services from docker-compose.yml in default path and filename",
              "timedOut": false,
              "duration": 11840,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { StartedDockerComposeEnvironment } from 'testcontainers';\nimport { closeDockerCompose, initDockerCompose } from '../testcontainers';\nimport path from 'path';\n\ndescribe('globalTestContainers', () => {\n  const composeFilePath = path.resolve(__dirname, '..', 'fixtures', 'docker-compose');\n  const composeFile = 'docker-compose.yml';\n\n  it('should be initialize service from docker-compose.yml', async () => {\n    const services = ['mongo'];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize all services from docker-compose.yml', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(\n      services,\n      composeFilePath,\n      composeFile,\n    )();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n\n  it('should be initialize services from docker-compose.yml in default path and filename', async () => {\n    const services = [];\n    const environment: StartedDockerComposeEnvironment = await initDockerCompose(services)();\n    expect(environment).toBeDefined();\n    expect(environment).toBeInstanceOf(StartedDockerComposeEnvironment);\n    await closeDockerCompose({ removeVolumes: true })();\n  });\n});\n",
              "err": {},
              "uuid": "4fdea3f6-e977-4b4a-aa21-8bd6a2ffc029",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be defined",
              "title": "TestContainers > Redis > should be defined",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "d90f9f2c-7a1a-4bb1-97e4-45d7ab44cb04",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be return exception of instance",
              "title": "TestContainers > Redis > should be return exception of instance",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "8dfef451-4960-4c31-8a42-8202f300634f",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be get instance of test container",
              "title": "TestContainers > Redis > should be get instance of test container",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "b3971aca-29cf-45ab-91ab-66ba30f5a52b",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be return envs of instance",
              "title": "TestContainers > Redis > should be return envs of instance",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "8ebe5424-5e2f-495d-a549-7e5abf1465c6",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be return container instance",
              "title": "TestContainers > Redis > should be return container instance",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "a4a06033-e0aa-4d7b-b7d1-100493200c44",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be return host of container instance",
              "title": "TestContainers > Redis > should be return host of container instance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "c8d377e9-a096-4cf2-b2fb-aea27984399f",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be return name of container instance",
              "title": "TestContainers > Redis > should be return name of container instance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "5bcb1187-f5ec-426d-816f-3d1dbaeaecca",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be return mapped port",
              "title": "TestContainers > Redis > should be return mapped port",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "8680e8a6-ae29-42ca-a315-d65e8d56b9d8",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be defined",
              "title": "TestContainers > Redis > should be defined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "535737b1-2d43-4403-a9cb-d81b8d8e1b07",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be defined",
              "title": "TestContainers > Redis > should be defined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "91483ab4-cb79-4bb3-9f08-2ae1ce1aeeba",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be defined",
              "title": "TestContainers > Redis > should be defined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "c3afe23f-836e-4d42-afa9-9e2d274df350",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be defined",
              "title": "TestContainers > Redis > should be defined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "ab86db47-5fb8-4d38-9336-5835dffede64",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TestContainers > Redis > should be defined",
              "title": "TestContainers > Redis > should be defined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { testContainers } from '../testcontainers';\nimport { StartedGenericContainer } from 'testcontainers/dist/src/generic-container/started-generic-container';\n\nimport {\n  TCRedisOptions,\n  TCDynamoDBOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n} from '../fixtures';\n\njest.setTimeout(70000);\ndescribe('TestContainers', () => {\n  describe('Redis', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('redis:6.2-alpine', {\n        ...TCRedisOptions,\n        command: ['redis-server', '--appendonly', 'yes', '--requirepass', '123456'],\n        ports: [\n          {\n            container: 6379,\n            host: 6370,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return exception of instance', async () => {\n      try {\n        await new testContainers('postgres:13', TCPostgresOptions);\n      } catch (error) {\n        expect(error.message).toBe('Use testContainers.getInstance() instead of new.');\n      }\n    });\n\n    it('should be get instance of test container', () => {\n      const instance = testContainers.getInstance();\n      expect(instance).toBeInstanceOf(testContainers);\n    });\n\n    it('should be return envs of instance', () => {\n      const instanceEnvs = container.getEnvs();\n      expect(instanceEnvs).toEqual(TCRedisOptions.envs);\n    });\n\n    it('should be return container instance', () => {\n      const instanceContainer = container.getContainer();\n      expect(instanceContainer).toBeDefined();\n      expect(instanceContainer).toBeInstanceOf(StartedGenericContainer);\n    });\n\n    it('should be return host of container instance', () => {\n      const instanceHost = container.getHost();\n      expect(instanceHost).toBeDefined();\n      expect(instanceHost).toEqual('localhost');\n    });\n\n    it('should be return name of container instance', () => {\n      const instanceContainerName = container.getName();\n      expect(instanceContainerName).toBeDefined();\n      expect(instanceContainerName).toContain(TCRedisOptions.containerName);\n    });\n\n    it('should be return mapped port', () => {\n      const mappedPort = container.getMappedPort(6379);\n      expect(mappedPort).toEqual(6370);\n    });\n  });\n\n  describe('DynamoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('amazon/dynamodb-local:latest', {\n        ...TCDynamoDBOptions,\n        ports: [\n          {\n            container: 8000,\n            host: 8002,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MongoDB', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        ports: [\n          {\n            container: 27017,\n            host: 27012,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('MySql', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        ports: [\n          {\n            container: 3306,\n            host: 52000,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('Postgres', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', TCPostgresOptions);\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n\n  describe('ElasticSearch', () => {\n    let container: testContainers;\n\n    beforeAll(async () => {\n      container = await new testContainers('elasticsearch:8.3.3', {\n        ...TCElasticSearchOptions,\n        ports: [\n          {\n            container: 9200,\n            host: 9201,\n          },\n        ],\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    it('should be defined', () => {\n      expect(container).toBeDefined();\n      expect(container).toBeInstanceOf(testContainers);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "85a2c9a6-5564-478a-b86a-f7b71e5fff5a",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "utilities > should be return delay default time",
              "title": "utilities > should be return delay default time",
              "timedOut": false,
              "duration": 10010,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { delay, pathJoin } from '../utilities';\nimport path from 'path';\n\ndescribe('utilities', () => {\n  it('should be return delay default time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay();\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n\n  it('should be return delay custom time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay(60);\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 60);\n  });\n\n  it('should be return a join of paths', async () => {\n    const filePath = pathJoin(__dirname, 'join');\n    expect(filePath).toBe(path.join(__dirname, 'join'));\n  });\n});\n",
              "err": {},
              "uuid": "a5dd9190-49e4-4178-8c99-71c915c75269",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "utilities > should be return delay custom time",
              "title": "utilities > should be return delay custom time",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { delay, pathJoin } from '../utilities';\nimport path from 'path';\n\ndescribe('utilities', () => {\n  it('should be return delay default time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay();\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n\n  it('should be return delay custom time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay(60);\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 60);\n  });\n\n  it('should be return a join of paths', async () => {\n    const filePath = pathJoin(__dirname, 'join');\n    expect(filePath).toBe(path.join(__dirname, 'join'));\n  });\n});\n",
              "err": {},
              "uuid": "1c657606-99d0-478b-a4b8-191c90c44950",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "utilities > should be return a join of paths",
              "title": "utilities > should be return a join of paths",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { delay, pathJoin } from '../utilities';\nimport path from 'path';\n\ndescribe('utilities', () => {\n  it('should be return delay default time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay();\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n\n  it('should be return delay custom time', async () => {\n    jest.spyOn(global, 'setTimeout');\n    await delay(60);\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 60);\n  });\n\n  it('should be return a join of paths', async () => {\n    const filePath = pathJoin(__dirname, 'join');\n    expect(filePath).toBe(path.join(__dirname, 'join'));\n  });\n});\n",
              "err": {},
              "uuid": "0d254de7-9754-49dc-88b3-fe33a875b433",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Config > baseConfig > should be return config",
              "title": "Config > baseConfig > should be return config",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { config, dynamicConfig } from '../config/index';\nimport { appConfigBase } from '../fixtures';\n\ndescribe('Config', () => {\n  describe('baseConfig', () => {\n    it('should be return config', async () => {\n      expect(config()).toBeDefined();\n      expect(config()).not.toBe(null);\n      expect(typeof config()).toBe('object');\n      expect(config()).toEqual(appConfigBase);\n    });\n  });\n\n  describe('dynamicConfig', () => {\n    it('should be return config with args', async () => {\n      const args = {\n        httOptions: {\n          timeout: 5000,\n          maxRedirects: 5,\n        },\n      };\n\n      expect(dynamicConfig(args)()).toBeDefined();\n      expect(dynamicConfig(args)()).not.toBe(null);\n      expect(typeof dynamicConfig(args)()).toBe('object');\n      expect(dynamicConfig(args)()).toEqual({ ...appConfigBase, ...args });\n    });\n\n    it('should be return config without args', async () => {\n      expect(dynamicConfig()()).toBeDefined();\n      expect(dynamicConfig()()).not.toBe(null);\n      expect(typeof dynamicConfig()()).toBe('object');\n      expect(dynamicConfig()()).toEqual(appConfigBase);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "46495526-d2b1-452c-9e17-4720a981dae1",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Config > baseConfig > should be return config with args",
              "title": "Config > baseConfig > should be return config with args",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { config, dynamicConfig } from '../config/index';\nimport { appConfigBase } from '../fixtures';\n\ndescribe('Config', () => {\n  describe('baseConfig', () => {\n    it('should be return config', async () => {\n      expect(config()).toBeDefined();\n      expect(config()).not.toBe(null);\n      expect(typeof config()).toBe('object');\n      expect(config()).toEqual(appConfigBase);\n    });\n  });\n\n  describe('dynamicConfig', () => {\n    it('should be return config with args', async () => {\n      const args = {\n        httOptions: {\n          timeout: 5000,\n          maxRedirects: 5,\n        },\n      };\n\n      expect(dynamicConfig(args)()).toBeDefined();\n      expect(dynamicConfig(args)()).not.toBe(null);\n      expect(typeof dynamicConfig(args)()).toBe('object');\n      expect(dynamicConfig(args)()).toEqual({ ...appConfigBase, ...args });\n    });\n\n    it('should be return config without args', async () => {\n      expect(dynamicConfig()()).toBeDefined();\n      expect(dynamicConfig()()).not.toBe(null);\n      expect(typeof dynamicConfig()()).toBe('object');\n      expect(dynamicConfig()()).toEqual(appConfigBase);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "67d548d1-4659-4fc2-a740-e6606ea62c18",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Config > baseConfig > should be return config without args",
              "title": "Config > baseConfig > should be return config without args",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { config, dynamicConfig } from '../config/index';\nimport { appConfigBase } from '../fixtures';\n\ndescribe('Config', () => {\n  describe('baseConfig', () => {\n    it('should be return config', async () => {\n      expect(config()).toBeDefined();\n      expect(config()).not.toBe(null);\n      expect(typeof config()).toBe('object');\n      expect(config()).toEqual(appConfigBase);\n    });\n  });\n\n  describe('dynamicConfig', () => {\n    it('should be return config with args', async () => {\n      const args = {\n        httOptions: {\n          timeout: 5000,\n          maxRedirects: 5,\n        },\n      };\n\n      expect(dynamicConfig(args)()).toBeDefined();\n      expect(dynamicConfig(args)()).not.toBe(null);\n      expect(typeof dynamicConfig(args)()).toBe('object');\n      expect(dynamicConfig(args)()).toEqual({ ...appConfigBase, ...args });\n    });\n\n    it('should be return config without args', async () => {\n      expect(dynamicConfig()()).toBeDefined();\n      expect(dynamicConfig()()).not.toBe(null);\n      expect(typeof dynamicConfig()()).toBe('object');\n      expect(dynamicConfig()()).toEqual(appConfigBase);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "01bf11a2-ec31-4dfd-b2c6-270cf28af4d0",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > appConfigBase > should be return appBaseConfig",
              "title": "Fixtures > appConfigBase > should be return appBaseConfig",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "6d2479c6-280d-4961-80f9-f2929ac73af3",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > appConfigBase > should be return appBaseConfig",
              "title": "Fixtures > appConfigBase > should be return appBaseConfig",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "2d058df6-8d11-4431-a4b7-fdcef093c33c",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > appConfigBase > should be define Redis options",
              "title": "Fixtures > appConfigBase > should be define Redis options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "502f7afe-83b6-4f83-8a50-edb962e27bcb",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > appConfigBase > should be define DynamoDB options",
              "title": "Fixtures > appConfigBase > should be define DynamoDB options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "9487ab1c-332c-4117-b819-33b7b32a3aca",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > appConfigBase > should be define MongoDB options",
              "title": "Fixtures > appConfigBase > should be define MongoDB options",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "9e336c55-038d-4076-8e95-44576d403b3b",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > appConfigBase > should be define MySql options",
              "title": "Fixtures > appConfigBase > should be define MySql options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "a63d0ef3-6669-4033-a7c8-55d33cb9c1af",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > appConfigBase > should be define Postgres options",
              "title": "Fixtures > appConfigBase > should be define Postgres options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "83928130-ea15-4531-ba08-e466cee1b0bc",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "Fixtures > appConfigBase > should be define ElasticSearch options",
              "title": "Fixtures > appConfigBase > should be define ElasticSearch options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import {\n  appConfigBase,\n  manifest,\n  TCRedisOptions,\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  TCElasticSearchOptions,\n  TCDynamoDBOptions,\n} from '../fixtures';\n\nconst containerName_prefix = 'tresdoce-test-container';\ndescribe('Fixtures', () => {\n  describe('appConfigBase', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(appConfigBase).toBeDefined();\n      expect(appConfigBase).not.toBe(null);\n      expect(typeof appConfigBase).toBe('object');\n    });\n  });\n\n  describe('manifest', () => {\n    it('should be return appBaseConfig', async () => {\n      expect(manifest).toBeDefined();\n      expect(manifest).not.toBe(null);\n      expect(typeof manifest).toBe('object');\n    });\n  });\n\n  describe('TestContainers options', () => {\n    it('should be define Redis options', async () => {\n      expect(TCRedisOptions).toBeDefined();\n      expect(TCRedisOptions).not.toBe(null);\n      expect(typeof TCRedisOptions).toBe('object');\n      expect(TCRedisOptions.containerName).toEqual(`${containerName_prefix}-redis`);\n      expect(TCRedisOptions.ports).toEqual([\n        {\n          container: 6379,\n          host: 6379,\n        },\n      ]);\n    });\n\n    it('should be define DynamoDB options', async () => {\n      expect(TCDynamoDBOptions).toBeDefined();\n      expect(TCDynamoDBOptions).not.toBe(null);\n      expect(typeof TCDynamoDBOptions).toBe('object');\n      expect(TCDynamoDBOptions.containerName).toEqual(`${containerName_prefix}-dynamodb`);\n      expect(TCDynamoDBOptions.ports).toEqual([\n        {\n          container: 8000,\n          host: 8000,\n        },\n      ]);\n    });\n\n    it('should be define MongoDB options', async () => {\n      expect(TCMongoOptions).toBeDefined();\n      expect(TCMongoOptions).not.toBe(null);\n      expect(typeof TCMongoOptions).toBe('object');\n      expect(TCMongoOptions.containerName).toEqual(`${containerName_prefix}-mongo`);\n      expect(TCMongoOptions.ports).toEqual([\n        {\n          container: 27017,\n          host: 27017,\n        },\n      ]);\n    });\n\n    it('should be define MySql options', async () => {\n      expect(TCMySqlOptions).toBeDefined();\n      expect(TCMySqlOptions).not.toBe(null);\n      expect(typeof TCMySqlOptions).toBe('object');\n      expect(TCMySqlOptions.containerName).toEqual(`${containerName_prefix}-mysql`);\n      expect(TCMySqlOptions.ports).toEqual([\n        {\n          container: 3306,\n          host: 3306,\n        },\n      ]);\n    });\n\n    it('should be define Postgres options', async () => {\n      expect(TCPostgresOptions).toBeDefined();\n      expect(TCPostgresOptions).not.toBe(null);\n      expect(typeof TCPostgresOptions).toBe('object');\n      expect(TCPostgresOptions.containerName).toEqual(`${containerName_prefix}-postgres`);\n      expect(TCPostgresOptions.ports).toEqual([\n        {\n          container: 5432,\n          host: 5432,\n        },\n      ]);\n    });\n\n    it('should be define ElasticSearch options', async () => {\n      expect(TCElasticSearchOptions).toBeDefined();\n      expect(TCElasticSearchOptions).not.toBe(null);\n      expect(typeof TCElasticSearchOptions).toBe('object');\n      expect(TCElasticSearchOptions.containerName).toEqual(`${containerName_prefix}-elasticsearch`);\n      expect(TCElasticSearchOptions.ports).toEqual([\n        {\n          container: 9200,\n          host: 9200,\n        },\n      ]);\n    });\n  });\n});\n",
              "err": {},
              "uuid": "56f42424-21e7-43ac-8d01-9bab8c2e8125",
              "parentUUID": "e1004c6c-c1f8-49a0-a13e-5844c8325982",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae16261d-ac7f-470b-b5e2-5ecc5e756d51",
            "422a7053-a3d7-4791-8059-07643da9e223",
            "4fdea3f6-e977-4b4a-aa21-8bd6a2ffc029",
            "d90f9f2c-7a1a-4bb1-97e4-45d7ab44cb04",
            "8dfef451-4960-4c31-8a42-8202f300634f",
            "b3971aca-29cf-45ab-91ab-66ba30f5a52b",
            "8ebe5424-5e2f-495d-a549-7e5abf1465c6",
            "a4a06033-e0aa-4d7b-b7d1-100493200c44",
            "c8d377e9-a096-4cf2-b2fb-aea27984399f",
            "5bcb1187-f5ec-426d-816f-3d1dbaeaecca",
            "8680e8a6-ae29-42ca-a315-d65e8d56b9d8",
            "535737b1-2d43-4403-a9cb-d81b8d8e1b07",
            "91483ab4-cb79-4bb3-9f08-2ae1ce1aeeba",
            "c3afe23f-836e-4d42-afa9-9e2d274df350",
            "ab86db47-5fb8-4d38-9336-5835dffede64",
            "85a2c9a6-5564-478a-b86a-f7b71e5fff5a",
            "a5dd9190-49e4-4178-8c99-71c915c75269",
            "1c657606-99d0-478b-a4b8-191c90c44950",
            "0d254de7-9754-49dc-88b3-fe33a875b433",
            "46495526-d2b1-452c-9e17-4720a981dae1",
            "67d548d1-4659-4fc2-a740-e6606ea62c18",
            "01bf11a2-ec31-4dfd-b2c6-270cf28af4d0",
            "6d2479c6-280d-4961-80f9-f2929ac73af3",
            "2d058df6-8d11-4431-a4b7-fdcef093c33c",
            "502f7afe-83b6-4f83-8a50-edb962e27bcb",
            "9487ab1c-332c-4117-b819-33b7b32a3aca",
            "9e336c55-038d-4076-8e95-44576d403b3b",
            "a63d0ef3-6669-4033-a7c8-55d33cb9c1af",
            "83928130-ea15-4531-ba08-e466cee1b0bc",
            "56f42424-21e7-43ac-8d01-9bab8c2e8125"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 47744,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    },
    {
      "uuid": "6ee6dddf-6a12-40ad-bf13-29d58a03b1ba",
      "title": "@tresdoce-nestjs-toolkit/typeorm",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0b79a22f-a270-42d9-a599-bd49e47a6924",
          "title": "@tresdoce-nestjs-toolkit/typeorm",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "fullTitle": "TypeOrm > Postgres > should be defined",
              "title": "TypeOrm > Postgres > should be defined",
              "timedOut": false,
              "duration": 352,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "6f8a779a-1ab0-452f-bac5-06d8d00cfc01",
              "parentUUID": "0b79a22f-a270-42d9-a599-bd49e47a6924",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TypeOrm > Postgres > should be return an array of post",
              "title": "TypeOrm > Postgres > should be return an array of post",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "6d23b63b-bd34-414f-9b5c-7286274a26aa",
              "parentUUID": "0b79a22f-a270-42d9-a599-bd49e47a6924",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TypeOrm > Postgres > should be defined",
              "title": "TypeOrm > Postgres > should be defined",
              "timedOut": false,
              "duration": 124,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "c36c953c-c510-4353-bdce-924b6e724b11",
              "parentUUID": "0b79a22f-a270-42d9-a599-bd49e47a6924",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TypeOrm > Postgres > should be return an array of post",
              "title": "TypeOrm > Postgres > should be return an array of post",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "9836fbad-e75a-4007-9034-35c1e75a2ec2",
              "parentUUID": "0b79a22f-a270-42d9-a599-bd49e47a6924",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TypeOrm > Postgres > should be defined",
              "title": "TypeOrm > Postgres > should be defined",
              "timedOut": false,
              "duration": 2266,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "d35d5dbd-3607-4c24-a0c5-905e47fcd59a",
              "parentUUID": "0b79a22f-a270-42d9-a599-bd49e47a6924",
              "isHook": false,
              "skipped": false
            },
            {
              "fullTitle": "TypeOrm > Postgres > should be return an array of user",
              "title": "TypeOrm > Postgres > should be return an array of user",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport {\n  TCMongoOptions,\n  TCMySqlOptions,\n  TCPostgresOptions,\n  tcName,\n  testContainers,\n  fixturePostResponse,\n  fixtureUserArrayResponse,\n} from '@tresdoce-nestjs-toolkit/test-utils';\nimport { Repository } from 'typeorm';\n\nimport { TypeOrmClientModule } from '../typeorm/typeorm.module';\nimport { Post } from './utils/post.entity';\nimport { User } from './utils/user.entity';\n\nimport { configPostgres, configMySql, configMongo } from './utils';\n\njest.setTimeout(70000);\ndescribe('TypeOrm', () => {\n  describe('Postgres', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('postgres:13', {\n        ...TCPostgresOptions,\n        containerName: `${tcName}-typeorm-postgres`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configPostgres],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('MySql', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<Post>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mysql:5.7', {\n        ...TCMySqlOptions,\n        containerName: `${tcName}-typeorm-mysql`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMySql],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([Post]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('PostRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of post', async () => {\n      await repository.save([fixturePostResponse]);\n\n      const query = await repository.find();\n      expect(query).toEqual([fixturePostResponse]);\n    });\n  });\n\n  describe('Mongo', () => {\n    let app: INestApplication;\n    let container: testContainers;\n    let repository: Repository<User>;\n\n    beforeAll(async () => {\n      container = await new testContainers('mongo:5.0', {\n        ...TCMongoOptions,\n        containerName: `${tcName}-typeorm-mongo`,\n      });\n      await container.start();\n    });\n\n    afterAll(async () => {\n      await container.stop({ removeVolumes: true });\n    });\n\n    beforeEach(async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            isGlobal: true,\n            load: [configMongo],\n          }),\n          TypeOrmClientModule,\n          TypeOrmClientModule.forFeature([User]),\n        ],\n      }).compile();\n      app = module.createNestApplication();\n      repository = module.get('UserRepository');\n      await app.init();\n    });\n\n    afterEach(async () => {\n      await app.close();\n    });\n\n    it('should be defined', async () => {\n      await expect(app).toBeDefined();\n    }, 50000);\n\n    it('should be return an array of user', async () => {\n      await repository.save(fixtureUserArrayResponse);\n\n      const query: User[] = await repository.find();\n      expect(query).toEqual(expect.any(Array));\n    });\n  });\n});\n",
              "err": {},
              "uuid": "502296f6-9f09-40ac-9cb3-e18ceb64e619",
              "parentUUID": "0b79a22f-a270-42d9-a599-bd49e47a6924",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6f8a779a-1ab0-452f-bac5-06d8d00cfc01",
            "6d23b63b-bd34-414f-9b5c-7286274a26aa",
            "c36c953c-c510-4353-bdce-924b6e724b11",
            "9836fbad-e75a-4007-9034-35c1e75a2ec2",
            "d35d5dbd-3607-4c24-a0c5-905e47fcd59a",
            "502296f6-9f09-40ac-9cb3-e18ceb64e619"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2923,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ]
}